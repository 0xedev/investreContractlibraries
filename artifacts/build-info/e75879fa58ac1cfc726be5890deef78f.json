{
	"id": "e75879fa58ac1cfc726be5890deef78f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\n/**\n * @title RandomnessProvider\n * @notice Wrapper around Chainlink VRF to provide secure randomness to other modules/contracts.\n */\ncontract RandomnessProvider is VRFConsumerBaseV2 {\n    VRFCoordinatorV2Interface COORDINATOR;\n\n    uint64 public subscriptionId;\n    bytes32 public keyHash;\n    uint32 public callbackGasLimit = 200000;\n    uint16 public requestConfirmations = 3;\n\n    mapping(uint256 => address) public requestToCaller;\n\n    event RandomnessRequested(uint256 indexed requestId, address indexed caller);\n    event RandomnessFulfilled(uint256 indexed requestId, uint256[] randomWords, address indexed caller);\n\n    constructor(address vrfCoordinator, bytes32 _keyHash, uint64 _subscriptionId)\n        VRFConsumerBaseV2(vrfCoordinator)\n    {\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n        keyHash = _keyHash;\n        subscriptionId = _subscriptionId;\n    }\n\n    function requestRandomness(uint32 numWords) external returns (uint256 requestId) {\n        requestId = COORDINATOR.requestRandomWords(\n            keyHash,\n            subscriptionId,\n            requestConfirmations,\n            callbackGasLimit,\n            numWords\n        );\n\n        requestToCaller[requestId] = msg.sender;\n        emit RandomnessRequested(requestId, msg.sender);\n    }\n\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n        address caller = requestToCaller[requestId];\n        require(caller != address(0), \"RandomnessProvider: invalid requestId\");\n\n        emit RandomnessFulfilled(requestId, randomWords, caller);\n\n        // Forward randomness to caller (must implement `receiveRandomness(uint256 requestId, uint256[] memory words)`)\n        (bool success,) = caller.call(\n            abi.encodeWithSignature(\"receiveRandomness(uint256,uint256[])\", requestId, randomWords)\n        );\n        require(success, \"RandomnessProvider: callback failed\");\n    }\n}\n"
			},
			"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
			},
			"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
				"VRFConsumerBaseV2": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "have",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "want",
									"type": "address"
								}
							],
							"name": "OnlyCoordinatorCanFulfill",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								},
								{
									"internalType": "uint256[]",
									"name": "randomWords",
									"type": "uint256[]"
								}
							],
							"name": "rawFulfillRandomWords",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).",
						"kind": "dev",
						"methods": {
							"constructor": {
								"params": {
									"_vrfCoordinator": "address of VRFCoordinator contract"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"rawFulfillRandomWords(uint256,uint256[])": "1fe543e3"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360\",\"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "****************************************************************************Interface for contracts using VRF randomness *****************************************************************************",
						"version": 1
					}
				}
			},
			"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
				"VRFCoordinatorV2Interface": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								}
							],
							"name": "acceptSubscriptionOwnerTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								},
								{
									"internalType": "address",
									"name": "consumer",
									"type": "address"
								}
							],
							"name": "addConsumer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "cancelSubscription",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "createSubscription",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getRequestConfig",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								},
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								},
								{
									"internalType": "bytes32[]",
									"name": "",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								}
							],
							"name": "getSubscription",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "balance",
									"type": "uint96"
								},
								{
									"internalType": "uint64",
									"name": "reqCount",
									"type": "uint64"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "consumers",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								}
							],
							"name": "pendingRequestExists",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								},
								{
									"internalType": "address",
									"name": "consumer",
									"type": "address"
								}
							],
							"name": "removeConsumer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "keyHash",
									"type": "bytes32"
								},
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								},
								{
									"internalType": "uint16",
									"name": "minimumRequestConfirmations",
									"type": "uint16"
								},
								{
									"internalType": "uint32",
									"name": "callbackGasLimit",
									"type": "uint32"
								},
								{
									"internalType": "uint32",
									"name": "numWords",
									"type": "uint32"
								}
							],
							"name": "requestRandomWords",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "subId",
									"type": "uint64"
								},
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "requestSubscriptionOwnerTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"acceptSubscriptionOwnerTransfer(uint64)": {
								"details": "will revert if original owner of subId has not requested that msg.sender become the new owner.",
								"params": {
									"subId": "- ID of the subscription"
								}
							},
							"addConsumer(uint64,address)": {
								"params": {
									"consumer": "- New consumer which can use the subscription",
									"subId": "- ID of the subscription"
								}
							},
							"cancelSubscription(uint64,address)": {
								"params": {
									"subId": "- ID of the subscription",
									"to": "- Where to send the remaining LINK to"
								}
							},
							"createSubscription()": {
								"details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));",
								"returns": {
									"subId": "- A unique subscription id."
								}
							},
							"getRequestConfig()": {
								"returns": {
									"_0": "minimumRequestConfirmations global min for request confirmations",
									"_1": "maxGasLimit global max for request gas limit",
									"_2": "s_provingKeyHashes list of registered key hashes"
								}
							},
							"getSubscription(uint64)": {
								"params": {
									"subId": "- ID of the subscription"
								},
								"returns": {
									"balance": "- LINK balance of the subscription in juels.",
									"consumers": "- list of consumer address which are able to use this subscription.",
									"owner": "- owner of the subscription.",
									"reqCount": "- number of requests for this subscription, determines fee tier."
								}
							},
							"removeConsumer(uint64,address)": {
								"params": {
									"consumer": "- Consumer to remove from the subscription",
									"subId": "- ID of the subscription"
								}
							},
							"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)": {
								"params": {
									"callbackGasLimit": "- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]",
									"keyHash": "- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.",
									"minimumRequestConfirmations": "- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].",
									"numWords": "- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.",
									"subId": "- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."
								},
								"returns": {
									"requestId": "- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."
								}
							},
							"requestSubscriptionOwnerTransfer(uint64,address)": {
								"params": {
									"newOwner": "- proposed new owner of the subscription",
									"subId": "- ID of the subscription"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"acceptSubscriptionOwnerTransfer(uint64)": "82359740",
							"addConsumer(uint64,address)": "7341c10c",
							"cancelSubscription(uint64,address)": "d7ae1d30",
							"createSubscription()": "a21a23e4",
							"getRequestConfig()": "00012291",
							"getSubscription(uint64)": "a47c7696",
							"pendingRequestExists(uint64)": "e82ad7d4",
							"removeConsumer(uint64,address)": "9f87fad7",
							"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)": "5d3b1d30",
							"requestSubscriptionOwnerTransfer(uint64,address)": "04c357cb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d66b2096987616cda4611c109d9904863872ca5852d736b30f0e19e49afde35f\",\"dweb:/ipfs/Qmc6jpm3k3YuJG7U2s3FWr81Vk2rdQBhdqD9sA6b8Cr9BE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"acceptSubscriptionOwnerTransfer(uint64)": {
								"notice": "Request subscription owner transfer."
							},
							"addConsumer(uint64,address)": {
								"notice": "Add a consumer to a VRF subscription."
							},
							"cancelSubscription(uint64,address)": {
								"notice": "Cancel a subscription"
							},
							"createSubscription()": {
								"notice": "Create a VRF subscription."
							},
							"getRequestConfig()": {
								"notice": "Get configuration relevant for making requests"
							},
							"getSubscription(uint64)": {
								"notice": "Get a VRF subscription."
							},
							"removeConsumer(uint64,address)": {
								"notice": "Remove a consumer from a VRF subscription."
							},
							"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)": {
								"notice": "Request a set of random words."
							},
							"requestSubscriptionOwnerTransfer(uint64,address)": {
								"notice": "Request subscription owner transfer."
							}
						},
						"version": 1
					}
				}
			},
			"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol": {
				"RandomnessProvider": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "vrfCoordinator",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_keyHash",
									"type": "bytes32"
								},
								{
									"internalType": "uint64",
									"name": "_subscriptionId",
									"type": "uint64"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "have",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "want",
									"type": "address"
								}
							],
							"name": "OnlyCoordinatorCanFulfill",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "randomWords",
									"type": "uint256[]"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "caller",
									"type": "address"
								}
							],
							"name": "RandomnessFulfilled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "caller",
									"type": "address"
								}
							],
							"name": "RandomnessRequested",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "callbackGasLimit",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "keyHash",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								},
								{
									"internalType": "uint256[]",
									"name": "randomWords",
									"type": "uint256[]"
								}
							],
							"name": "rawFulfillRandomWords",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requestConfirmations",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32",
									"name": "numWords",
									"type": "uint32"
								}
							],
							"name": "requestRandomness",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "requestToCaller",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "subscriptionId",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "RandomnessProvider",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n  0xa0\n  jumpi(tag_9, callvalue)\n  0x1f\n  bytecodeSize\n  codesize\n  dup2\n  swap1\n  sub\n  swap2\n  dup3\n  add\n  not(0x1f)\n  and\n  dup4\n  add\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup4\n  gt\n  dup5\n  dup5\n  lt\n  or\n  tag_3\n  jumpi\n  dup1\n  dup5\n  swap3\n  0x60\n  swap5\n  0x40\n  mstore\n  dup4\n  codecopy\n  dup2\n  add\n  sub\n  slt\n  tag_9\n  jumpi\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n  dup2\n  and\n  swap1\n  dup2\n  dup2\n  sub\n  tag_9\n  jumpi\n  0x20\n  dup4\n  add\n  mload\n  0x40\n  swap1\n  swap4\n  add\n  mload\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  and\n  dup3\n  sub\n  tag_9\n  jumpi\n    /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":5599:5631  vrfCoordinator = _vrfCoordinator */\n  0x80\n  mstore\n    /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n  0x0300030d40\n  not(0xffffffffffff)\n    /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":530:536  200000 */\n  0x02\n    /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n  sload\n  and\n  or\n    /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":530:536  200000 */\n  0x02\n    /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n  sstore\n  sload(0x00)\n  swap3\n  0x01\n  sstore\n  sub(shl(0xe0, 0x01), shl(0xa0, 0x01))\n  swap1\n  0xa0\n  shl\n  and\n  swap2\n  shl(0xe0, 0xffffffff)\n  and\n  or\n  or\n  0x00\n  sstore\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n    /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":5599:5631  vrfCoordinator = _vrfCoordinator */\n  0x80\n    /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n  mload\n  dup2\n  assignImmutable(\"0x1a192fabce13988b84994d4296e6cdc418d55e2f1d7f942188d4040b94fc57ac\")\n  return\ntag_9:\n  0x00\n  dup1\n  revert\ntag_3:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\nstop\n\nsub_0: assembly {\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x80\n      dup1\n      0x40\n      mstore\n      jumpi(tag_3, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_3:\n      shr(0xe0, calldataload(0x00))\n      swap1\n      dup2\n      0x09c1ba2e\n      eq\n      tag_5\n      jumpi\n      pop\n      dup1\n      0x1fe543e3\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x24f74697\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x61728f39\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x811ee32a\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xad1339ea\n      eq\n      tag_15\n      jumpi\n      0xb0fb162f\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      jumpi(tag_21, callvalue)\n      jumpi(tag_21, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      0xffff\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":542:580  uint16 public requestConfirmations = 3 */\n      0x02\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      sload\n      dup3\n      shr\n      and\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_21:\n      0x00\n      dup1\n      revert\n    tag_15:\n      jumpi(tag_21, callvalue)\n      jumpi(tag_21, slt(add(not(0x03), calldatasize), 0x20))\n      mstore(0x00, calldataload(0x04))\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":587:637  mapping(uint256 => address) public requestToCaller */\n      0x03\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x20\n      mstore\n      0x20\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      sload(keccak256(0x00, 0x40))\n      and\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_13:\n      jumpi(tag_21, callvalue)\n      jumpi(tag_21, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n      0xffffffff\n      dup2\n      and\n      dup1\n      swap2\n      sub\n      tag_21\n      jumpi\n      0x20\n      0xffffffff\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      0xa4\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      sload(0x00)\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1251:1258  keyHash */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      sload\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1300:1320  requestConfirmations */\n      0x02\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      sload\n      swap5\n      mload(0x40)\n      swap8\n      dup9\n      swap7\n      dup8\n      swap6\n      shl(0xe4, 0x05d3b1d3)\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      dup8\n      mstore\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x04\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      dup8\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      mstore\n      0xffffffffffffffff\n      dup5\n      0xa0\n      shr\n      and\n      0x24\n      dup8\n      add\n      mstore\n      0xffff\n      dup2\n      dup11\n      shr\n      and\n      0x44\n      dup8\n      add\n      mstore\n      and\n      0x64\n      dup6\n      add\n      mstore\n      0x84\n      dup5\n      add\n      mstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      gas\n      call\n      dup1\n      iszero\n      tag_33\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      swap1\n      tag_35\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n    tag_36:\n      dup1\n      0x20\n      swap2\n      0x00\n      mstore\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1393:1408  requestToCaller */\n      0x03\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      dup3\n      mstore\n      keccak256(0x00, 0x40)\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1422:1432  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      shl(0xa0, 0xffffffffffffffffffffffff)\n      dup3\n      sload\n      and\n      or\n      swap1\n      sstore\n      mload(0x40)\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1422:1432  msg.sender */\n      swap1\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1447:1489  RandomnessRequested(requestId, msg.sender) */\n      dup2\n      0x28f521cf7abd0044cba5bb040c5217ff69a4e5865f5262905018698e68fe7d00\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1447:1489  RandomnessRequested(requestId, msg.sender) */\n      dup1\n      log3\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      dup2\n      mstore\n      return\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n    tag_35:\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      dup2\n      returndatasize\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      gt\n      tag_37\n      jumpi\n    tag_38:\n      dup2\n      tag_39\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      swap4\n      dup4\n      tag_1\n      jump\t// in\n    tag_39:\n      dup2\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      sub\n      slt\n      tag_21\n      jumpi\n      0x20\n      swap1\n      mload\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1207:1382  COORDINATOR.requestRandomWords(... */\n      jump(tag_36)\n    tag_37:\n      returndatasize\n      swap2\n      pop\n      jump(tag_38)\n    tag_33:\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_11:\n      jumpi(tag_21, callvalue)\n      jumpi(tag_21, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":469:491  bytes32 public keyHash */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_9:\n      jumpi(tag_21, callvalue)\n      jumpi(tag_21, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      0xffffffff\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":497:536  uint32 public callbackGasLimit = 200000 */\n      0x02\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      sload\n      and\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_7:\n      jumpi(tag_21, callvalue)\n      jumpi(tag_21, slt(add(not(0x03), calldatasize), 0x40))\n      calldataload(0x04)\n      calldataload(0x24)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_21\n      jumpi\n      calldatasize\n      0x23\n      dup3\n      add\n      slt\n      iszero\n      tag_21\n      jumpi\n      dup1\n      0x04\n      add\n      calldataload\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_75\n      jumpi\n      dup2\n      0x05\n      shl\n      mload(0x40)\n      swap3\n      tag_60\n      0x20\n      dup4\n      add\n      dup6\n      tag_1\n      jump\t// in\n    tag_60:\n      dup4\n      mstore\n      0x24\n      0x20\n      dup5\n      add\n      swap2\n      dup4\n      add\n      add\n      swap2\n      calldatasize\n      dup4\n      gt\n      tag_21\n      jumpi\n      0x24\n      add\n      swap1\n    tag_63:\n      dup3\n      dup3\n      lt\n      tag_64\n      jumpi\n      pop\n      pop\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6731:6745  vrfCoordinator */\n      immutable(\"0x1a192fabce13988b84994d4296e6cdc418d55e2f1d7f942188d4040b94fc57ac\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      and\n      swap1\n      pop\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6717:6727  msg.sender */\n      caller\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6717:6745  msg.sender != vrfCoordinator */\n      dup2\n      swap1\n      sub\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6713:6822  if (msg.sender != vrfCoordinator) {... */\n      tag_66\n      jumpi\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1624:1639  requestToCaller */\n      0x03\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1668:1688  caller != address(0) */\n      dup1\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      tag_68\n      jumpi\n      dup3\n      0x00\n      tag_70\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1971:2058  abi.encodeWithSignature(\"receiveRandomness(uint256,uint256[])\", requestId, randomWords) */\n      tag_71\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      dup3\n      swap7\n      swap6\n      dup6\n      dup5\n      swap8\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1746:1797  RandomnessFulfilled(requestId, randomWords, caller) */\n      0x09a25a7192f51d336dcb9827403360b0a21163b04b38de4178e800d96f6f0fdc\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      mload(0x40)\n      0x20\n      dup2\n      mstore\n      dup1\n      tag_72\n      0x20\n      dup3\n      add\n      dup8\n      tag_2\n      jump\t// in\n    tag_72:\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1746:1797  RandomnessFulfilled(requestId, randomWords, caller) */\n      sub\n      swap1\n      log3\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      mload(0x40)\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1971:2058  abi.encodeWithSignature(\"receiveRandomness(uint256,uint256[])\", requestId, randomWords) */\n      swap3\n      dup4\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1971:2058  abi.encodeWithSignature(\"receiveRandomness(uint256,uint256[])\", requestId, randomWords) */\n      dup4\n      add\n      swap7\n      shl(0xe0, 0x37f9c70d)\n      dup9\n      mstore\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x24\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1971:2058  abi.encodeWithSignature(\"receiveRandomness(uint256,uint256[])\", requestId, randomWords) */\n      dup5\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      mstore\n      0x40\n      0x44\n      dup5\n      add\n      mstore\n      0x64\n      dup4\n      add\n      swap1\n      tag_2\n      jump\t// in\n    tag_70:\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1971:2058  abi.encodeWithSignature(\"receiveRandomness(uint256,uint256[])\", requestId, randomWords) */\n      sub\n      not(0x1f)\n      dup2\n      add\n      dup4\n      mstore\n      dup3\n      tag_1\n      jump\t// in\n    tag_71:\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1946:2068  caller.call(... */\n      mload\n      swap3\n      gas\n      call\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      jumpi(tag_73, iszero(returndatasize))\n      returndatasize\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_75\n      jumpi\n      mload(0x40)\n      swap1\n      tag_77\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1971:2058  abi.encodeWithSignature(\"receiveRandomness(uint256,uint256[])\", requestId, randomWords) */\n      0x1f\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      dup3\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup4\n      tag_1\n      jump\t// in\n    tag_77:\n      dup2\n      mstore\n      0x00\n      0x20\n      returndatasize\n      swap3\n      add\n      returndatacopy\n    tag_78:\n      iszero\n      tag_79\n      jumpi\n      stop\n    tag_79:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x23\n      0x24\n      dup3\n      add\n      mstore\n      0x52616e646f6d6e65737350726f76696465723a2063616c6c6261636b20666169\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xea, 0x1b1959)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_75:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_73:\n      jump(tag_78)\n    tag_68:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x25\n      0x24\n      dup3\n      add\n      mstore\n      0x52616e646f6d6e65737350726f76696465723a20696e76616c69642072657175\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xda, 0x195cdd1259)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6713:6822  if (msg.sender != vrfCoordinator) {... */\n    tag_66:\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6762:6815  OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator) */\n      shl(0xe2, 0x073e64fd)\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x00\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6762:6815  OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator) */\n      mstore\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6717:6727  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      0x04\n      mstore\n      0x24\n      mstore\n      0x44\n      0x00\n        /* \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":6762:6815  OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator) */\n      revert\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n    tag_64:\n      dup2\n      calldataload\n      dup2\n      mstore\n      0x20\n      swap2\n      dup3\n      add\n      swap2\n      add\n      jump(tag_63)\n    tag_5:\n      jumpi(tag_21, callvalue)\n      jumpi(tag_21, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      swap1\n      and(shr(0xa0, sload(0x00)), 0xffffffffffffffff)\n      dup2\n      mstore\n      return\n    tag_1:\n      swap1\n      0x1f\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":1971:2058  abi.encodeWithSignature(\"receiveRandomness(uint256,uint256[])\", requestId, randomWords) */\n      dup1\n      not\n        /* \"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":336:2142  contract RandomnessProvider is VRFConsumerBaseV2 {... */\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_75\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_2:\n      swap1\n      0x20\n      dup1\n      dup4\n      mload\n      swap3\n      dup4\n      dup2\n      mstore\n      add\n      swap3\n      add\n      swap1\n      0x00\n    tag_87:\n      dup2\n      dup2\n      lt\n      tag_88\n      jumpi\n      pop\n      pop\n      pop\n      swap1\n      jump\t// out\n    tag_88:\n      dup3\n      mload\n      dup5\n      mstore\n      0x20\n      swap4\n      dup5\n      add\n      swap4\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      add\n      jump(tag_87)\n\n    auxdata: 0xa264697066735822122089df05e22b08e25b1b12c6cefc698268aa2acc25480acab35451cd71aadf606b64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60a0346100c357601f61062438819003918201601f19168301916001600160401b038311848410176100c7578084926060946040528339810103126100c35780516001600160a01b038116908181036100c3576020830151604090930151906001600160401b03821682036100c357608052640300030d4065ffffffffffff1960025416176002555f5492600155600160a01b600160e01b039060a01b169163ffffffff60e01b1617175f5560405161054890816100dc8239608051816102a10152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c90816309c1ba2e14610497575080631fe543e31461022257806324f74697146101ff57806361728f39146101e2578063811ee32a146100c2578063ad1339ea146100905763b0fb162f14610069575f80fd5b3461008c575f36600319011261008c57602061ffff600254821c16604051908152f35b5f80fd5b3461008c57602036600319011261008c576004355f526003602052602060018060a01b0360405f205416604051908152f35b3461008c57602036600319011261008c5760043563ffffffff811680910361008c57602063ffffffff9160a45f545f600154916002549460405197889687956305d3b1d360e41b8752600487015267ffffffffffffffff8460a01c16602487015261ffff818a1c166044870152166064850152608484015260018060a01b03165af180156101d7575f906101a4575b806020915f526003825260405f20336bffffffffffffffffffffffff60a01b8254161790556040519033817f28f521cf7abd0044cba5bb040c5217ff69a4e5865f5262905018698e68fe7d005f80a38152f35b506020813d6020116101cf575b816101be602093836104bd565b8101031261008c5760209051610151565b3d91506101b1565b6040513d5f823e3d90fd5b3461008c575f36600319011261008c576020600154604051908152f35b3461008c575f36600319011261008c57602063ffffffff60025416604051908152f35b3461008c57604036600319011261008c5760043560243567ffffffffffffffff811161008c573660238201121561008c5780600401359067ffffffffffffffff8211610405578160051b6040519261027d60208301856104bd565b8352602460208401918301019136831161008c57602401905b8282106104875750507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690503381900361047157505f828152600360205260409020546001600160a01b0316801561041e57825f6103636103718296958584977f09a25a7192f51d336dcb9827403360b0a21163b04b38de4178e800d96f6f0fdc604051602081528061033560208201876104df565b0390a360405192839160208301966337f9c70d60e01b885260248401526040604484015260648301906104df565b03601f1981018352826104bd565b51925af13d15610419573d67ffffffffffffffff811161040557604051906103a3601f8201601f1916602001836104bd565b81525f60203d92013e5b156103b457005b60405162461bcd60e51b815260206004820152602360248201527f52616e646f6d6e65737350726f76696465723a2063616c6c6261636b206661696044820152621b195960ea1b6064820152608490fd5b634e487b7160e01b5f52604160045260245ffd5b6103ad565b60405162461bcd60e51b815260206004820152602560248201527f52616e646f6d6e65737350726f76696465723a20696e76616c69642072657175604482015264195cdd125960da1b6064820152608490fd5b63073e64fd60e21b5f523360045260245260445ffd5b8135815260209182019101610296565b3461008c575f36600319011261008c5760209067ffffffffffffffff5f5460a01c168152f35b90601f8019910116810190811067ffffffffffffffff82111761040557604052565b90602080835192838152019201905f5b8181106104fc5750505090565b82518452602093840193909201916001016104ef56fea264697066735822122089df05e22b08e25b1b12c6cefc698268aa2acc25480acab35451cd71aadf606b64736f6c634300081a0033",
							"opcodes": "PUSH1 0xA0 CALLVALUE PUSH2 0xC3 JUMPI PUSH1 0x1F PUSH2 0x624 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xC7 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x60 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xC3 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 DUP2 SUB PUSH2 0xC3 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 SWAP1 SWAP4 ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xC3 JUMPI PUSH1 0x80 MSTORE PUSH5 0x300030D40 PUSH6 0xFFFFFFFFFFFF NOT PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH0 SLOAD SWAP3 PUSH1 0x1 SSTORE PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 PUSH1 0xA0 SHL AND SWAP2 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND OR OR PUSH0 SSTORE PUSH1 0x40 MLOAD PUSH2 0x548 SWAP1 DUP2 PUSH2 0xDC DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x2A1 ADD MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x9C1BA2E EQ PUSH2 0x497 JUMPI POP DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x24F74697 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x61728F39 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x811EE32A EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0xAD1339EA EQ PUSH2 0x90 JUMPI PUSH4 0xB0FB162F EQ PUSH2 0x69 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x20 PUSH2 0xFFFF PUSH1 0x2 SLOAD DUP3 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x4 CALLDATALOAD PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP1 SWAP2 SUB PUSH2 0x8C JUMPI PUSH1 0x20 PUSH4 0xFFFFFFFF SWAP2 PUSH1 0xA4 PUSH0 SLOAD PUSH0 PUSH1 0x1 SLOAD SWAP2 PUSH1 0x2 SLOAD SWAP5 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP8 MSTORE PUSH1 0x4 DUP8 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP5 PUSH1 0xA0 SHR AND PUSH1 0x24 DUP8 ADD MSTORE PUSH2 0xFFFF DUP2 DUP11 SHR AND PUSH1 0x44 DUP8 ADD MSTORE AND PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x1D7 JUMPI PUSH0 SWAP1 PUSH2 0x1A4 JUMPI JUMPDEST DUP1 PUSH1 0x20 SWAP2 PUSH0 MSTORE PUSH1 0x3 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 CALLER PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 CALLER DUP2 PUSH32 0x28F521CF7ABD0044CBA5BB040C5217FF69A4E5865F5262905018698E68FE7D00 PUSH0 DUP1 LOG3 DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1CF JUMPI JUMPDEST DUP2 PUSH2 0x1BE PUSH1 0x20 SWAP4 DUP4 PUSH2 0x4BD JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH2 0x151 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1B1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8C JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x8C JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x405 JUMPI DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD SWAP3 PUSH2 0x27D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4BD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP2 DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x8C JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x487 JUMPI POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP CALLER DUP2 SWAP1 SUB PUSH2 0x471 JUMPI POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x41E JUMPI DUP3 PUSH0 PUSH2 0x363 PUSH2 0x371 DUP3 SWAP7 SWAP6 DUP6 DUP5 SWAP8 PUSH32 0x9A25A7192F51D336DCB9827403360B0A21163B04B38DE4178E800D96F6F0FDC PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 MSTORE DUP1 PUSH2 0x335 PUSH1 0x20 DUP3 ADD DUP8 PUSH2 0x4DF JUMP JUMPDEST SUB SWAP1 LOG3 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD SWAP7 PUSH4 0x37F9C70D PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH2 0x4DF JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x4BD JUMP JUMPDEST MLOAD SWAP3 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x419 JUMPI RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3A3 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH2 0x4BD JUMP JUMPDEST DUP2 MSTORE PUSH0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x3B4 JUMPI STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x52616E646F6D6E65737350726F76696465723A2063616C6C6261636B20666169 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x1B1959 PUSH1 0xEA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x3AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x52616E646F6D6E65737350726F76696465723A20696E76616C69642072657175 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x195CDD1259 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x73E64FD PUSH1 0xE2 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x296 JUMP JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF PUSH0 SLOAD PUSH1 0xA0 SHR AND DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x405 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP1 DUP4 MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP3 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x4FC JUMPI POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4EF JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 0xDF SDIV 0xE2 0x2B ADDMOD 0xE2 JUMPDEST SHL SLT 0xC6 0xCE 0xFC PUSH10 0x8268AA2ACC25480ACAB3 SLOAD MLOAD 0xCD PUSH18 0xAADF606B64736F6C634300081A0033000000 ",
							"sourceMap": "336:1806:2:-:0;;;;;;;;;;;;;-1:-1:-1;;336:1806:2;;;;-1:-1:-1;;;;;336:1806:2;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;336:1806:2;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;336:1806:2;;;;;;5599:32:0;;336:1806:2;;;530:6;336:1806;;;530:6;336:1806;-1:-1:-1;336:1806:2;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;336:1806:2;;;;;;;;;5599:32:0;336:1806:2;;;;;;;-1:-1:-1;336:1806:2;;;;;;-1:-1:-1;336:1806:2;;;;;-1:-1:-1;336:1806:2"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_encode_array_uint256_dyn": {
									"entryPoint": 1247,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 1213,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"10": [
									{
										"length": 32,
										"start": 673
									}
								]
							},
							"linkReferences": {},
							"object": "6080806040526004361015610012575f80fd5b5f3560e01c90816309c1ba2e14610497575080631fe543e31461022257806324f74697146101ff57806361728f39146101e2578063811ee32a146100c2578063ad1339ea146100905763b0fb162f14610069575f80fd5b3461008c575f36600319011261008c57602061ffff600254821c16604051908152f35b5f80fd5b3461008c57602036600319011261008c576004355f526003602052602060018060a01b0360405f205416604051908152f35b3461008c57602036600319011261008c5760043563ffffffff811680910361008c57602063ffffffff9160a45f545f600154916002549460405197889687956305d3b1d360e41b8752600487015267ffffffffffffffff8460a01c16602487015261ffff818a1c166044870152166064850152608484015260018060a01b03165af180156101d7575f906101a4575b806020915f526003825260405f20336bffffffffffffffffffffffff60a01b8254161790556040519033817f28f521cf7abd0044cba5bb040c5217ff69a4e5865f5262905018698e68fe7d005f80a38152f35b506020813d6020116101cf575b816101be602093836104bd565b8101031261008c5760209051610151565b3d91506101b1565b6040513d5f823e3d90fd5b3461008c575f36600319011261008c576020600154604051908152f35b3461008c575f36600319011261008c57602063ffffffff60025416604051908152f35b3461008c57604036600319011261008c5760043560243567ffffffffffffffff811161008c573660238201121561008c5780600401359067ffffffffffffffff8211610405578160051b6040519261027d60208301856104bd565b8352602460208401918301019136831161008c57602401905b8282106104875750507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690503381900361047157505f828152600360205260409020546001600160a01b0316801561041e57825f6103636103718296958584977f09a25a7192f51d336dcb9827403360b0a21163b04b38de4178e800d96f6f0fdc604051602081528061033560208201876104df565b0390a360405192839160208301966337f9c70d60e01b885260248401526040604484015260648301906104df565b03601f1981018352826104bd565b51925af13d15610419573d67ffffffffffffffff811161040557604051906103a3601f8201601f1916602001836104bd565b81525f60203d92013e5b156103b457005b60405162461bcd60e51b815260206004820152602360248201527f52616e646f6d6e65737350726f76696465723a2063616c6c6261636b206661696044820152621b195960ea1b6064820152608490fd5b634e487b7160e01b5f52604160045260245ffd5b6103ad565b60405162461bcd60e51b815260206004820152602560248201527f52616e646f6d6e65737350726f76696465723a20696e76616c69642072657175604482015264195cdd125960da1b6064820152608490fd5b63073e64fd60e21b5f523360045260245260445ffd5b8135815260209182019101610296565b3461008c575f36600319011261008c5760209067ffffffffffffffff5f5460a01c168152f35b90601f8019910116810190811067ffffffffffffffff82111761040557604052565b90602080835192838152019201905f5b8181106104fc5750505090565b82518452602093840193909201916001016104ef56fea264697066735822122089df05e22b08e25b1b12c6cefc698268aa2acc25480acab35451cd71aadf606b64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x9C1BA2E EQ PUSH2 0x497 JUMPI POP DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x24F74697 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x61728F39 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x811EE32A EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0xAD1339EA EQ PUSH2 0x90 JUMPI PUSH4 0xB0FB162F EQ PUSH2 0x69 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x20 PUSH2 0xFFFF PUSH1 0x2 SLOAD DUP3 SHR AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x4 CALLDATALOAD PUSH0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP1 SWAP2 SUB PUSH2 0x8C JUMPI PUSH1 0x20 PUSH4 0xFFFFFFFF SWAP2 PUSH1 0xA4 PUSH0 SLOAD PUSH0 PUSH1 0x1 SLOAD SWAP2 PUSH1 0x2 SLOAD SWAP5 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP8 MSTORE PUSH1 0x4 DUP8 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP5 PUSH1 0xA0 SHR AND PUSH1 0x24 DUP8 ADD MSTORE PUSH2 0xFFFF DUP2 DUP11 SHR AND PUSH1 0x44 DUP8 ADD MSTORE AND PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x1D7 JUMPI PUSH0 SWAP1 PUSH2 0x1A4 JUMPI JUMPDEST DUP1 PUSH1 0x20 SWAP2 PUSH0 MSTORE PUSH1 0x3 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 CALLER PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 CALLER DUP2 PUSH32 0x28F521CF7ABD0044CBA5BB040C5217FF69A4E5865F5262905018698E68FE7D00 PUSH0 DUP1 LOG3 DUP2 MSTORE RETURN JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1CF JUMPI JUMPDEST DUP2 PUSH2 0x1BE PUSH1 0x20 SWAP4 DUP4 PUSH2 0x4BD JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8C JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH2 0x151 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1B1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8C JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x8C JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x405 JUMPI DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD SWAP3 PUSH2 0x27D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4BD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP2 DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x8C JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x487 JUMPI POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP CALLER DUP2 SWAP1 SUB PUSH2 0x471 JUMPI POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x41E JUMPI DUP3 PUSH0 PUSH2 0x363 PUSH2 0x371 DUP3 SWAP7 SWAP6 DUP6 DUP5 SWAP8 PUSH32 0x9A25A7192F51D336DCB9827403360B0A21163B04B38DE4178E800D96F6F0FDC PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 MSTORE DUP1 PUSH2 0x335 PUSH1 0x20 DUP3 ADD DUP8 PUSH2 0x4DF JUMP JUMPDEST SUB SWAP1 LOG3 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD SWAP7 PUSH4 0x37F9C70D PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH2 0x4DF JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x4BD JUMP JUMPDEST MLOAD SWAP3 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x419 JUMPI RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3A3 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH2 0x4BD JUMP JUMPDEST DUP2 MSTORE PUSH0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x3B4 JUMPI STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x52616E646F6D6E65737350726F76696465723A2063616C6C6261636B20666169 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x1B1959 PUSH1 0xEA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x3AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x52616E646F6D6E65737350726F76696465723A20696E76616C69642072657175 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x195CDD1259 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x73E64FD PUSH1 0xE2 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x296 JUMP JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF PUSH0 SLOAD PUSH1 0xA0 SHR AND DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x405 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP1 DUP4 MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP3 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x4FC JUMPI POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4EF JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 0xDF SDIV 0xE2 0x2B ADDMOD 0xE2 JUMPDEST SHL SLT 0xC6 0xCE 0xFC PUSH10 0x8268AA2ACC25480ACAB3 SLOAD MLOAD 0xCD PUSH18 0xAADF606B64736F6C634300081A0033000000 ",
							"sourceMap": "336:1806:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;336:1806:2;;;;;;542:38;336:1806;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;336:1806:2;;;;;;;;587:50;336:1806;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;336:1806:2;;;;;;;;;;;;;;;;;1207:175;336:1806;;;1251:7;336:1806;;1300:20;336:1806;;;;;;;;;;;;1207:175;;336:1806;1207:175;;336:1806;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1207:175;;;;;;336:1806;1207:175;;;336:1806;;;;;;1393:15;336:1806;;;;;1422:10;336:1806;;;;;;;;;;;1422:10;;1447:42;;336:1806;1447:42;;336:1806;;;1207:175;;336:1806;1207:175;;336:1806;1207:175;;;;;;336:1806;1207:175;;;:::i;:::-;;;336:1806;;;;;;;1207:175;;;;;-1:-1:-1;1207:175:2;;;336:1806;;;;;;;;;;;;;;;-1:-1:-1;;336:1806:2;;;;;469:22;336:1806;;;;;;;;;;;;;-1:-1:-1;;336:1806:2;;;;;;497:39;336:1806;;;;;;;;;;;;;;-1:-1:-1;;336:1806:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6731:14:0;-1:-1:-1;;;;;336:1806:2;;-1:-1:-1;6717:10:0;:28;;;6713:109;;-1:-1:-1;336:1806:2;;;;1624:15;336:1806;;;;;;-1:-1:-1;;;;;336:1806:2;1668:20;;336:1806;;;;;1971:87;336:1806;;;;;;1746:51;336:1806;;;;;;;;;;;;:::i;:::-;1746:51;;;336:1806;;1971:87;;;336:1806;1971:87;;;;;;;;336:1806;1971:87;;336:1806;;;;;;;;;;;:::i;:::-;1971:87;;;;;;;;;:::i;:::-;1946:122;;;;336:1806;;;;;;;;;;;;;;1971:87;336:1806;;-1:-1:-1;;336:1806:2;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;336:1806:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;336:1806:2;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;336:1806:2;;;;;;;;;;;;;;;;;-1:-1:-1;;;336:1806:2;;;;;;;6713:109:0;6762:53;;;336:1806:2;6762:53:0;6717:10;336:1806:2;;;;;;6762:53:0;336:1806:2;;;;;;;;;;;;;;;;;;;-1:-1:-1;;336:1806:2;;;;;;;;;;;;;;;;;;1971:87;;336:1806;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;336:1806:2;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "270400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"callbackGasLimit()": "2306",
								"keyHash()": "2322",
								"rawFulfillRandomWords(uint256,uint256[])": "infinite",
								"requestConfirmations()": "2397",
								"requestRandomness(uint32)": "infinite",
								"requestToCaller(uint256)": "2449",
								"subscriptionId()": "2259"
							},
							"internal": {
								"fulfillRandomWords(uint256,uint256[] memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "A0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "60"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SLT",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 5599,
									"end": 5631,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 5599,
									"end": 5631,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "300030D40"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "FFFFFFFFFFFF"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 530,
									"end": 536,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 530,
									"end": 536,
									"name": "PUSH",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "A0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "E0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "A0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "FFFFFFFF"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "E0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "OR",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 5599,
									"end": 5631,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "RETURN",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "tag",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "tag",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "4E487B71"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "E0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 336,
									"end": 2142,
									"name": "REVERT",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122089df05e22b08e25b1b12c6cefc698268aa2acc25480acab35451cd71aadf606b64736f6c634300081a0033",
									".code": [
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "9C1BA2E"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "1FE543E3"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24F74697"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "61728F39"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "811EE32A"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "AD1339EA"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "B0FB162F"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 542,
											"end": 580,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 587,
											"end": 637,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "PUSH",
											"source": 2,
											"value": "A4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1251,
											"end": 1258,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1300,
											"end": 1320,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "5D3B1D3"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "E4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1393,
											"end": 1408,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1422,
											"end": 1432,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1422,
											"end": 1432,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1422,
											"end": 1432,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 1447,
											"end": 1489,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1447,
											"end": 1489,
											"name": "PUSH",
											"source": 2,
											"value": "28F521CF7ABD0044CBA5BB040C5217FF69A4E5865F5262905018698E68FE7D00"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1447,
											"end": 1489,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1447,
											"end": 1489,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "tag",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1207,
											"end": 1382,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 1207,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 469,
											"end": 491,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 497,
											"end": 536,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 336,
											"end": 2142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6731,
											"end": 6745,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "10"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6717,
											"end": 6727,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 6717,
											"end": 6745,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6717,
											"end": 6745,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6717,
											"end": 6745,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6713,
											"end": 6822,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 6713,
											"end": 6822,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1624,
											"end": 1639,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1668,
											"end": 1688,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1668,
											"end": 1688,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "PUSH",
											"source": 2,
											"value": "9A25A7192F51D336DCB9827403360B0A21163B04B38DE4178E800D96F6F0FDC"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 336,
											"end": 2142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1746,
											"end": 1797,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "PUSH",
											"source": 2,
											"value": "37F9C70D"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 336,
											"end": 2142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1971,
											"end": 2058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1946,
											"end": 2068,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1946,
											"end": 2068,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1946,
											"end": 2068,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 1946,
											"end": 2068,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 336,
											"end": 2142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "52616E646F6D6E65737350726F76696465723A2063616C6C6261636B20666169"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "52616E646F6D6E65737350726F76696465723A20696E76616C69642072657175"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "195CDD1259"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6713,
											"end": 6822,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 6713,
											"end": 6822,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6762,
											"end": 6815,
											"name": "PUSH",
											"source": 0,
											"value": "73E64FD"
										},
										{
											"begin": 6762,
											"end": 6815,
											"name": "PUSH",
											"source": 0,
											"value": "E2"
										},
										{
											"begin": 6762,
											"end": 6815,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6762,
											"end": 6815,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6717,
											"end": 6727,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6762,
											"end": 6815,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 2058,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 336,
											"end": 2142,
											"name": "JUMP",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol",
								"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
								"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"callbackGasLimit()": "24f74697",
							"keyHash()": "61728f39",
							"rawFulfillRandomWords(uint256,uint256[])": "1fe543e3",
							"requestConfirmations()": "b0fb162f",
							"requestRandomness(uint32)": "811ee32a",
							"requestToCaller(uint256)": "ad1339ea",
							"subscriptionId()": "09c1ba2e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestToCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"RandomnessProvider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Wrapper around Chainlink VRF to provide secure randomness to other modules/contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":\"RandomnessProvider\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360\",\"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4\"]},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d66b2096987616cda4611c109d9904863872ca5852d736b30f0e19e49afde35f\",\"dweb:/ipfs/Qmc6jpm3k3YuJG7U2s3FWr81Vk2rdQBhdqD9sA6b8Cr9BE\"]},\"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol\":{\"keccak256\":\"0xf032507e01c19a844d9bcdae86eecdad0d63870e7d7a23290380649660dd77d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e08b7e8550b84c26ce2c2dfb09e9d6bb0e2d3cda8cc21899d4a6f6da05dc857\",\"dweb:/ipfs/QmXLyXbgjuFVfA2uKC5eBoJ7ZWbsWkp8BbrBpLQNEBhxq3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 163,
								"contract": "src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol:RandomnessProvider",
								"label": "COORDINATOR",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(VRFCoordinatorV2Interface)153"
							},
							{
								"astId": 165,
								"contract": "src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol:RandomnessProvider",
								"label": "subscriptionId",
								"offset": 20,
								"slot": "0",
								"type": "t_uint64"
							},
							{
								"astId": 167,
								"contract": "src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol:RandomnessProvider",
								"label": "keyHash",
								"offset": 0,
								"slot": "1",
								"type": "t_bytes32"
							},
							{
								"astId": 170,
								"contract": "src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol:RandomnessProvider",
								"label": "callbackGasLimit",
								"offset": 0,
								"slot": "2",
								"type": "t_uint32"
							},
							{
								"astId": 173,
								"contract": "src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol:RandomnessProvider",
								"label": "requestConfirmations",
								"offset": 4,
								"slot": "2",
								"type": "t_uint16"
							},
							{
								"astId": 177,
								"contract": "src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol:RandomnessProvider",
								"label": "requestToCaller",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint256,t_address)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(VRFCoordinatorV2Interface)153": {
								"encoding": "inplace",
								"label": "contract VRFCoordinatorV2Interface",
								"numberOfBytes": "20"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_uint16": {
								"encoding": "inplace",
								"label": "uint16",
								"numberOfBytes": "2"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint32": {
								"encoding": "inplace",
								"label": "uint32",
								"numberOfBytes": "4"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Wrapper around Chainlink VRF to provide secure randomness to other modules/contracts.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
				"ast": {
					"absolutePath": "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol",
					"exportedSymbols": {
						"VRFConsumerBaseV2": [
							57
						]
					},
					"id": 58,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "VRFConsumerBaseV2",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "57:5275:0",
								"text": "****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."
							},
							"fullyImplemented": false,
							"id": 57,
							"linearizedBaseContracts": [
								57
							],
							"name": "VRFConsumerBaseV2",
							"nameLocation": "5351:17:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "1cf993f4",
									"id": 8,
									"name": "OnlyCoordinatorCanFulfill",
									"nameLocation": "5379:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"mutability": "mutable",
												"name": "have",
												"nameLocation": "5413:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 8,
												"src": "5405:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5405:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 6,
												"mutability": "mutable",
												"name": "want",
												"nameLocation": "5427:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 8,
												"src": "5419:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 5,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5419:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5404:28:0"
									},
									"src": "5373:60:0"
								},
								{
									"constant": false,
									"id": 10,
									"mutability": "immutable",
									"name": "vrfCoordinator",
									"nameLocation": "5462:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 57,
									"src": "5436:40:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "5436:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 20,
										"nodeType": "Block",
										"src": "5593:43:0",
										"statements": [
											{
												"expression": {
													"id": 18,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 16,
														"name": "vrfCoordinator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "5599:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 17,
														"name": "_vrfCoordinator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "5616:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5599:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 19,
												"nodeType": "ExpressionStatement",
												"src": "5599:32:0"
											}
										]
									},
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "5481:72:0",
										"text": " @param _vrfCoordinator address of VRFCoordinator contract"
									},
									"id": 21,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "_vrfCoordinator",
												"nameLocation": "5576:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "5568:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 12,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5568:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5567:25:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5593:0:0"
									},
									"scope": 57,
									"src": "5556:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "5640:686:0",
										"text": " @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"
									},
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fulfillRandomWords",
									"nameLocation": "6338:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "6365:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "6357:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6357:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "randomWords",
												"nameLocation": "6393:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "6376:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 25,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6376:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 26,
													"nodeType": "ArrayTypeName",
													"src": "6376:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6356:49:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6422:0:0"
									},
									"scope": 57,
									"src": "6329:94:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 55,
										"nodeType": "Block",
										"src": "6707:167:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 38,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "6717:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 39,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6721:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "6717:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 40,
														"name": "vrfCoordinator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "6731:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6717:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 49,
												"nodeType": "IfStatement",
												"src": "6713:109:0",
												"trueBody": {
													"id": 48,
													"nodeType": "Block",
													"src": "6747:75:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"id": 43,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "6788:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 44,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6792:6:0",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "6788:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 45,
																		"name": "vrfCoordinator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 10,
																		"src": "6800:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 42,
																	"name": "OnlyCoordinatorCanFulfill",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 8,
																	"src": "6762:25:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$",
																		"typeString": "function (address,address) pure returns (error)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6762:53:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 47,
															"nodeType": "RevertStatement",
															"src": "6755:60:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 51,
															"name": "requestId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "6846:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 52,
															"name": "randomWords",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 35,
															"src": "6857:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														],
														"id": 50,
														"name": "fulfillRandomWords",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "6827:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (uint256,uint256[] memory)"
														}
													},
													"id": 53,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6827:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 54,
												"nodeType": "ExpressionStatement",
												"src": "6827:42:0"
											}
										]
									},
									"functionSelector": "1fe543e3",
									"id": 56,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "rawFulfillRandomWords",
									"nameLocation": "6627:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "6657:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "6649:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6649:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "randomWords",
												"nameLocation": "6685:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "6668:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 33,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6668:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 34,
													"nodeType": "ArrayTypeName",
													"src": "6668:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6648:49:0"
									},
									"returnParameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6707:0:0"
									},
									"scope": 57,
									"src": "6618:256:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 58,
							"src": "5333:1543:0",
							"usedErrors": [
								8
							],
							"usedEvents": []
						}
					],
					"src": "32:6845:0"
				},
				"id": 0
			},
			"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
				"ast": {
					"absolutePath": "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
					"exportedSymbols": {
						"VRFCoordinatorV2Interface": [
							153
						]
					},
					"id": 154,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 59,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "VRFCoordinatorV2Interface",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 153,
							"linearizedBaseContracts": [
								153
							],
							"name": "VRFCoordinatorV2Interface",
							"nameLocation": "67:25:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 60,
										"nodeType": "StructuredDocumentation",
										"src": "97:267:1",
										"text": " @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"
									},
									"functionSelector": "00012291",
									"id": 70,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRequestConfig",
									"nameLocation": "376:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "392:2:1"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "418:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 62,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "418:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "426:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 64,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "426:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "434:16:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 66,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "434:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 67,
													"nodeType": "ArrayTypeName",
													"src": "434:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "417:34:1"
									},
									"scope": 153,
									"src": "367:85:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "456:1511:1",
										"text": " @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."
									},
									"functionSelector": "5d3b1d30",
									"id": 86,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requestRandomWords",
									"nameLocation": "1979:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "keyHash",
												"nameLocation": "2011:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "2003:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 72,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2003:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "2031:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "2024:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 74,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "2024:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "minimumRequestConfirmations",
												"nameLocation": "2049:27:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "2042:34:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 76,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "2042:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "callbackGasLimit",
												"nameLocation": "2089:16:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "2082:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 78,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2082:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "numWords",
												"nameLocation": "2118:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "2111:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 80,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2111:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1997:133:1"
									},
									"returnParameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "2157:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "2149:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:19:1"
									},
									"scope": 153,
									"src": "1970:198:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 87,
										"nodeType": "StructuredDocumentation",
										"src": "2172:384:1",
										"text": " @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"
									},
									"functionSelector": "a21a23e4",
									"id": 92,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createSubscription",
									"nameLocation": "2568:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2586:2:1"
									},
									"returnParameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "2614:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "2607:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 89,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "2607:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2606:14:1"
									},
									"scope": 153,
									"src": "2559:62:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "2625:381:1",
										"text": " @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."
									},
									"functionSelector": "a47c7696",
									"id": 107,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSubscription",
									"nameLocation": "3018:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "3046:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 107,
												"src": "3039:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 94,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3039:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3033:22:1"
									},
									"returnParameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 98,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "3086:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 107,
												"src": "3079:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 97,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3079:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "reqCount",
												"nameLocation": "3102:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 107,
												"src": "3095:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 99,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3095:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3120:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 107,
												"src": "3112:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3112:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "consumers",
												"nameLocation": "3144:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 107,
												"src": "3127:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 103,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "3127:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 104,
													"nodeType": "ArrayTypeName",
													"src": "3127:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3078:76:1"
									},
									"scope": 153,
									"src": "3009:146:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "3159:164:1",
										"text": " @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"
									},
									"functionSelector": "04c357cb",
									"id": 115,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requestSubscriptionOwnerTransfer",
									"nameLocation": "3335:32:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "3375:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "3368:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 109,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3368:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3390:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "3382:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 111,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3382:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3367:32:1"
									},
									"returnParameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3408:0:1"
									},
									"scope": 153,
									"src": "3326:83:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "3413:212:1",
										"text": " @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."
									},
									"functionSelector": "82359740",
									"id": 121,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "acceptSubscriptionOwnerTransfer",
									"nameLocation": "3637:31:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "3676:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 121,
												"src": "3669:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 117,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3669:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3668:14:1"
									},
									"returnParameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3691:0:1"
									},
									"scope": 153,
									"src": "3628:64:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 122,
										"nodeType": "StructuredDocumentation",
										"src": "3696:170:1",
										"text": " @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"
									},
									"functionSelector": "7341c10c",
									"id": 129,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addConsumer",
									"nameLocation": "3878:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "3897:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 129,
												"src": "3890:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 123,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3890:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "consumer",
												"nameLocation": "3912:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 129,
												"src": "3904:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3889:32:1"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3930:0:1"
									},
									"scope": 153,
									"src": "3869:62:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 130,
										"nodeType": "StructuredDocumentation",
										"src": "3935:172:1",
										"text": " @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"
									},
									"functionSelector": "9f87fad7",
									"id": 137,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeConsumer",
									"nameLocation": "4119:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "4141:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "4134:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 131,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "4134:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "consumer",
												"nameLocation": "4156:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "4148:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4148:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4133:32:1"
									},
									"returnParameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4174:0:1"
									},
									"scope": 153,
									"src": "4110:65:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 138,
										"nodeType": "StructuredDocumentation",
										"src": "4179:140:1",
										"text": " @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"
									},
									"functionSelector": "d7ae1d30",
									"id": 145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "cancelSubscription",
									"nameLocation": "4331:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "4357:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "4350:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 139,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "4350:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4372:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "4364:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4364:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4349:26:1"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4384:0:1"
									},
									"scope": 153,
									"src": "4322:63:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "e82ad7d4",
									"id": 152,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "pendingRequestExists",
									"nameLocation": "4690:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "4718:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 152,
												"src": "4711:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 146,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "4711:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4710:14:1"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 152,
												"src": "4748:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 149,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4748:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4747:6:1"
									},
									"scope": 153,
									"src": "4681:73:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 154,
							"src": "57:4699:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:4725:1"
				},
				"id": 1
			},
			"src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol": {
				"ast": {
					"absolutePath": "src/Contract Architecture/P2P & Social Transfers/RandomnessProvider.sol",
					"exportedSymbols": {
						"RandomnessProvider": [
							301
						],
						"VRFConsumerBaseV2": [
							57
						],
						"VRFCoordinatorV2Interface": [
							153
						]
					},
					"id": 302,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 155,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:2"
						},
						{
							"absolutePath": "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
							"file": "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
							"id": 156,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 302,
							"sourceUnit": 154,
							"src": "58:80:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol",
							"file": "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol",
							"id": 157,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 302,
							"sourceUnit": 58,
							"src": "139:61:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 159,
										"name": "VRFConsumerBaseV2",
										"nameLocations": [
											"367:17:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 57,
										"src": "367:17:2"
									},
									"id": 160,
									"nodeType": "InheritanceSpecifier",
									"src": "367:17:2"
								}
							],
							"canonicalName": "RandomnessProvider",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 158,
								"nodeType": "StructuredDocumentation",
								"src": "202:133:2",
								"text": " @title RandomnessProvider\n @notice Wrapper around Chainlink VRF to provide secure randomness to other modules/contracts."
							},
							"fullyImplemented": true,
							"id": 301,
							"linearizedBaseContracts": [
								301,
								57
							],
							"name": "RandomnessProvider",
							"nameLocation": "345:18:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 163,
									"mutability": "mutable",
									"name": "COORDINATOR",
									"nameLocation": "417:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 301,
									"src": "391:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
										"typeString": "contract VRFCoordinatorV2Interface"
									},
									"typeName": {
										"id": 162,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 161,
											"name": "VRFCoordinatorV2Interface",
											"nameLocations": [
												"391:25:2"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 153,
											"src": "391:25:2"
										},
										"referencedDeclaration": 153,
										"src": "391:25:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
											"typeString": "contract VRFCoordinatorV2Interface"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "09c1ba2e",
									"id": 165,
									"mutability": "mutable",
									"name": "subscriptionId",
									"nameLocation": "449:14:2",
									"nodeType": "VariableDeclaration",
									"scope": 301,
									"src": "435:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 164,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "435:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "61728f39",
									"id": 167,
									"mutability": "mutable",
									"name": "keyHash",
									"nameLocation": "484:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 301,
									"src": "469:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 166,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "469:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "24f74697",
									"id": 170,
									"mutability": "mutable",
									"name": "callbackGasLimit",
									"nameLocation": "511:16:2",
									"nodeType": "VariableDeclaration",
									"scope": 301,
									"src": "497:39:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 168,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "497:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "323030303030",
										"id": 169,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "530:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_200000_by_1",
											"typeString": "int_const 200000"
										},
										"value": "200000"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b0fb162f",
									"id": 173,
									"mutability": "mutable",
									"name": "requestConfirmations",
									"nameLocation": "556:20:2",
									"nodeType": "VariableDeclaration",
									"scope": 301,
									"src": "542:38:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint16",
										"typeString": "uint16"
									},
									"typeName": {
										"id": 171,
										"name": "uint16",
										"nodeType": "ElementaryTypeName",
										"src": "542:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint16",
											"typeString": "uint16"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 172,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "579:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ad1339ea",
									"id": 177,
									"mutability": "mutable",
									"name": "requestToCaller",
									"nameLocation": "622:15:2",
									"nodeType": "VariableDeclaration",
									"scope": 301,
									"src": "587:50:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 176,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 174,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "595:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "587:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 175,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "606:7:2",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "28f521cf7abd0044cba5bb040c5217ff69a4e5865f5262905018698e68fe7d00",
									"id": 183,
									"name": "RandomnessRequested",
									"nameLocation": "650:19:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"indexed": true,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "686:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "670:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"indexed": true,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "713:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "697:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "697:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:51:2"
									},
									"src": "644:77:2"
								},
								{
									"anonymous": false,
									"eventSelector": "09a25a7192f51d336dcb9827403360b0a21163b04b38de4178e800d96f6f0fdc",
									"id": 192,
									"name": "RandomnessFulfilled",
									"nameLocation": "732:19:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"indexed": true,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "768:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "752:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "752:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"indexed": false,
												"mutability": "mutable",
												"name": "randomWords",
												"nameLocation": "789:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "779:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 186,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "779:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 187,
													"nodeType": "ArrayTypeName",
													"src": "779:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"indexed": true,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "818:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "802:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "802:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "751:74:2"
									},
									"src": "726:100:2"
								},
								{
									"body": {
										"id": 218,
										"nodeType": "Block",
										"src": "956:142:2",
										"statements": [
											{
												"expression": {
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 204,
														"name": "COORDINATOR",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "966:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
															"typeString": "contract VRFCoordinatorV2Interface"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 206,
																"name": "vrfCoordinator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 194,
																"src": "1006:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 205,
															"name": "VRFCoordinatorV2Interface",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "980:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_VRFCoordinatorV2Interface_$153_$",
																"typeString": "type(contract VRFCoordinatorV2Interface)"
															}
														},
														"id": 207,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "980:41:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
															"typeString": "contract VRFCoordinatorV2Interface"
														}
													},
													"src": "966:55:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
														"typeString": "contract VRFCoordinatorV2Interface"
													}
												},
												"id": 209,
												"nodeType": "ExpressionStatement",
												"src": "966:55:2"
											},
											{
												"expression": {
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 210,
														"name": "keyHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "1031:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 211,
														"name": "_keyHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 196,
														"src": "1041:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1031:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 213,
												"nodeType": "ExpressionStatement",
												"src": "1031:18:2"
											},
											{
												"expression": {
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 214,
														"name": "subscriptionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "1059:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 215,
														"name": "_subscriptionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 198,
														"src": "1076:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "1059:32:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 217,
												"nodeType": "ExpressionStatement",
												"src": "1059:32:2"
											}
										]
									},
									"id": 219,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 201,
													"name": "vrfCoordinator",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 194,
													"src": "936:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 202,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 200,
												"name": "VRFConsumerBaseV2",
												"nameLocations": [
													"918:17:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 57,
												"src": "918:17:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "918:33:2"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "vrfCoordinator",
												"nameLocation": "852:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "844:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "_keyHash",
												"nameLocation": "876:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "868:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 195,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "_subscriptionId",
												"nameLocation": "893:15:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "886:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 197,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "886:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:66:2"
									},
									"returnParameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "956:0:2"
									},
									"scope": 301,
									"src": "832:266:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 250,
										"nodeType": "Block",
										"src": "1185:311:2",
										"statements": [
											{
												"expression": {
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 226,
														"name": "requestId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 224,
														"src": "1195:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 229,
																"name": "keyHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 167,
																"src": "1251:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 230,
																"name": "subscriptionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 165,
																"src": "1272:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															{
																"id": 231,
																"name": "requestConfirmations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 173,
																"src": "1300:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																}
															},
															{
																"id": 232,
																"name": "callbackGasLimit",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 170,
																"src": "1334:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															{
																"id": 233,
																"name": "numWords",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 221,
																"src": "1364:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																},
																{
																	"typeIdentifier": "t_uint16",
																	"typeString": "uint16"
																},
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																},
																{
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															],
															"expression": {
																"id": 227,
																"name": "COORDINATOR",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 163,
																"src": "1207:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$153",
																	"typeString": "contract VRFCoordinatorV2Interface"
																}
															},
															"id": 228,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1219:18:2",
															"memberName": "requestRandomWords",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 86,
															"src": "1207:30:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$",
																"typeString": "function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"
															}
														},
														"id": 234,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1207:175:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1195:187:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 236,
												"nodeType": "ExpressionStatement",
												"src": "1195:187:2"
											},
											{
												"expression": {
													"id": 242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 237,
															"name": "requestToCaller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "1393:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 239,
														"indexExpression": {
															"id": 238,
															"name": "requestId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "1409:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1393:26:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 240,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1422:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 241,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1426:6:2",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1422:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1393:39:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 243,
												"nodeType": "ExpressionStatement",
												"src": "1393:39:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 245,
															"name": "requestId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "1467:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 246,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1478:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1482:6:2",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1478:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 244,
														"name": "RandomnessRequested",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 183,
														"src": "1447:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1447:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 249,
												"nodeType": "EmitStatement",
												"src": "1442:47:2"
											}
										]
									},
									"functionSelector": "811ee32a",
									"id": 251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "requestRandomness",
									"nameLocation": "1113:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "numWords",
												"nameLocation": "1138:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "1131:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 220,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "1131:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1130:17:2"
									},
									"returnParameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "1174:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "1166:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1166:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1165:19:2"
									},
									"scope": 301,
									"src": "1104:392:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										30
									],
									"body": {
										"id": 299,
										"nodeType": "Block",
										"src": "1597:543:2",
										"statements": [
											{
												"assignments": [
													261
												],
												"declarations": [
													{
														"constant": false,
														"id": 261,
														"mutability": "mutable",
														"name": "caller",
														"nameLocation": "1615:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 299,
														"src": "1607:14:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 260,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1607:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 265,
												"initialValue": {
													"baseExpression": {
														"id": 262,
														"name": "requestToCaller",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 177,
														"src": "1624:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 264,
													"indexExpression": {
														"id": 263,
														"name": "requestId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 253,
														"src": "1640:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1624:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1607:43:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 267,
																"name": "caller",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 261,
																"src": "1668:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1686:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1678:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 268,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1678:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1678:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1668:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52616e646f6d6e65737350726f76696465723a20696e76616c696420726571756573744964",
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1690:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c51db666deb4c17cd69b78aced9e967eebfc59b18fd5ccae7b039615f9ddebfe",
																"typeString": "literal_string \"RandomnessProvider: invalid requestId\""
															},
															"value": "RandomnessProvider: invalid requestId"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c51db666deb4c17cd69b78aced9e967eebfc59b18fd5ccae7b039615f9ddebfe",
																"typeString": "literal_string \"RandomnessProvider: invalid requestId\""
															}
														],
														"id": 266,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1660:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1660:70:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 275,
												"nodeType": "ExpressionStatement",
												"src": "1660:70:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 277,
															"name": "requestId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 253,
															"src": "1766:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 278,
															"name": "randomWords",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "1777:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														},
														{
															"id": 279,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1790:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 276,
														"name": "RandomnessFulfilled",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 192,
														"src": "1746:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_address_$returns$__$",
															"typeString": "function (uint256,uint256[] memory,address)"
														}
													},
													"id": 280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1746:51:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 281,
												"nodeType": "EmitStatement",
												"src": "1741:56:2"
											},
											{
												"assignments": [
													283,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 283,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1934:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 299,
														"src": "1929:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 282,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1929:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 293,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "7265636569766552616e646f6d6e6573732875696e743235362c75696e743235365b5d29",
																	"id": 288,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1995:38:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_37f9c70dc9ba2bd58e0f9e0f1125d925606660167f0b6afb762cc449cad6e5a7",
																		"typeString": "literal_string \"receiveRandomness(uint256,uint256[])\""
																	},
																	"value": "receiveRandomness(uint256,uint256[])"
																},
																{
																	"id": 289,
																	"name": "requestId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 253,
																	"src": "2035:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 290,
																	"name": "randomWords",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 256,
																	"src": "2046:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_37f9c70dc9ba2bd58e0f9e0f1125d925606660167f0b6afb762cc449cad6e5a7",
																		"typeString": "literal_string \"receiveRandomness(uint256,uint256[])\""
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																],
																"expression": {
																	"id": 286,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1971:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 287,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1975:19:2",
																"memberName": "encodeWithSignature",
																"nodeType": "MemberAccess",
																"src": "1971:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (string memory) pure returns (bytes memory)"
																}
															},
															"id": 291,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1971:87:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 284,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1946:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 285,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1953:4:2",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1946:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1946:122:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1928:140:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 295,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "2086:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52616e646f6d6e65737350726f76696465723a2063616c6c6261636b206661696c6564",
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2095:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_84c43f595ecd1d14d3e3570cc8bc148bf4a0a0f604c7e3fef0be2ca97568f2f5",
																"typeString": "literal_string \"RandomnessProvider: callback failed\""
															},
															"value": "RandomnessProvider: callback failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_84c43f595ecd1d14d3e3570cc8bc148bf4a0a0f604c7e3fef0be2ca97568f2f5",
																"typeString": "literal_string \"RandomnessProvider: callback failed\""
															}
														],
														"id": 294,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2078:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2078:55:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "2078:55:2"
											}
										]
									},
									"id": 300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "fulfillRandomWords",
									"nameLocation": "1511:18:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 258,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1588:8:2"
									},
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "1538:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "1530:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1530:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "randomWords",
												"nameLocation": "1566:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "1549:28:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 254,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1549:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 255,
													"nodeType": "ArrayTypeName",
													"src": "1549:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1529:49:2"
									},
									"returnParameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1597:0:2"
									},
									"scope": 301,
									"src": "1502:638:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 302,
							"src": "336:1806:2",
							"usedErrors": [
								8
							],
							"usedEvents": [
								183,
								192
							]
						}
					],
					"src": "32:2111:2"
				},
				"id": 2
			}
		}
	}
}