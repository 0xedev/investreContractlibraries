{
	"id": "5ae7d05f0b6bf4d541df009b1a35cf19",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/**\n * @title BatchSender\n * @notice Gas-optimized batch distributions (ERC20 & native) from a UserVault.\n *\n * Design:\n *  - For ERC20, pulls the total amount once from the vault (msg.sender) into this module,\n *    then distributes via transfer â€” cheaper than multiple transferFrom calls.\n *  - For ETH, require msg.value to equal the total to distribute and fan out via .call.\n *  - Supports recipients by address[] or Farcaster FID[] (resolved to vault/owner).\n *\n * Security:\n *  - No custodial state; any failure reverts the whole txn (no partial sends).\n *  - Intended to be called via UserVault.executeCall(...) so msg.sender == the vault.\n */\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IFarcasterRegistry {\n    function getVaultByFid(uint256 fid) external view returns (address);\n    function getOwnerByFid(uint256 fid) external view returns (address);\n}\n\ncontract BatchSender is Ownable {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant MODULE_ID = keccak256(\"BATCH_SENDER_V1\");\n\n    IFarcasterRegistry public registry;\n\n    event RegistryUpdated(address indexed registry);\n    event BatchTokenSent(address indexed vault, address indexed token, uint256 recipients, uint256 total);\n    event BatchEthSent(address indexed vault, uint256 recipients, uint256 total);\n\n    constructor(address _registry) Ownable(msg.sender) {\n        if (_registry != address(0)) {\n            registry = IFarcasterRegistry(_registry);\n            emit RegistryUpdated(_registry);\n        }\n    }\n\n    // ========= Admin =========\n\n    function setRegistry(address _registry) external onlyOwner {\n        registry = IFarcasterRegistry(_registry);\n        emit RegistryUpdated(_registry);\n    }\n\n    // ========= Helpers =========\n\n    function _resolveFid(uint256 fid) internal view returns (address to) {\n        IFarcasterRegistry r = registry;\n        require(address(r) != address(0), \"registry not set\");\n        to = r.getVaultByFid(fid);\n        if (to == address(0)) to = r.getOwnerByFid(fid);\n        require(to != address(0), \"fid not linked\");\n    }\n\n    // ========= ERC20: equal amounts =========\n\n    /// @notice Distribute `amountEach` of `token` to every `recipients[i]`.\n    function sendTokenEqual(address token, address[] calldata recipients, uint256 amountEach) external {\n        uint256 len = recipients.length;\n        require(len > 0, \"empty\");\n        uint256 total = amountEach * len;\n\n        // Pull total from the calling vault (msg.sender)\n        IERC20(token).safeTransferFrom(msg.sender, address(this), total);\n\n        for (uint256 i; i < len; ++i) {\n            address to = recipients[i];\n            require(to != address(0), \"to=0\");\n            IERC20(token).safeTransfer(to, amountEach);\n        }\n\n        emit BatchTokenSent(msg.sender, token, len, total);\n    }\n\n    /// @notice Distribute `amountEach` of `token` to FID-resolved addresses.\n    function sendTokenEqualByFid(address token, uint256[] calldata fids, uint256 amountEach) external {\n        uint256 len = fids.length;\n        require(len > 0, \"empty\");\n        uint256 total = amountEach * len;\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), total);\n\n        for (uint256 i; i < len; ++i) {\n            address to = _resolveFid(fids[i]);\n            IERC20(token).safeTransfer(to, amountEach);\n        }\n\n        emit BatchTokenSent(msg.sender, token, len, total);\n    }\n\n    // ========= ERC20: variable amounts =========\n\n    /// @notice Distribute variable `amounts[i]` of `token` to `recipients[i]`.\n    function sendToken(address token, address[] calldata recipients, uint256[] calldata amounts) external {\n        uint256 len = recipients.length;\n        require(len == amounts.length && len > 0, \"len mismatch\");\n\n        uint256 total;\n        for (uint256 i; i < len; ++i) total += amounts[i];\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), total);\n\n        for (uint256 i; i < len; ++i) {\n            address to = recipients[i];\n            require(to != address(0), \"to=0\");\n            IERC20(token).safeTransfer(to, amounts[i]);\n        }\n\n        emit BatchTokenSent(msg.sender, token, len, total);\n    }\n\n    /// @notice Distribute variable `amounts[i]` of `token` to FID-resolved addresses.\n    function sendTokenByFid(address token, uint256[] calldata fids, uint256[] calldata amounts) external {\n        uint256 len = fids.length;\n        require(len == amounts.length && len > 0, \"len mismatch\");\n\n        uint256 total;\n        for (uint256 i; i < len; ++i) total += amounts[i];\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), total);\n\n        for (uint256 i; i < len; ++i) {\n            IERC20(token).safeTransfer(_resolveFid(fids[i]), amounts[i]);\n        }\n\n        emit BatchTokenSent(msg.sender, token, len, total);\n    }\n\n    // ========= ETH: equal amounts =========\n\n    /// @notice Distribute equal `amountEach` ETH to `recipients`. Provide exact total in msg.value.\n    function sendEtHEqual(address[] calldata recipients, uint256 amountEach) external payable {\n        uint256 len = recipients.length;\n        require(len > 0, \"empty\");\n        uint256 total = amountEach * len;\n        require(msg.value == total, \"bad total\");\n\n        for (uint256 i; i < len; ++i) {\n            address to = recipients[i];\n            require(to != address(0), \"to=0\");\n            (bool ok, ) = payable(to).call{value: amountEach}(\"\");\n            require(ok, \"eth send failed\");\n        }\n\n        emit BatchEthSent(msg.sender, len, total);\n    }\n\n    /// @notice Distribute equal `amountEach` ETH to FID-resolved addresses.\n    function sendEtHEqualByFid(uint256[] calldata fids, uint256 amountEach) external payable {\n        uint256 len = fids.length;\n        require(len > 0, \"empty\");\n        uint256 total = amountEach * len;\n        require(msg.value == total, \"bad total\");\n\n        for (uint256 i; i < len; ++i) {\n            address to = _resolveFid(fids[i]);\n            (bool ok, ) = payable(to).call{value: amountEach}(\"\");\n            require(ok, \"eth send failed\");\n        }\n\n        emit BatchEthSent(msg.sender, len, total);\n    }\n\n    // ========= ETH: variable amounts =========\n\n    /// @notice Distribute variable `amounts[i]` ETH to `recipients[i]`. Provide exact total in msg.value.\n    function sendEtH(address[] calldata recipients, uint256[] calldata amounts) external payable {\n        uint256 len = recipients.length;\n        require(len == amounts.length && len > 0, \"len mismatch\");\n\n        uint256 total;\n        for (uint256 i; i < len; ++i) total += amounts[i];\n        require(msg.value == total, \"bad total\");\n\n        for (uint256 i; i < len; ++i) {\n            address to = recipients[i];\n            require(to != address(0), \"to=0\");\n            (bool ok, ) = payable(to).call{value: amounts[i]}(\"\");\n            require(ok, \"eth send failed\");\n        }\n\n        emit BatchEthSent(msg.sender, len, total);\n    }\n\n    /// @notice Distribute variable `amounts[i]` ETH to FID-resolved addresses.\n    function sendEtHByFid(uint256[] calldata fids, uint256[] calldata amounts) external payable {\n        uint256 len = fids.length;\n        require(len == amounts.length && len > 0, \"len mismatch\");\n\n        uint256 total;\n        for (uint256 i; i < len; ++i) total += amounts[i];\n        require(msg.value == total, \"bad total\");\n\n        for (uint256 i; i < len; ++i) {\n            address to = _resolveFid(fids[i]);\n            (bool ok, ) = payable(to).call{value: amounts[i]}(\"\");\n            require(ok, \"eth send failed\");\n        }\n\n        emit BatchEthSent(msg.sender, len, total);\n    }\n\n    // receive() to allow ETH refunds if ever needed in future extensions; unused otherwise.\n    receive() external payable {}\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"IERC1363": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"approveAndCall(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"approveAndCall(address,uint256,bytes)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `spender`.",
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferAndCall(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferAndCall(address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFromAndCall(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFromAndCall(address,address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							}
						},
						"title": "IERC1363",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"approveAndCall(address,uint256)": "3177029f",
							"approveAndCall(address,uint256,bytes)": "cae9ca51",
							"balanceOf(address)": "70a08231",
							"supportsInterface(bytes4)": "01ffc9a7",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAndCall(address,uint256)": "1296ee62",
							"transferAndCall(address,uint256,bytes)": "4000aea0",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferFromAndCall(address,address,uint256)": "d8fbe994",
							"transferFromAndCall(address,address,uint256,bytes)": "c1d34b89"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xFDC9AC7DCDE7D0D9E24A3DAE CREATE2 PUSH0 0xE1 0xE4 0xD0 MLOAD SHL AND DUP7 0x4F LOG1 PC CALLDATALOAD 0xCB 0xA9 BLOCKHASH 0x2B 0xD7 SLOAD PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "698:9376:5:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xFDC9AC7DCDE7D0D9E24A3DAE CREATE2 PUSH0 0xE1 0xE4 0xD0 MLOAD SHL AND DUP7 0x4F LOG1 PC CALLDATALOAD 0xCB 0xA9 BLOCKHASH 0x2B 0xD7 SLOAD PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "698:9376:5:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite",
								"transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)": "infinite",
								"trySafeTransfer(contract IERC20,address,uint256)": "infinite",
								"trySafeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ASSIGNIMMUTABLE",
									"source": 5,
									"value": "library_deploy_address"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "RETURN",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "REVERT",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
									".code": [
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol": {
				"BatchSender": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_registry",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "vault",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "recipients",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "total",
									"type": "uint256"
								}
							],
							"name": "BatchEthSent",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "vault",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "recipients",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "total",
									"type": "uint256"
								}
							],
							"name": "BatchTokenSent",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "registry",
									"type": "address"
								}
							],
							"name": "RegistryUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "MODULE_ID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "registry",
							"outputs": [
								{
									"internalType": "contract IFarcasterRegistry",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "recipients",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"name": "sendEtH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "fids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"name": "sendEtHByFid",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "recipients",
									"type": "address[]"
								},
								{
									"internalType": "uint256",
									"name": "amountEach",
									"type": "uint256"
								}
							],
							"name": "sendEtHEqual",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "fids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "amountEach",
									"type": "uint256"
								}
							],
							"name": "sendEtHEqualByFid",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "recipients",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"name": "sendToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "fids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"name": "sendTokenByFid",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "recipients",
									"type": "address[]"
								},
								{
									"internalType": "uint256",
									"name": "amountEach",
									"type": "uint256"
								}
							],
							"name": "sendTokenEqual",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "fids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "amountEach",
									"type": "uint256"
								}
							],
							"name": "sendTokenEqualByFid",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_registry",
									"type": "address"
								}
							],
							"name": "setRegistry",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n  0x80\n  jumpi(tag_7, callvalue)\n  0x1f\n  bytecodeSize\n  codesize\n  dup2\n  swap1\n  sub\n  swap2\n  dup3\n  add\n  not(0x1f)\n  and\n  dup4\n  add\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup4\n  gt\n  dup5\n  dup5\n  lt\n  or\n  tag_3\n  jumpi\n  dup1\n  dup5\n  swap3\n  0x20\n  swap5\n  0x40\n  mstore\n  dup4\n  codecopy\n  dup2\n  add\n  sub\n  slt\n  tag_7\n  jumpi\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n  dup2\n  and\n  swap1\n  dup2\n  swap1\n  sub\n  tag_7\n  jumpi\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1581:1591  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  iszero\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_9\n  jumpi\n  0x00\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n  dup1\n  sload\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1581:1591  msg.sender */\n  caller\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n  dup3\n  and\n  dup2\n  or\n  dup4\n  sstore\n  mload(0x40)\n  swap4\n  swap3\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1581:1591  msg.sender */\n  swap1\n  swap2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n  and\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n  dup1\n  log3\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1607:1630  _registry != address(0) */\n  dup1\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1603:1742  if (_registry != address(0)) {... */\n  tag_11\n  jumpi\ntag_12:\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n  pop\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1603:1742  if (_registry != address(0)) {... */\ntag_11:\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n  0x01\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  dup3\n  or\n  swap1\n  sstore\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1705:1731  RegistryUpdated(_registry) */\n  0xd6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd\n  0x00\n  dup1\n  log2\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1603:1742  if (_registry != address(0)) {... */\n  0x00\n  jump(tag_12)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_9:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mstore(0x00, shl(0xe0, 0x1e4fbdf7))\n  0x00\n  0x04\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n  mstore\n  0x24\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  revert\n    /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\ntag_7:\n  0x00\n  dup1\n  revert\ntag_3:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\nstop\n\nsub_0: assembly {\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_24, iszero(lt(calldatasize, 0x04)))\n    tag_25:\n      jumpi(tag_26, iszero(calldatasize))\n      0x00\n      dup1\n      revert\n    tag_26:\n      stop\n    tag_24:\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x096d945b\n      eq\n      tag_28\n      jumpi\n      dup1\n      0x0a333a0f\n      eq\n      tag_30\n      jumpi\n      dup1\n      0x4d2ee433\n      eq\n      tag_32\n      jumpi\n      dup1\n      0x54ec9841\n      eq\n      tag_34\n      jumpi\n      dup1\n      0x64914f9c\n      eq\n      tag_36\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_38\n      jumpi\n      dup1\n      0x7b103999\n      eq\n      tag_40\n      jumpi\n      dup1\n      0x8a63ba8e\n      eq\n      tag_42\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_44\n      jumpi\n      dup1\n      0xa91ee0dc\n      eq\n      tag_46\n      jumpi\n      dup1\n      0xc4142fb6\n      eq\n      tag_48\n      jumpi\n      dup1\n      0xda923324\n      eq\n      tag_50\n      jumpi\n      dup1\n      0xed2f21f5\n      eq\n      tag_52\n      jumpi\n      0xf2fde38b\n      sub\n      tag_25\n      jumpi\n      jumpi(tag_58, callvalue)\n      jumpi(tag_58, slt(add(not(0x03), calldatasize), 0x20))\n      tag_60\n      tag_3\n      jump\t// in\n    tag_60:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_61\n      tag_22\n      jump\t// in\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_62\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup4\n      or\n      dup3\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_62:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      shl(0xe0, 0x1e4fbdf7)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mstore\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mstore(0x04, 0x00)\n      0x24\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      revert\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_58:\n      0x00\n      dup1\n      revert\n    tag_52:\n      jumpi(tag_58, callvalue)\n      jumpi(tag_58, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      mload(0x40)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1223:1251  keccak256(\"BATCH_SENDER_V1\") */\n      0x55f7c72f49dbbb427cb91ebfe0101eab873e187659de9f9561496ae24a17ecdf\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup2\n      mstore\n      return\n    tag_50:\n      tag_68\n      calldatasize\n      tag_6\n      jump\t// in\n    tag_68:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7420:7441  len == amounts.length */\n      swap2\n      swap3\n      swap1\n      dup3\n      dup5\n      eq\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7420:7452  len == amounts.length && len > 0 */\n      dup1\n      tag_69\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_70:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7412:7469  require(len == amounts.length && len > 0, \"len mismatch\") */\n      tag_71\n      swap1\n      tag_16\n      jump\t// in\n    tag_71:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7508:7517  uint256 i */\n      swap3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7519:7526  i < len */\n    tag_72:\n      dup6\n      dup2\n      lt\n      tag_73\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7570:7579  msg.value */\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7562:7602  require(msg.value == total, \"bad total\") */\n      tag_75\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7570:7579  msg.value */\n      dup5\n      callvalue\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7570:7588  msg.value == total */\n      eq\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7562:7602  require(msg.value == total, \"bad total\") */\n      tag_9\n      jump\t// in\n    tag_75:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7618:7627  uint256 i */\n      dup5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7629:7636  i < len */\n    tag_76:\n      dup2\n      dup2\n      lt\n      tag_77\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      pop\n      dup5\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_28c27a02af64111baef5fbad78fcfe18c6340d893ad8e97a024e25e809dd76aa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x40\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7840:7850  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7827:7863  BatchEthSent(msg.sender, len, total) */\n      swap3\n      log2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7638:7641  ++i */\n    tag_77:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7771:7801  require(ok, \"eth send failed\") */\n      tag_79\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n      dup1\n      dup1\n      dup1\n      dup10\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7670:7690  _resolveFid(fids[i]) */\n      tag_80\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7682:7689  fids[i] */\n      tag_81\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup9\n      0x01\n      swap11\n      dup12\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7682:7689  fids[i] */\n      swap5\n      tag_10\n      jump\t// in\n    tag_81:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      calldataload\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7670:7690  _resolveFid(fids[i]) */\n      tag_21\n      jump\t// in\n    tag_80:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7742:7752  amounts[i] */\n      tag_82\n      dup8\n      dup11\n      dup13\n      tag_10\n      jump\t// in\n    tag_82:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      calldataload\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7718:7757  payable(to).call{value: amounts[i]}(\"\") */\n      swap1\n      gas\n      call\n      tag_83\n      tag_14\n      jump\t// in\n    tag_83:\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7771:7801  require(ok, \"eth send failed\") */\n      tag_15\n      jump\t// in\n    tag_79:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7618:7627  uint256 i */\n      dup6\n      swap1\n      jump(tag_76)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7528:7531  ++i */\n    tag_73:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7542:7552  amounts[i] */\n      swap4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7533:7552  total += amounts[i] */\n      tag_84\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7542:7552  amounts[i] */\n      swap2\n      tag_85\n      dup8\n      dup6\n      dup8\n      tag_10\n      jump\t// in\n    tag_85:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      calldataload\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7533:7552  total += amounts[i] */\n      swap1\n      tag_17\n      jump\t// in\n    tag_84:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7528:7531  ++i */\n      swap5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7508:7517  uint256 i */\n      jump(tag_72)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7420:7452  len == amounts.length && len > 0 */\n    tag_69:\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7445:7452  len > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7420:7452  len == amounts.length && len > 0 */\n      jump(tag_70)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_48:\n      tag_86\n      calldatasize\n      tag_6\n      jump\t// in\n    tag_86:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6699:6720  len == amounts.length */\n      swap2\n      swap3\n      swap1\n      dup3\n      dup5\n      eq\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6699:6731  len == amounts.length && len > 0 */\n      dup1\n      tag_87\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_88:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6691:6748  require(len == amounts.length && len > 0, \"len mismatch\") */\n      tag_89\n      swap1\n      tag_16\n      jump\t// in\n    tag_89:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6787:6796  uint256 i */\n      swap3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6798:6805  i < len */\n    tag_90:\n      dup6\n      dup2\n      lt\n      tag_91\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6849:6858  msg.value */\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6841:6881  require(msg.value == total, \"bad total\") */\n      tag_93\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6849:6858  msg.value */\n      dup5\n      callvalue\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6849:6867  msg.value == total */\n      eq\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6841:6881  require(msg.value == total, \"bad total\") */\n      tag_9\n      jump\t// in\n    tag_93:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6897:6906  uint256 i */\n      dup5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6908:6915  i < len */\n    tag_94:\n      dup2\n      dup2\n      lt\n      tag_95\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      pop\n      dup5\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_28c27a02af64111baef5fbad78fcfe18c6340d893ad8e97a024e25e809dd76aa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x40\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7159:7169  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7146:7182  BatchEthSent(msg.sender, len, total) */\n      swap3\n      log2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6917:6920  ++i */\n    tag_95:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7090:7120  require(ok, \"eth send failed\") */\n      tag_97\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n      dup1\n      dup1\n      dup1\n      dup10\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6949:6962  recipients[i] */\n      tag_98\n      tag_99\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup9\n      0x01\n      swap11\n      dup12\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6949:6962  recipients[i] */\n      swap5\n      tag_10\n      jump\t// in\n    tag_99:\n      tag_11\n      jump\t// in\n    tag_98:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6976:7009  require(to != address(0), \"to=0\") */\n      tag_100\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6984:7000  to != address(0) */\n      dup2\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6976:7009  require(to != address(0), \"to=0\") */\n      tag_12\n      jump\t// in\n    tag_100:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7061:7071  amounts[i] */\n      tag_82\n      dup8\n      dup11\n      dup13\n      tag_10\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":7090:7120  require(ok, \"eth send failed\") */\n    tag_97:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6897:6906  uint256 i */\n      dup6\n      swap1\n      jump(tag_94)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6807:6810  ++i */\n    tag_91:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6821:6831  amounts[i] */\n      swap4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6812:6831  total += amounts[i] */\n      tag_103\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6821:6831  amounts[i] */\n      swap2\n      tag_85\n      dup8\n      dup6\n      dup8\n      tag_10\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6812:6831  total += amounts[i] */\n    tag_103:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6807:6810  ++i */\n      swap5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6787:6796  uint256 i */\n      jump(tag_90)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6699:6731  len == amounts.length && len > 0 */\n    tag_87:\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6724:6731  len > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6699:6731  len == amounts.length && len > 0 */\n      jump(tag_88)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_46:\n      jumpi(tag_58, callvalue)\n      jumpi(tag_58, slt(add(not(0x03), calldatasize), 0x20))\n      tag_109\n      tag_3\n      jump\t// in\n    tag_109:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_110\n      tag_22\n      jump\t// in\n    tag_110:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      dup3\n      or\n      swap1\n      sstore\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1912:1938  RegistryUpdated(_registry) */\n      0xd6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd\n      0x00\n      dup1\n      log2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n    tag_44:\n      jumpi(tag_58, callvalue)\n      jumpi(tag_58, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x00)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_42:\n      tag_115\n      calldatasize\n      tag_2\n      jump\t// in\n    tag_115:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6007:6014  len > 0 */\n      swap1\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5999:6024  require(len > 0, \"empty\") */\n      tag_116\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6007:6014  len > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5999:6024  require(len > 0, \"empty\") */\n      tag_7\n      jump\t// in\n    tag_116:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6050:6066  amountEach * len */\n      tag_117\n      dup4\n      dup4\n      tag_8\n      jump\t// in\n    tag_117:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6084:6093  msg.value */\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6076:6116  require(msg.value == total, \"bad total\") */\n      tag_118\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6084:6093  msg.value */\n      dup4\n      callvalue\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6084:6102  msg.value == total */\n      eq\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6076:6116  require(msg.value == total, \"bad total\") */\n      tag_9\n      jump\t// in\n    tag_118:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6132:6141  uint256 i */\n      dup4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6143:6150  i < len */\n    tag_119:\n      dup2\n      dup2\n      lt\n      tag_120\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      pop\n      dup4\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_28c27a02af64111baef5fbad78fcfe18c6340d893ad8e97a024e25e809dd76aa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x40\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6354:6364  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6341:6377  BatchEthSent(msg.sender, len, total) */\n      swap3\n      log2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6152:6155  ++i */\n    tag_120:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6285:6315  require(ok, \"eth send failed\") */\n      tag_122\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n      dup1\n      dup1\n      dup1\n      dup8\n      dup10\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6184:6204  _resolveFid(fids[i]) */\n      tag_123\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6196:6203  fids[i] */\n      tag_81\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup10\n      0x01\n      swap12\n      dup13\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6196:6203  fids[i] */\n      swap5\n      tag_10\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6184:6204  _resolveFid(fids[i]) */\n    tag_123:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6232:6271  payable(to).call{value: amountEach}(\"\") */\n      gas\n      call\n      tag_83\n      tag_14\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6285:6315  require(ok, \"eth send failed\") */\n    tag_122:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":6132:6141  uint256 i */\n      dup5\n      swap1\n      jump(tag_119)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_40:\n      jumpi(tag_58, callvalue)\n      jumpi(tag_58, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x01)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_38:\n      jumpi(tag_58, callvalue)\n      jumpi(tag_58, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_134\n      tag_22\n      jump\t// in\n    tag_134:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup3\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup3\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n    tag_36:\n      jumpi(tag_58, callvalue)\n      tag_137\n      calldatasize\n      tag_4\n      jump\t// in\n    tag_137:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4662:4683  len == amounts.length */\n      swap4\n      swap2\n      swap3\n      swap1\n      dup5\n      dup5\n      eq\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4662:4694  len == amounts.length && len > 0 */\n      dup1\n      tag_138\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_139:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4654:4711  require(len == amounts.length && len > 0, \"len mismatch\") */\n      tag_140\n      swap1\n      tag_16\n      jump\t// in\n    tag_140:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4750:4759  uint256 i */\n      swap3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4761:4768  i < len */\n    tag_141:\n      dup6\n      dup2\n      lt\n      tag_142\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      and\n      swap5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4863:4868  total */\n      tag_144\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4856:4860  this */\n      dup5\n      address\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4836:4846  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup10\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4863:4868  total */\n      tag_18\n      jump\t// in\n    tag_144:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4896:4903  i < len */\n    tag_145:\n      dup6\n      dup2\n      lt\n      tag_146\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_fc97a1531a641d27a876c85181dfcd9b4fc1d5fb4c2d15db7179bc6f828cd515\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x40\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4836:4846  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5010:5055  BatchTokenSent(msg.sender, token, len, total) */\n      swap3\n      log3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4905:4908  ++i */\n    tag_146:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4963:4970  fids[i] */\n      dup1\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4973:4983  amounts[i] */\n      tag_148\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4951:4971  _resolveFid(fids[i]) */\n      tag_149\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4963:4970  fids[i] */\n      tag_81\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4963:4970  fids[i] */\n      swap5\n      dup11\n      dup10\n      tag_10\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4951:4971  _resolveFid(fids[i]) */\n    tag_149:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4973:4983  amounts[i] */\n      tag_151\n      dup4\n      dup7\n      dup9\n      tag_10\n      jump\t// in\n    tag_151:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      calldataload\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4973:4983  amounts[i] */\n      swap1\n      dup11\n      tag_19\n      jump\t// in\n    tag_148:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4885:4894  uint256 i */\n      jump(tag_145)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4770:4773  ++i */\n    tag_142:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4784:4794  amounts[i] */\n      swap4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4775:4794  total += amounts[i] */\n      tag_152\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4784:4794  amounts[i] */\n      swap2\n      tag_85\n      dup8\n      dup11\n      dup8\n      tag_10\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4775:4794  total += amounts[i] */\n    tag_152:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4770:4773  ++i */\n      swap5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4750:4759  uint256 i */\n      jump(tag_141)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4662:4694  len == amounts.length && len > 0 */\n    tag_138:\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4687:4694  len > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4662:4694  len == amounts.length && len > 0 */\n      jump(tag_139)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_34:\n      jumpi(tag_58, callvalue)\n      tag_156\n      calldatasize\n      tag_5\n      jump\t// in\n    tag_156:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3291:3298  len > 0 */\n      swap3\n      swap1\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3283:3308  require(len > 0, \"empty\") */\n      tag_157\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3291:3298  len > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3283:3308  require(len > 0, \"empty\") */\n      tag_7\n      jump\t// in\n    tag_157:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3334:3350  amountEach * len */\n      tag_158\n      dup4\n      dup6\n      tag_8\n      jump\t// in\n    tag_158:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      swap1\n      swap3\n      and\n      swap4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3419:3424  total */\n      tag_159\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3412:3416  this */\n      address\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3392:3402  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup9\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3419:3424  total */\n      tag_18\n      jump\t// in\n    tag_159:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3452:3459  i < len */\n    tag_160:\n      dup5\n      dup2\n      lt\n      tag_161\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      pop\n      pop\n      pop\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_fc97a1531a641d27a876c85181dfcd9b4fc1d5fb4c2d15db7179bc6f828cd515\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x40\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3392:3402  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3595:3640  BatchTokenSent(msg.sender, token, len, total) */\n      swap3\n      log3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3461:3464  ++i */\n    tag_161:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3505:3512  fids[i] */\n      dup1\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3558:3568  amountEach */\n      tag_163\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3505:3512  fids[i] */\n      dup4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3493:3513  _resolveFid(fids[i]) */\n      tag_164\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3505:3512  fids[i] */\n      tag_81\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3505:3512  fids[i] */\n      swap6\n      dup11\n      dup10\n      tag_10\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3493:3513  _resolveFid(fids[i]) */\n    tag_164:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3558:3568  amountEach */\n      dup10\n      tag_19\n      jump\t// in\n    tag_163:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3441:3450  uint256 i */\n      jump(tag_160)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_32:\n      jumpi(tag_58, callvalue)\n      tag_168\n      calldatasize\n      tag_5\n      jump\t// in\n    tag_168:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2602:2609  len > 0 */\n      swap3\n      swap1\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2594:2619  require(len > 0, \"empty\") */\n      tag_169\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2602:2609  len > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2594:2619  require(len > 0, \"empty\") */\n      tag_7\n      jump\t// in\n    tag_169:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2645:2661  amountEach * len */\n      tag_170\n      dup4\n      dup6\n      tag_8\n      jump\t// in\n    tag_170:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      swap1\n      swap3\n      and\n      swap4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2788:2793  total */\n      tag_171\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2781:2785  this */\n      address\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2761:2771  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup9\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2788:2793  total */\n      tag_18\n      jump\t// in\n    tag_171:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2821:2828  i < len */\n    tag_172:\n      dup5\n      dup2\n      lt\n      tag_173\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      pop\n      pop\n      pop\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_fc97a1531a641d27a876c85181dfcd9b4fc1d5fb4c2d15db7179bc6f828cd515\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x40\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2761:2771  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3004:3049  BatchTokenSent(msg.sender, token, len, total) */\n      swap3\n      log3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2830:2833  ++i */\n    tag_173:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2862:2875  recipients[i] */\n      dup1\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2967:2977  amountEach */\n      tag_175\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2862:2875  recipients[i] */\n      dup4\n      tag_176\n      tag_99\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2862:2875  recipients[i] */\n      swap6\n      dup11\n      dup10\n      tag_10\n      jump\t// in\n    tag_176:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2889:2922  require(to != address(0), \"to=0\") */\n      tag_164\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup6\n      dup1\n      0xa0\n      shl\n      sub\n      dup3\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2897:2913  to != address(0) */\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2889:2922  require(to != address(0), \"to=0\") */\n      tag_12\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2967:2977  amountEach */\n    tag_175:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2810:2819  uint256 i */\n      jump(tag_172)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_30:\n      jumpi(tag_58, callvalue)\n      tag_181\n      calldatasize\n      tag_4\n      jump\t// in\n    tag_181:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3946:3967  len == amounts.length */\n      swap4\n      swap2\n      swap3\n      swap1\n      dup5\n      dup5\n      eq\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3946:3978  len == amounts.length && len > 0 */\n      dup1\n      tag_182\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_183:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3938:3995  require(len == amounts.length && len > 0, \"len mismatch\") */\n      tag_184\n      swap1\n      tag_16\n      jump\t// in\n    tag_184:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4034:4043  uint256 i */\n      swap3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4045:4052  i < len */\n    tag_185:\n      dup6\n      dup2\n      lt\n      tag_186\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      and\n      swap5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4147:4152  total */\n      tag_188\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4140:4144  this */\n      dup5\n      address\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4120:4130  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup10\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4147:4152  total */\n      tag_18\n      jump\t// in\n    tag_188:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4180:4187  i < len */\n    tag_189:\n      dup6\n      dup2\n      lt\n      tag_190\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_fc97a1531a641d27a876c85181dfcd9b4fc1d5fb4c2d15db7179bc6f828cd515\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x40\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4120:4130  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4363:4408  BatchTokenSent(msg.sender, token, len, total) */\n      swap3\n      log3\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4189:4192  ++i */\n    tag_190:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4221:4234  recipients[i] */\n      dup1\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4326:4336  amounts[i] */\n      tag_192\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4221:4234  recipients[i] */\n      tag_193\n      tag_99\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4221:4234  recipients[i] */\n      swap5\n      dup11\n      dup10\n      tag_10\n      jump\t// in\n    tag_193:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4248:4281  require(to != address(0), \"to=0\") */\n      tag_149\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup5\n      dup1\n      0xa0\n      shl\n      sub\n      dup3\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4256:4272  to != address(0) */\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4248:4281  require(to != address(0), \"to=0\") */\n      tag_12\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4326:4336  amounts[i] */\n    tag_192:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4169:4178  uint256 i */\n      jump(tag_189)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4054:4057  ++i */\n    tag_186:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4068:4078  amounts[i] */\n      swap4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4059:4078  total += amounts[i] */\n      tag_197\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x01\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4068:4078  amounts[i] */\n      swap2\n      tag_85\n      dup8\n      dup11\n      dup8\n      tag_10\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4059:4078  total += amounts[i] */\n    tag_197:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4054:4057  ++i */\n      swap5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":4034:4043  uint256 i */\n      jump(tag_185)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3946:3978  len == amounts.length && len > 0 */\n    tag_182:\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3971:3978  len > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":3946:3978  len == amounts.length && len > 0 */\n      jump(tag_183)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_28:\n      tag_199\n      calldatasize\n      tag_2\n      jump\t// in\n    tag_199:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5365:5372  len > 0 */\n      swap1\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5357:5382  require(len > 0, \"empty\") */\n      tag_200\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5365:5372  len > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5357:5382  require(len > 0, \"empty\") */\n      tag_7\n      jump\t// in\n    tag_200:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5408:5424  amountEach * len */\n      tag_201\n      dup4\n      dup4\n      tag_8\n      jump\t// in\n    tag_201:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5442:5451  msg.value */\n      swap2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5434:5474  require(msg.value == total, \"bad total\") */\n      tag_202\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5442:5451  msg.value */\n      dup4\n      callvalue\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5442:5460  msg.value == total */\n      eq\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5434:5474  require(msg.value == total, \"bad total\") */\n      tag_9\n      jump\t// in\n    tag_202:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5490:5499  uint256 i */\n      dup4\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5501:5508  i < len */\n    tag_203:\n      dup2\n      dup2\n      lt\n      tag_204\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      pop\n      dup4\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_28c27a02af64111baef5fbad78fcfe18c6340d893ad8e97a024e25e809dd76aa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x40\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5752:5762  msg.sender */\n      caller\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5739:5775  BatchEthSent(msg.sender, len, total) */\n      swap3\n      log2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      stop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5510:5513  ++i */\n    tag_204:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5683:5713  require(ok, \"eth send failed\") */\n      tag_206\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x00\n      dup1\n      dup1\n      dup1\n      dup8\n      dup10\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5542:5555  recipients[i] */\n      tag_207\n      tag_99\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup10\n      0x01\n      swap12\n      dup13\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5542:5555  recipients[i] */\n      swap5\n      tag_10\n      jump\t// in\n    tag_207:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5569:5602  require(to != address(0), \"to=0\") */\n      tag_209\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5577:5593  to != address(0) */\n      dup2\n      iszero\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5569:5602  require(to != address(0), \"to=0\") */\n      tag_12\n      jump\t// in\n    tag_209:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5630:5669  payable(to).call{value: amountEach}(\"\") */\n      gas\n      call\n      tag_83\n      tag_14\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5683:5713  require(ok, \"eth send failed\") */\n    tag_206:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":5490:5499  uint256 i */\n      dup5\n      swap1\n      jump(tag_203)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_1:\n      swap2\n      dup2\n      0x1f\n      dup5\n      add\n      slt\n      iszero\n      tag_58\n      jumpi\n      dup3\n      calldataload\n      swap2\n      0xffffffffffffffff\n      dup4\n      gt\n      tag_58\n      jumpi\n      0x20\n      dup1\n      dup6\n      add\n      swap5\n      dup5\n      0x05\n      shl\n      add\n      add\n      gt\n      tag_58\n      jumpi\n      jump\t// out\n    tag_2:\n      0x40\n      not(0x03)\n      dup3\n      add\n      slt\n      tag_58\n      jumpi\n      calldataload(0x04)\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_58\n      jumpi\n      tag_221\n      swap2\n      0x04\n      add\n      tag_1\n      jump\t// in\n    tag_221:\n      swap1\n      swap2\n      calldataload(0x24)\n      swap1\n      jump\t// out\n    tag_3:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_58\n      jumpi\n      jump\t// out\n    tag_4:\n      swap1\n      0x60\n      not(0x03)\n      dup4\n      add\n      slt\n      tag_58\n      jumpi\n      calldataload(0x04)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_58\n      jumpi\n      swap2\n      calldataload(0x24)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_58\n      jumpi\n      dup2\n      tag_230\n      swap2\n      0x04\n      add\n      tag_1\n      jump\t// in\n    tag_230:\n      swap3\n      swap1\n      swap3\n      swap2\n      calldataload(0x44)\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_58\n      jumpi\n      tag_233\n      swap2\n      0x04\n      add\n      tag_1\n      jump\t// in\n    tag_233:\n      swap1\n      swap2\n      jump\t// out\n    tag_5:\n      swap1\n      0x60\n      not(0x03)\n      dup4\n      add\n      slt\n      tag_58\n      jumpi\n      calldataload(0x04)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_58\n      jumpi\n      swap2\n      calldataload(0x24)\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_58\n      jumpi\n      tag_240\n      swap2\n      0x04\n      add\n      tag_1\n      jump\t// in\n    tag_240:\n      swap1\n      swap2\n      calldataload(0x44)\n      swap1\n      jump\t// out\n    tag_6:\n      0x40\n      not(0x03)\n      dup3\n      add\n      slt\n      tag_58\n      jumpi\n      calldataload(0x04)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_58\n      jumpi\n      dup2\n      tag_245\n      swap2\n      0x04\n      add\n      tag_1\n      jump\t// in\n    tag_245:\n      swap3\n      swap1\n      swap3\n      swap2\n      calldataload(0x24)\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_58\n      jumpi\n      tag_233\n      swap2\n      0x04\n      add\n      tag_1\n      jump\t// in\n    tag_7:\n      iszero\n      tag_249\n      jumpi\n      jump\t// out\n    tag_249:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x05\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xd8, 0x656d707479)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_8:\n      dup2\n      dup2\n      mul\n      swap3\n      swap2\n      dup2\n      iszero\n      swap2\n      dup5\n      div\n      eq\n      or\n      iszero\n      tag_251\n      jumpi\n      jump\t// out\n    tag_251:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_9:\n      iszero\n      tag_253\n      jumpi\n      jump\t// out\n    tag_253:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x09\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xba, 0x189859081d1bdd185b)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_10:\n      swap2\n      swap1\n      dup2\n      lt\n      iszero\n      tag_255\n      jumpi\n      0x05\n      shl\n      add\n      swap1\n      jump\t// out\n    tag_255:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_11:\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_58\n      jumpi\n      swap1\n      jump\t// out\n    tag_12:\n      iszero\n      tag_259\n      jumpi\n      jump\t// out\n    tag_259:\n      0x64\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x04\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xe4, 0x0746f3d3)\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_13:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_261\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_261:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_14:\n      jumpi(tag_263, iszero(returndatasize))\n      returndatasize\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_261\n      jumpi\n      mload(0x40)\n      swap2\n      tag_267\n      0x1f\n      dup3\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup5\n      tag_13\n      jump\t// in\n    tag_267:\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump\t// out\n    tag_263:\n      0x60\n      swap1\n      jump\t// out\n    tag_15:\n      iszero\n      tag_269\n      jumpi\n      jump\t// out\n    tag_269:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0f\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x8a, 0x195d1a081cd95b990819985a5b1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_16:\n      iszero\n      tag_271\n      jumpi\n      jump\t// out\n    tag_271:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0c\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xa3, 0x0d8cadc40dad2e6dac2e8c6d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_17:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_251\n      jumpi\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1618:1806  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_18:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      swap3\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x24\n      dup3\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mstore\n      swap3\n      swap1\n      swap2\n      and\n      0x44\n      dup4\n      add\n      mstore\n      0x64\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      swap2\n      dup2\n      mstore\n      tag_275\n      swap2\n      tag_276\n      0x84\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      tag_13\n      jump\t// in\n    tag_276:\n      tag_23\n      jump\t// in\n    tag_275:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1618:1806  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_19:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x20\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      swap1\n      swap3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x24\n      dup4\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      swap2\n      dup2\n      mstore\n      tag_275\n      swap2\n      tag_276\n      0x64\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      tag_13\n      jump\t// in\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_20:\n      swap1\n      dup2\n      0x20\n      swap2\n      sub\n      slt\n      tag_58\n      jumpi\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_58\n      jumpi\n      swap1\n      jump\t// out\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1987:2312  function _resolveFid(uint256 fid) internal view returns (address to) {... */\n    tag_21:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      sload(0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1987:2312  function _resolveFid(uint256 fid) internal view returns (address to) {... */\n      swap1\n      swap2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2115:2139  address(r) != address(0) */\n      dup1\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      tag_283\n      jumpi\n      mload(0x40)\n      shl(0xe1, 0x45315d8b)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup5\n      swap1\n      mstore\n      swap3\n      0x20\n      dup5\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      0x24\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup2\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      dup6\n      gas\n      staticcall\n      swap4\n      dup5\n      iszero\n      tag_293\n      jumpi\n      0x00\n      swap5\n      tag_287\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1987:2312  function _resolveFid(uint256 fid) internal view returns (address to) {... */\n    tag_288:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup5\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2209:2225  to == address(0) */\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2205:2252  if (to == address(0)) to = r.getOwnerByFid(fid) */\n      tag_289\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1987:2312  function _resolveFid(uint256 fid) internal view returns (address to) {... */\n    tag_290:\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup3\n      and\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2270:2286  to != address(0) */\n      iszero\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      tag_291\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1987:2312  function _resolveFid(uint256 fid) internal view returns (address to) {... */\n      jump\t// out\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_291:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      0x04\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup3\n      add\n      mstore\n      0x0e\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      0x24\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup3\n      add\n      mstore\n      shl(0x92, 0x199a59081b9bdd081b1a5b9ad959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2205:2252  if (to == address(0)) to = r.getOwnerByFid(fid) */\n    tag_289:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x20\n      swap2\n      swap3\n      swap4\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      0x24\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mload(0x40)\n      dup1\n      swap5\n      dup2\n      swap4\n      shl(0xe0, 0x7b9cf4f3)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2232:2252  r.getOwnerByFid(fid) */\n      dup4\n      mstore\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      0x04\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2232:2252  r.getOwnerByFid(fid) */\n      dup4\n      add\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mstore\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2232:2252  r.getOwnerByFid(fid) */\n      gas\n      staticcall\n      swap1\n      dup2\n      iszero\n      tag_293\n      jumpi\n      0x00\n      swap2\n      tag_295\n      jumpi\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2205:2252  if (to == address(0)) to = r.getOwnerByFid(fid) */\n    tag_296:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2227:2252  to = r.getOwnerByFid(fid) */\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2205:2252  if (to == address(0)) to = r.getOwnerByFid(fid) */\n      swap1\n      0x00\n      dup1\n      jump(tag_290)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2232:2252  r.getOwnerByFid(fid) */\n    tag_295:\n      tag_297\n      swap2\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2232:2252  r.getOwnerByFid(fid) */\n      returndatasize\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2232:2252  r.getOwnerByFid(fid) */\n      gt\n      tag_298\n      jumpi\n    tag_299:\n      tag_300\n      dup2\n      dup4\n      tag_13\n      jump\t// in\n    tag_300:\n      dup2\n      add\n      swap1\n      tag_20\n      jump\t// in\n    tag_297:\n      0x00\n      jump(tag_296)\n    tag_298:\n      pop\n      returndatasize\n      jump(tag_299)\n    tag_293:\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n    tag_287:\n      tag_301\n      swap2\n      swap5\n      pop\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      returndatasize\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      0x20\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":2175:2195  r.getVaultByFid(fid) */\n      gt\n      tag_298\n      jumpi\n      tag_300\n      dup2\n      dup4\n      tag_13\n      jump\t// in\n    tag_301:\n      swap3\n      0x00\n      jump(tag_288)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n    tag_283:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x10\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x82, 0x1c9959da5cdd1c9e481b9bdd081cd95d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      sub\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_305\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n    tag_305:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      shl(0xe0, 0x118cdaa7)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_23:\n      swap1\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n      dup3\n      dup2\n      mload\n      swap2\n      add\n      dup3\n      dup6\n      gas\n      call\n      iszero\n      tag_293\n      jumpi\n      mload(0x00)\n      returndatasize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:8957  returnSize == 0 */\n      tag_309\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8986  address(token).code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8991  address(token).code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_311:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n      tag_312\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n    tag_312:\n      shl(0xe0, 0x5274afe7)\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      swap1\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      0x04\n        /* \"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":1116:8000  contract BatchSender is Ownable {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_309:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9009:9010  1 */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8994:9010  returnValue != 1 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n      jump(tag_311)\n    stop\n    data_28c27a02af64111baef5fbad78fcfe18c6340d893ad8e97a024e25e809dd76aa 4b0923ae89d0714ec69a1fa8beba63b80231bd63fe6a324ea5e059c9390df7e5\n    data_fc97a1531a641d27a876c85181dfcd9b4fc1d5fb4c2d15db7179bc6f828cd515 93eaa469388f609b8b0878fd3b9a6f4eb03976a48189e62f980563bc9d76c926\n\n    auxdata: 0xa2646970667358221220c11336b5a23ee4041fe2c89a70839709c63ce40be53a5f5572b193e5aa2a798c64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60803461010157601f610f6b38819003918201601f19168301916001600160401b038311848410176101055780849260209460405283398101031261010157516001600160a01b038116908190036101015733156100ee575f8054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3806100b2575b50610e51908161011a8239f35b600180546001600160a01b031916821790557fd6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd5f80a25f6100a5565b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604052600436101561001a575b3615610018575f80fd5b005b5f3560e01c8063096d945b1461074f5780630a333a0f1461068e5780634d2ee433146105f757806354ec98411461056c57806364914f9c146104aa578063715018a6146104535780637b1039991461042b5780638a63ba8e146103a15780638da5cb5b1461037a578063a91ee0dc14610314578063c4142fb61461024f578063da9233241461017b578063ed2f21f5146101415763f2fde38b0361000e573461013d57602036600319011261013d576100d1610848565b6100d9610d5d565b6001600160a01b0316801561012a575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b3461013d575f36600319011261013d5760206040517f55f7c72f49dbbb427cb91ebfe0101eab873e187659de9f9561496ae24a17ecdf8152f35b6101843661090d565b91929082841480610246575b61019990610b0b565b5f925f5b85811061022657506101b08434146109b6565b845f5b8181106101dc57508460405191825260208201525f80516020610ddc83398151915260403392a2005b61021e5f808080896102006101fa8860019a8b8060a01b03946109ee565b35610bf8565b1661020c878a8c6109ee565b35905af1610218610a8e565b50610acd565b0185906101b3565b9361023f6001916102388785876109ee565b3590610b46565b940161019d565b50831515610190565b6102583661090d565b9192908284148061030b575b61026d90610b0b565b5f925f5b8581106102f257506102848434146109b6565b845f5b8181106102b057508460405191825260208201525f80516020610ddc83398151915260403392a2005b6102ea5f808080896102d36102ce8860019a8b8060a01b03946109ee565b610a12565b166102df811515610a26565b61020c878a8c6109ee565b018590610287565b936103046001916102388785876109ee565b9401610271565b50831515610264565b3461013d57602036600319011261013d5761032d610848565b610335610d5d565b600180546001600160a01b0319166001600160a01b039290921691821790557fd6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd5f80a2005b3461013d575f36600319011261013d575f546040516001600160a01b039091168152602090f35b6103aa36610815565b90916103b783151561095b565b6103c1838361098f565b916103cd8334146109b6565b835f5b8181106103f957508360405191825260208201525f80516020610ddc83398151915260403392a2005b6104235f80808087896104186101fa8960019b8c8060a01b03946109ee565b165af1610218610a8e565b0184906103d0565b3461013d575f36600319011261013d576001546040516001600160a01b039091168152602090f35b3461013d575f36600319011261013d5761046b610d5d565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461013d576104b83661085e565b9391929084841480610563575b6104ce90610b0b565b5f925f5b85811061054a57506001600160a01b0316946104f084303389610b53565b5f5b85811061051d575050505060405191825260208201525f80516020610dfc83398151915260403392a3005b806105446105316101fa6001948a896109ee565b61053c8386886109ee565b35908a610b9e565b016104f2565b9361055c600191610238878a876109ee565b94016104d2565b508315156104c5565b3461013d5761057a366108c5565b92909161058883151561095b565b610592838561098f565b6001600160a01b03909216936105aa83303388610b53565b5f5b8481106105d65750505060405191825260208201525f80516020610dfc83398151915260403392a3005b806105f1836105eb6101fa6001958a896109ee565b89610b9e565b016105ac565b3461013d57610605366108c5565b92909161061383151561095b565b61061d838561098f565b6001600160a01b039092169361063583303388610b53565b5f5b8481106106615750505060405191825260208201525f80516020610dfc83398151915260403392a3005b80610688836106766102ce6001958a896109ee565b6105eb858060a01b0382161515610a26565b01610637565b3461013d5761069c3661085e565b9391929084841480610746575b6106b290610b0b565b5f925f5b85811061072d57506001600160a01b0316946106d484303389610b53565b5f5b858110610701575050505060405191825260208201525f80516020610dfc83398151915260403392a3005b806107276107156102ce6001948a896109ee565b610531848060a01b0382161515610a26565b016106d6565b9361073f600191610238878a876109ee565b94016106b6565b508315156106a9565b61075836610815565b909161076583151561095b565b61076f838361098f565b9161077b8334146109b6565b835f5b8181106107a757508360405191825260208201525f80516020610ddc83398151915260403392a2005b6107dc5f80808087896107c66102ce8960019b8c8060a01b03946109ee565b166107d2811515610a26565b5af1610218610a8e565b01849061077e565b9181601f8401121561013d5782359167ffffffffffffffff831161013d576020808501948460051b01011161013d57565b604060031982011261013d576004359067ffffffffffffffff821161013d57610840916004016107e4565b909160243590565b600435906001600160a01b038216820361013d57565b90606060031983011261013d576004356001600160a01b038116810361013d579160243567ffffffffffffffff811161013d578161089e916004016107e4565b929092916044359067ffffffffffffffff821161013d576108c1916004016107e4565b9091565b90606060031983011261013d576004356001600160a01b038116810361013d57916024359067ffffffffffffffff821161013d57610905916004016107e4565b909160443590565b604060031982011261013d5760043567ffffffffffffffff811161013d5781610938916004016107e4565b929092916024359067ffffffffffffffff821161013d576108c1916004016107e4565b1561096257565b60405162461bcd60e51b8152602060048201526005602482015264656d70747960d81b6044820152606490fd5b818102929181159184041417156109a257565b634e487b7160e01b5f52601160045260245ffd5b156109bd57565b60405162461bcd60e51b8152602060048201526009602482015268189859081d1bdd185b60ba1b6044820152606490fd5b91908110156109fe5760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b038116810361013d5790565b15610a2d57565b606460405162461bcd60e51b81526020600482015260046024820152630746f3d360e41b6044820152fd5b90601f8019910116810190811067ffffffffffffffff821117610a7a57604052565b634e487b7160e01b5f52604160045260245ffd5b3d15610ac8573d9067ffffffffffffffff8211610a7a5760405191610abd601f8201601f191660200184610a58565b82523d5f602084013e565b606090565b15610ad457565b60405162461bcd60e51b815260206004820152600f60248201526e195d1a081cd95b990819985a5b1959608a1b6044820152606490fd5b15610b1257565b60405162461bcd60e51b815260206004820152600c60248201526b0d8cadc40dad2e6dac2e8c6d60a31b6044820152606490fd5b919082018092116109a257565b6040516323b872dd60e01b60208201526001600160a01b039283166024820152929091166044830152606480830193909352918152610b9c91610b97608483610a58565b610d83565b565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152610b9c91610b97606483610a58565b9081602091031261013d57516001600160a01b038116810361013d5790565b6001549091906001600160a01b03168015610d25576040516345315d8b60e11b81526004810184905292602084602481855afa938415610cf9575f94610d04575b506001600160a01b03841615610c93575b50506001600160a01b03821615610c5d57565b60405162461bcd60e51b815260206004820152600e60248201526d199a59081b9bdd081b1a5b9ad95960921b6044820152606490fd5b602091929350602460405180948193637b9cf4f360e01b835260048301525afa908115610cf9575f91610cca575b50905f80610c4a565b610cec915060203d602011610cf2575b610ce48183610a58565b810190610bd9565b5f610cc1565b503d610cda565b6040513d5f823e3d90fd5b610d1e91945060203d602011610cf257610ce48183610a58565b925f610c39565b60405162461bcd60e51b815260206004820152601060248201526f1c9959da5cdd1c9e481b9bdd081cd95d60821b6044820152606490fd5b5f546001600160a01b03163303610d7057565b63118cdaa760e01b5f523360045260245ffd5b905f602091828151910182855af115610cf9575f513d610dd257506001600160a01b0381163b155b610db25750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415610dab56fe4b0923ae89d0714ec69a1fa8beba63b80231bd63fe6a324ea5e059c9390df7e593eaa469388f609b8b0878fd3b9a6f4eb03976a48189e62f980563bc9d76c926a2646970667358221220c11336b5a23ee4041fe2c89a70839709c63ce40be53a5f5572b193e5aa2a798c64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 CALLVALUE PUSH2 0x101 JUMPI PUSH1 0x1F PUSH2 0xF6B CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x105 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x101 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x101 JUMPI CALLER ISZERO PUSH2 0xEE JUMPI PUSH0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 DUP1 PUSH2 0xB2 JUMPI JUMPDEST POP PUSH2 0xE51 SWAP1 DUP2 PUSH2 0x11A DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR SWAP1 SSTORE PUSH32 0xD6CEDDF6D2A22F21C7C81675C518004EFF43BC5C8A6FC32A0B748E69D58671CD PUSH0 DUP1 LOG2 PUSH0 PUSH2 0xA5 JUMP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1A JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x18 JUMPI PUSH0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x96D945B EQ PUSH2 0x74F JUMPI DUP1 PUSH4 0xA333A0F EQ PUSH2 0x68E JUMPI DUP1 PUSH4 0x4D2EE433 EQ PUSH2 0x5F7 JUMPI DUP1 PUSH4 0x54EC9841 EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x64914F9C EQ PUSH2 0x4AA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x453 JUMPI DUP1 PUSH4 0x7B103999 EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0x8A63BA8E EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xA91EE0DC EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xC4142FB6 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xDA923324 EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0xED2F21F5 EQ PUSH2 0x141 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI CALLVALUE PUSH2 0x13D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH2 0xD1 PUSH2 0x848 JUMP JUMPDEST PUSH2 0xD9 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x12A JUMPI PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 STOP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x55F7C72F49DBBB427CB91EBFE0101EAB873E187659DE9F9561496AE24A17ECDF DUP2 MSTORE RETURN JUMPDEST PUSH2 0x184 CALLDATASIZE PUSH2 0x90D JUMP JUMPDEST SWAP2 SWAP3 SWAP1 DUP3 DUP5 EQ DUP1 PUSH2 0x246 JUMPI JUMPDEST PUSH2 0x199 SWAP1 PUSH2 0xB0B JUMP JUMPDEST PUSH0 SWAP3 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x226 JUMPI POP PUSH2 0x1B0 DUP5 CALLVALUE EQ PUSH2 0x9B6 JUMP JUMPDEST DUP5 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1DC JUMPI POP DUP5 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDDC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x21E PUSH0 DUP1 DUP1 DUP1 DUP10 PUSH2 0x200 PUSH2 0x1FA DUP9 PUSH1 0x1 SWAP11 DUP12 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x9EE JUMP JUMPDEST CALLDATALOAD PUSH2 0xBF8 JUMP JUMPDEST AND PUSH2 0x20C DUP8 DUP11 DUP13 PUSH2 0x9EE JUMP JUMPDEST CALLDATALOAD SWAP1 GAS CALL PUSH2 0x218 PUSH2 0xA8E JUMP JUMPDEST POP PUSH2 0xACD JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1B3 JUMP JUMPDEST SWAP4 PUSH2 0x23F PUSH1 0x1 SWAP2 PUSH2 0x238 DUP8 DUP6 DUP8 PUSH2 0x9EE JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0xB46 JUMP JUMPDEST SWAP5 ADD PUSH2 0x19D JUMP JUMPDEST POP DUP4 ISZERO ISZERO PUSH2 0x190 JUMP JUMPDEST PUSH2 0x258 CALLDATASIZE PUSH2 0x90D JUMP JUMPDEST SWAP2 SWAP3 SWAP1 DUP3 DUP5 EQ DUP1 PUSH2 0x30B JUMPI JUMPDEST PUSH2 0x26D SWAP1 PUSH2 0xB0B JUMP JUMPDEST PUSH0 SWAP3 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x2F2 JUMPI POP PUSH2 0x284 DUP5 CALLVALUE EQ PUSH2 0x9B6 JUMP JUMPDEST DUP5 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x2B0 JUMPI POP DUP5 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDDC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x2EA PUSH0 DUP1 DUP1 DUP1 DUP10 PUSH2 0x2D3 PUSH2 0x2CE DUP9 PUSH1 0x1 SWAP11 DUP12 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST AND PUSH2 0x2DF DUP2 ISZERO ISZERO PUSH2 0xA26 JUMP JUMPDEST PUSH2 0x20C DUP8 DUP11 DUP13 PUSH2 0x9EE JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x287 JUMP JUMPDEST SWAP4 PUSH2 0x304 PUSH1 0x1 SWAP2 PUSH2 0x238 DUP8 DUP6 DUP8 PUSH2 0x9EE JUMP JUMPDEST SWAP5 ADD PUSH2 0x271 JUMP JUMPDEST POP DUP4 ISZERO ISZERO PUSH2 0x264 JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH2 0x32D PUSH2 0x848 JUMP JUMPDEST PUSH2 0x335 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH32 0xD6CEDDF6D2A22F21C7C81675C518004EFF43BC5C8A6FC32A0B748E69D58671CD PUSH0 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH2 0x3AA CALLDATASIZE PUSH2 0x815 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x3B7 DUP4 ISZERO ISZERO PUSH2 0x95B JUMP JUMPDEST PUSH2 0x3C1 DUP4 DUP4 PUSH2 0x98F JUMP JUMPDEST SWAP2 PUSH2 0x3CD DUP4 CALLVALUE EQ PUSH2 0x9B6 JUMP JUMPDEST DUP4 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3F9 JUMPI POP DUP4 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDDC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x423 PUSH0 DUP1 DUP1 DUP1 DUP8 DUP10 PUSH2 0x418 PUSH2 0x1FA DUP10 PUSH1 0x1 SWAP12 DUP13 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x9EE JUMP JUMPDEST AND GAS CALL PUSH2 0x218 PUSH2 0xA8E JUMP JUMPDEST ADD DUP5 SWAP1 PUSH2 0x3D0 JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH2 0x46B PUSH2 0xD5D JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH2 0x4B8 CALLDATASIZE PUSH2 0x85E JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 DUP5 DUP5 EQ DUP1 PUSH2 0x563 JUMPI JUMPDEST PUSH2 0x4CE SWAP1 PUSH2 0xB0B JUMP JUMPDEST PUSH0 SWAP3 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x54A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 PUSH2 0x4F0 DUP5 ADDRESS CALLER DUP10 PUSH2 0xB53 JUMP JUMPDEST PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x51D JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG3 STOP JUMPDEST DUP1 PUSH2 0x544 PUSH2 0x531 PUSH2 0x1FA PUSH1 0x1 SWAP5 DUP11 DUP10 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x53C DUP4 DUP7 DUP9 PUSH2 0x9EE JUMP JUMPDEST CALLDATALOAD SWAP1 DUP11 PUSH2 0xB9E JUMP JUMPDEST ADD PUSH2 0x4F2 JUMP JUMPDEST SWAP4 PUSH2 0x55C PUSH1 0x1 SWAP2 PUSH2 0x238 DUP8 DUP11 DUP8 PUSH2 0x9EE JUMP JUMPDEST SWAP5 ADD PUSH2 0x4D2 JUMP JUMPDEST POP DUP4 ISZERO ISZERO PUSH2 0x4C5 JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH2 0x57A CALLDATASIZE PUSH2 0x8C5 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x588 DUP4 ISZERO ISZERO PUSH2 0x95B JUMP JUMPDEST PUSH2 0x592 DUP4 DUP6 PUSH2 0x98F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 PUSH2 0x5AA DUP4 ADDRESS CALLER DUP9 PUSH2 0xB53 JUMP JUMPDEST PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x5D6 JUMPI POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG3 STOP JUMPDEST DUP1 PUSH2 0x5F1 DUP4 PUSH2 0x5EB PUSH2 0x1FA PUSH1 0x1 SWAP6 DUP11 DUP10 PUSH2 0x9EE JUMP JUMPDEST DUP10 PUSH2 0xB9E JUMP JUMPDEST ADD PUSH2 0x5AC JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH2 0x605 CALLDATASIZE PUSH2 0x8C5 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x613 DUP4 ISZERO ISZERO PUSH2 0x95B JUMP JUMPDEST PUSH2 0x61D DUP4 DUP6 PUSH2 0x98F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 PUSH2 0x635 DUP4 ADDRESS CALLER DUP9 PUSH2 0xB53 JUMP JUMPDEST PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x661 JUMPI POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG3 STOP JUMPDEST DUP1 PUSH2 0x688 DUP4 PUSH2 0x676 PUSH2 0x2CE PUSH1 0x1 SWAP6 DUP11 DUP10 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x5EB DUP6 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO PUSH2 0xA26 JUMP JUMPDEST ADD PUSH2 0x637 JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH2 0x69C CALLDATASIZE PUSH2 0x85E JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 DUP5 DUP5 EQ DUP1 PUSH2 0x746 JUMPI JUMPDEST PUSH2 0x6B2 SWAP1 PUSH2 0xB0B JUMP JUMPDEST PUSH0 SWAP3 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x72D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 PUSH2 0x6D4 DUP5 ADDRESS CALLER DUP10 PUSH2 0xB53 JUMP JUMPDEST PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x701 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG3 STOP JUMPDEST DUP1 PUSH2 0x727 PUSH2 0x715 PUSH2 0x2CE PUSH1 0x1 SWAP5 DUP11 DUP10 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x531 DUP5 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO PUSH2 0xA26 JUMP JUMPDEST ADD PUSH2 0x6D6 JUMP JUMPDEST SWAP4 PUSH2 0x73F PUSH1 0x1 SWAP2 PUSH2 0x238 DUP8 DUP11 DUP8 PUSH2 0x9EE JUMP JUMPDEST SWAP5 ADD PUSH2 0x6B6 JUMP JUMPDEST POP DUP4 ISZERO ISZERO PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x758 CALLDATASIZE PUSH2 0x815 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x765 DUP4 ISZERO ISZERO PUSH2 0x95B JUMP JUMPDEST PUSH2 0x76F DUP4 DUP4 PUSH2 0x98F JUMP JUMPDEST SWAP2 PUSH2 0x77B DUP4 CALLVALUE EQ PUSH2 0x9B6 JUMP JUMPDEST DUP4 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x7A7 JUMPI POP DUP4 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDDC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x7DC PUSH0 DUP1 DUP1 DUP1 DUP8 DUP10 PUSH2 0x7C6 PUSH2 0x2CE DUP10 PUSH1 0x1 SWAP12 DUP13 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x9EE JUMP JUMPDEST AND PUSH2 0x7D2 DUP2 ISZERO ISZERO PUSH2 0xA26 JUMP JUMPDEST GAS CALL PUSH2 0x218 PUSH2 0xA8E JUMP JUMPDEST ADD DUP5 SWAP1 PUSH2 0x77E JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x13D JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x13D JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x13D JUMPI JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x13D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x13D JUMPI PUSH2 0x840 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x13D JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x13D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x13D JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13D JUMPI DUP2 PUSH2 0x89E SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x13D JUMPI PUSH2 0x8C1 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x13D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x13D JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x13D JUMPI PUSH2 0x905 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x13D JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13D JUMPI DUP2 PUSH2 0x938 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x13D JUMPI PUSH2 0x8C1 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST ISZERO PUSH2 0x962 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x656D707479 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x9A2 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ISZERO PUSH2 0x9BD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x189859081D1BDD185B PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x9FE JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x13D JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xA2D JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4 PUSH1 0x24 DUP3 ADD MSTORE PUSH4 0x746F3D3 PUSH1 0xE4 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA7A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xAC8 JUMPI RETURNDATASIZE SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xA7A JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0xABD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0xA58 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAD4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x195D1A081CD95B990819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xB12 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0xD8CADC40DAD2E6DAC2E8C6D PUSH1 0xA3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x9A2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0xB9C SWAP2 PUSH2 0xB97 PUSH1 0x84 DUP4 PUSH2 0xA58 JUMP JUMPDEST PUSH2 0xD83 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0xB9C SWAP2 PUSH2 0xB97 PUSH1 0x64 DUP4 PUSH2 0xA58 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x13D JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x13D JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xD25 JUMPI PUSH1 0x40 MLOAD PUSH4 0x45315D8B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP3 PUSH1 0x20 DUP5 PUSH1 0x24 DUP2 DUP6 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0xCF9 JUMPI PUSH0 SWAP5 PUSH2 0xD04 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xC93 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xC5D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x199A59081B9BDD081B1A5B9AD959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP3 SWAP4 POP PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x7B9CF4F3 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xCF9 JUMPI PUSH0 SWAP2 PUSH2 0xCCA JUMPI JUMPDEST POP SWAP1 PUSH0 DUP1 PUSH2 0xC4A JUMP JUMPDEST PUSH2 0xCEC SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xCF2 JUMPI JUMPDEST PUSH2 0xCE4 DUP2 DUP4 PUSH2 0xA58 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xBD9 JUMP JUMPDEST PUSH0 PUSH2 0xCC1 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0xD1E SWAP2 SWAP5 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xCF2 JUMPI PUSH2 0xCE4 DUP2 DUP4 PUSH2 0xA58 JUMP JUMPDEST SWAP3 PUSH0 PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x1C9959DA5CDD1C9E481B9BDD081CD95D PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xD70 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0xCF9 JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0xDD2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0xDB2 JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0xDAB JUMP INVALID 0x4B MULMOD 0x23 0xAE DUP10 0xD0 PUSH18 0x4EC69A1FA8BEBA63B80231BD63FE6A324EA5 0xE0 MSIZE 0xC9 CODECOPY 0xD 0xF7 0xE5 SWAP4 0xEA LOG4 PUSH10 0x388F609B8B0878FD3B9A PUSH16 0x4EB03976A48189E62F980563BC9D76C9 0x26 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC1 SGT CALLDATASIZE 0xB5 LOG2 RETURNDATACOPY 0xE4 DIV 0x1F 0xE2 0xC8 SWAP11 PUSH17 0x839709C63CE40BE53A5F5572B193E5AA2A PUSH26 0x8C64736F6C634300081A00330000000000000000000000000000 ",
							"sourceMap": "1116:6884:8:-:0;;;;;;;;;;;;;-1:-1:-1;;1116:6884:8;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;;;1581:10;1273:26:0;1269:95;;-1:-1:-1;1116:6884:8;;1581:10;-1:-1:-1;;;;;;1116:6884:8;;;;;;;;;;1581:10;;-1:-1:-1;;;;;1116:6884:8;;3052:40:0;;-1:-1:-1;3052:40:0;1607:23:8;1603:139;;-1:-1:-1;1116:6884:8;;;;;;;;1603:139;1116:6884;;;-1:-1:-1;;;;;;1116:6884:8;;;;;1705:26;-1:-1:-1;;1705:26:8;1603:139;;;1269:95:0;1322:31;;;-1:-1:-1;1322:31:0;-1:-1:-1;1322:31:0;1116:6884:8;;-1:-1:-1;1322:31:0;1116:6884:8;-1:-1:-1;1116:6884:8;;;;;;-1:-1:-1;1116:6884:8;;;;;-1:-1:-1;1116:6884:8"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 2120,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_fromMemory": {
									"entryPoint": 3033,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_addresst_array_address_dyn_calldatat_array_uint256_dyn_calldata": {
									"entryPoint": 2142,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 5
								},
								"abi_decode_addresst_array_address_dyn_calldatat_uint256": {
									"entryPoint": 2245,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 4
								},
								"abi_decode_array_address_dyn_calldata": {
									"entryPoint": 2020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_array_address_dyn_calldatat_array_uint256_dyn_calldata": {
									"entryPoint": 2317,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 4
								},
								"abi_decode_array_address_dyn_calldatat_uint256": {
									"entryPoint": 2069,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 3
								},
								"calldata_array_index_access_address_dyn_calldata": {
									"entryPoint": 2542,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 2886,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_uint256": {
									"entryPoint": 2447,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_returndata": {
									"entryPoint": 2702,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 2648,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_callOptionalReturn": {
									"entryPoint": 3459,
									"id": 737,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 3421,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_resolveFid": {
									"entryPoint": 3064,
									"id": 983,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_safeTransfer": {
									"entryPoint": 2974,
									"id": 360,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_safeTransferFrom": {
									"entryPoint": 2899,
									"id": 387,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"read_from_calldatat_address": {
									"entryPoint": 2578,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"require_helper_stringliteral_0e35": {
									"entryPoint": 2827,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_5d70": {
									"entryPoint": 2598,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_61fc": {
									"entryPoint": 2395,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_a898": {
									"entryPoint": 2765,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_ee13": {
									"entryPoint": 2486,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436101561001a575b3615610018575f80fd5b005b5f3560e01c8063096d945b1461074f5780630a333a0f1461068e5780634d2ee433146105f757806354ec98411461056c57806364914f9c146104aa578063715018a6146104535780637b1039991461042b5780638a63ba8e146103a15780638da5cb5b1461037a578063a91ee0dc14610314578063c4142fb61461024f578063da9233241461017b578063ed2f21f5146101415763f2fde38b0361000e573461013d57602036600319011261013d576100d1610848565b6100d9610d5d565b6001600160a01b0316801561012a575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b3461013d575f36600319011261013d5760206040517f55f7c72f49dbbb427cb91ebfe0101eab873e187659de9f9561496ae24a17ecdf8152f35b6101843661090d565b91929082841480610246575b61019990610b0b565b5f925f5b85811061022657506101b08434146109b6565b845f5b8181106101dc57508460405191825260208201525f80516020610ddc83398151915260403392a2005b61021e5f808080896102006101fa8860019a8b8060a01b03946109ee565b35610bf8565b1661020c878a8c6109ee565b35905af1610218610a8e565b50610acd565b0185906101b3565b9361023f6001916102388785876109ee565b3590610b46565b940161019d565b50831515610190565b6102583661090d565b9192908284148061030b575b61026d90610b0b565b5f925f5b8581106102f257506102848434146109b6565b845f5b8181106102b057508460405191825260208201525f80516020610ddc83398151915260403392a2005b6102ea5f808080896102d36102ce8860019a8b8060a01b03946109ee565b610a12565b166102df811515610a26565b61020c878a8c6109ee565b018590610287565b936103046001916102388785876109ee565b9401610271565b50831515610264565b3461013d57602036600319011261013d5761032d610848565b610335610d5d565b600180546001600160a01b0319166001600160a01b039290921691821790557fd6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd5f80a2005b3461013d575f36600319011261013d575f546040516001600160a01b039091168152602090f35b6103aa36610815565b90916103b783151561095b565b6103c1838361098f565b916103cd8334146109b6565b835f5b8181106103f957508360405191825260208201525f80516020610ddc83398151915260403392a2005b6104235f80808087896104186101fa8960019b8c8060a01b03946109ee565b165af1610218610a8e565b0184906103d0565b3461013d575f36600319011261013d576001546040516001600160a01b039091168152602090f35b3461013d575f36600319011261013d5761046b610d5d565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461013d576104b83661085e565b9391929084841480610563575b6104ce90610b0b565b5f925f5b85811061054a57506001600160a01b0316946104f084303389610b53565b5f5b85811061051d575050505060405191825260208201525f80516020610dfc83398151915260403392a3005b806105446105316101fa6001948a896109ee565b61053c8386886109ee565b35908a610b9e565b016104f2565b9361055c600191610238878a876109ee565b94016104d2565b508315156104c5565b3461013d5761057a366108c5565b92909161058883151561095b565b610592838561098f565b6001600160a01b03909216936105aa83303388610b53565b5f5b8481106105d65750505060405191825260208201525f80516020610dfc83398151915260403392a3005b806105f1836105eb6101fa6001958a896109ee565b89610b9e565b016105ac565b3461013d57610605366108c5565b92909161061383151561095b565b61061d838561098f565b6001600160a01b039092169361063583303388610b53565b5f5b8481106106615750505060405191825260208201525f80516020610dfc83398151915260403392a3005b80610688836106766102ce6001958a896109ee565b6105eb858060a01b0382161515610a26565b01610637565b3461013d5761069c3661085e565b9391929084841480610746575b6106b290610b0b565b5f925f5b85811061072d57506001600160a01b0316946106d484303389610b53565b5f5b858110610701575050505060405191825260208201525f80516020610dfc83398151915260403392a3005b806107276107156102ce6001948a896109ee565b610531848060a01b0382161515610a26565b016106d6565b9361073f600191610238878a876109ee565b94016106b6565b508315156106a9565b61075836610815565b909161076583151561095b565b61076f838361098f565b9161077b8334146109b6565b835f5b8181106107a757508360405191825260208201525f80516020610ddc83398151915260403392a2005b6107dc5f80808087896107c66102ce8960019b8c8060a01b03946109ee565b166107d2811515610a26565b5af1610218610a8e565b01849061077e565b9181601f8401121561013d5782359167ffffffffffffffff831161013d576020808501948460051b01011161013d57565b604060031982011261013d576004359067ffffffffffffffff821161013d57610840916004016107e4565b909160243590565b600435906001600160a01b038216820361013d57565b90606060031983011261013d576004356001600160a01b038116810361013d579160243567ffffffffffffffff811161013d578161089e916004016107e4565b929092916044359067ffffffffffffffff821161013d576108c1916004016107e4565b9091565b90606060031983011261013d576004356001600160a01b038116810361013d57916024359067ffffffffffffffff821161013d57610905916004016107e4565b909160443590565b604060031982011261013d5760043567ffffffffffffffff811161013d5781610938916004016107e4565b929092916024359067ffffffffffffffff821161013d576108c1916004016107e4565b1561096257565b60405162461bcd60e51b8152602060048201526005602482015264656d70747960d81b6044820152606490fd5b818102929181159184041417156109a257565b634e487b7160e01b5f52601160045260245ffd5b156109bd57565b60405162461bcd60e51b8152602060048201526009602482015268189859081d1bdd185b60ba1b6044820152606490fd5b91908110156109fe5760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b038116810361013d5790565b15610a2d57565b606460405162461bcd60e51b81526020600482015260046024820152630746f3d360e41b6044820152fd5b90601f8019910116810190811067ffffffffffffffff821117610a7a57604052565b634e487b7160e01b5f52604160045260245ffd5b3d15610ac8573d9067ffffffffffffffff8211610a7a5760405191610abd601f8201601f191660200184610a58565b82523d5f602084013e565b606090565b15610ad457565b60405162461bcd60e51b815260206004820152600f60248201526e195d1a081cd95b990819985a5b1959608a1b6044820152606490fd5b15610b1257565b60405162461bcd60e51b815260206004820152600c60248201526b0d8cadc40dad2e6dac2e8c6d60a31b6044820152606490fd5b919082018092116109a257565b6040516323b872dd60e01b60208201526001600160a01b039283166024820152929091166044830152606480830193909352918152610b9c91610b97608483610a58565b610d83565b565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152610b9c91610b97606483610a58565b9081602091031261013d57516001600160a01b038116810361013d5790565b6001549091906001600160a01b03168015610d25576040516345315d8b60e11b81526004810184905292602084602481855afa938415610cf9575f94610d04575b506001600160a01b03841615610c93575b50506001600160a01b03821615610c5d57565b60405162461bcd60e51b815260206004820152600e60248201526d199a59081b9bdd081b1a5b9ad95960921b6044820152606490fd5b602091929350602460405180948193637b9cf4f360e01b835260048301525afa908115610cf9575f91610cca575b50905f80610c4a565b610cec915060203d602011610cf2575b610ce48183610a58565b810190610bd9565b5f610cc1565b503d610cda565b6040513d5f823e3d90fd5b610d1e91945060203d602011610cf257610ce48183610a58565b925f610c39565b60405162461bcd60e51b815260206004820152601060248201526f1c9959da5cdd1c9e481b9bdd081cd95d60821b6044820152606490fd5b5f546001600160a01b03163303610d7057565b63118cdaa760e01b5f523360045260245ffd5b905f602091828151910182855af115610cf9575f513d610dd257506001600160a01b0381163b155b610db25750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415610dab56fe4b0923ae89d0714ec69a1fa8beba63b80231bd63fe6a324ea5e059c9390df7e593eaa469388f609b8b0878fd3b9a6f4eb03976a48189e62f980563bc9d76c926a2646970667358221220c11336b5a23ee4041fe2c89a70839709c63ce40be53a5f5572b193e5aa2a798c64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1A JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x18 JUMPI PUSH0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x96D945B EQ PUSH2 0x74F JUMPI DUP1 PUSH4 0xA333A0F EQ PUSH2 0x68E JUMPI DUP1 PUSH4 0x4D2EE433 EQ PUSH2 0x5F7 JUMPI DUP1 PUSH4 0x54EC9841 EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x64914F9C EQ PUSH2 0x4AA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x453 JUMPI DUP1 PUSH4 0x7B103999 EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0x8A63BA8E EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xA91EE0DC EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xC4142FB6 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xDA923324 EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0xED2F21F5 EQ PUSH2 0x141 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI CALLVALUE PUSH2 0x13D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH2 0xD1 PUSH2 0x848 JUMP JUMPDEST PUSH2 0xD9 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x12A JUMPI PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 STOP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x55F7C72F49DBBB427CB91EBFE0101EAB873E187659DE9F9561496AE24A17ECDF DUP2 MSTORE RETURN JUMPDEST PUSH2 0x184 CALLDATASIZE PUSH2 0x90D JUMP JUMPDEST SWAP2 SWAP3 SWAP1 DUP3 DUP5 EQ DUP1 PUSH2 0x246 JUMPI JUMPDEST PUSH2 0x199 SWAP1 PUSH2 0xB0B JUMP JUMPDEST PUSH0 SWAP3 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x226 JUMPI POP PUSH2 0x1B0 DUP5 CALLVALUE EQ PUSH2 0x9B6 JUMP JUMPDEST DUP5 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1DC JUMPI POP DUP5 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDDC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x21E PUSH0 DUP1 DUP1 DUP1 DUP10 PUSH2 0x200 PUSH2 0x1FA DUP9 PUSH1 0x1 SWAP11 DUP12 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x9EE JUMP JUMPDEST CALLDATALOAD PUSH2 0xBF8 JUMP JUMPDEST AND PUSH2 0x20C DUP8 DUP11 DUP13 PUSH2 0x9EE JUMP JUMPDEST CALLDATALOAD SWAP1 GAS CALL PUSH2 0x218 PUSH2 0xA8E JUMP JUMPDEST POP PUSH2 0xACD JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1B3 JUMP JUMPDEST SWAP4 PUSH2 0x23F PUSH1 0x1 SWAP2 PUSH2 0x238 DUP8 DUP6 DUP8 PUSH2 0x9EE JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0xB46 JUMP JUMPDEST SWAP5 ADD PUSH2 0x19D JUMP JUMPDEST POP DUP4 ISZERO ISZERO PUSH2 0x190 JUMP JUMPDEST PUSH2 0x258 CALLDATASIZE PUSH2 0x90D JUMP JUMPDEST SWAP2 SWAP3 SWAP1 DUP3 DUP5 EQ DUP1 PUSH2 0x30B JUMPI JUMPDEST PUSH2 0x26D SWAP1 PUSH2 0xB0B JUMP JUMPDEST PUSH0 SWAP3 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x2F2 JUMPI POP PUSH2 0x284 DUP5 CALLVALUE EQ PUSH2 0x9B6 JUMP JUMPDEST DUP5 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x2B0 JUMPI POP DUP5 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDDC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x2EA PUSH0 DUP1 DUP1 DUP1 DUP10 PUSH2 0x2D3 PUSH2 0x2CE DUP9 PUSH1 0x1 SWAP11 DUP12 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST AND PUSH2 0x2DF DUP2 ISZERO ISZERO PUSH2 0xA26 JUMP JUMPDEST PUSH2 0x20C DUP8 DUP11 DUP13 PUSH2 0x9EE JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x287 JUMP JUMPDEST SWAP4 PUSH2 0x304 PUSH1 0x1 SWAP2 PUSH2 0x238 DUP8 DUP6 DUP8 PUSH2 0x9EE JUMP JUMPDEST SWAP5 ADD PUSH2 0x271 JUMP JUMPDEST POP DUP4 ISZERO ISZERO PUSH2 0x264 JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH2 0x32D PUSH2 0x848 JUMP JUMPDEST PUSH2 0x335 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH32 0xD6CEDDF6D2A22F21C7C81675C518004EFF43BC5C8A6FC32A0B748E69D58671CD PUSH0 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH2 0x3AA CALLDATASIZE PUSH2 0x815 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x3B7 DUP4 ISZERO ISZERO PUSH2 0x95B JUMP JUMPDEST PUSH2 0x3C1 DUP4 DUP4 PUSH2 0x98F JUMP JUMPDEST SWAP2 PUSH2 0x3CD DUP4 CALLVALUE EQ PUSH2 0x9B6 JUMP JUMPDEST DUP4 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3F9 JUMPI POP DUP4 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDDC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x423 PUSH0 DUP1 DUP1 DUP1 DUP8 DUP10 PUSH2 0x418 PUSH2 0x1FA DUP10 PUSH1 0x1 SWAP12 DUP13 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x9EE JUMP JUMPDEST AND GAS CALL PUSH2 0x218 PUSH2 0xA8E JUMP JUMPDEST ADD DUP5 SWAP1 PUSH2 0x3D0 JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13D JUMPI PUSH2 0x46B PUSH2 0xD5D JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH2 0x4B8 CALLDATASIZE PUSH2 0x85E JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 DUP5 DUP5 EQ DUP1 PUSH2 0x563 JUMPI JUMPDEST PUSH2 0x4CE SWAP1 PUSH2 0xB0B JUMP JUMPDEST PUSH0 SWAP3 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x54A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 PUSH2 0x4F0 DUP5 ADDRESS CALLER DUP10 PUSH2 0xB53 JUMP JUMPDEST PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x51D JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG3 STOP JUMPDEST DUP1 PUSH2 0x544 PUSH2 0x531 PUSH2 0x1FA PUSH1 0x1 SWAP5 DUP11 DUP10 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x53C DUP4 DUP7 DUP9 PUSH2 0x9EE JUMP JUMPDEST CALLDATALOAD SWAP1 DUP11 PUSH2 0xB9E JUMP JUMPDEST ADD PUSH2 0x4F2 JUMP JUMPDEST SWAP4 PUSH2 0x55C PUSH1 0x1 SWAP2 PUSH2 0x238 DUP8 DUP11 DUP8 PUSH2 0x9EE JUMP JUMPDEST SWAP5 ADD PUSH2 0x4D2 JUMP JUMPDEST POP DUP4 ISZERO ISZERO PUSH2 0x4C5 JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH2 0x57A CALLDATASIZE PUSH2 0x8C5 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x588 DUP4 ISZERO ISZERO PUSH2 0x95B JUMP JUMPDEST PUSH2 0x592 DUP4 DUP6 PUSH2 0x98F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 PUSH2 0x5AA DUP4 ADDRESS CALLER DUP9 PUSH2 0xB53 JUMP JUMPDEST PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x5D6 JUMPI POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG3 STOP JUMPDEST DUP1 PUSH2 0x5F1 DUP4 PUSH2 0x5EB PUSH2 0x1FA PUSH1 0x1 SWAP6 DUP11 DUP10 PUSH2 0x9EE JUMP JUMPDEST DUP10 PUSH2 0xB9E JUMP JUMPDEST ADD PUSH2 0x5AC JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH2 0x605 CALLDATASIZE PUSH2 0x8C5 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x613 DUP4 ISZERO ISZERO PUSH2 0x95B JUMP JUMPDEST PUSH2 0x61D DUP4 DUP6 PUSH2 0x98F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 PUSH2 0x635 DUP4 ADDRESS CALLER DUP9 PUSH2 0xB53 JUMP JUMPDEST PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x661 JUMPI POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG3 STOP JUMPDEST DUP1 PUSH2 0x688 DUP4 PUSH2 0x676 PUSH2 0x2CE PUSH1 0x1 SWAP6 DUP11 DUP10 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x5EB DUP6 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO PUSH2 0xA26 JUMP JUMPDEST ADD PUSH2 0x637 JUMP JUMPDEST CALLVALUE PUSH2 0x13D JUMPI PUSH2 0x69C CALLDATASIZE PUSH2 0x85E JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 DUP5 DUP5 EQ DUP1 PUSH2 0x746 JUMPI JUMPDEST PUSH2 0x6B2 SWAP1 PUSH2 0xB0B JUMP JUMPDEST PUSH0 SWAP3 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x72D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 PUSH2 0x6D4 DUP5 ADDRESS CALLER DUP10 PUSH2 0xB53 JUMP JUMPDEST PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x701 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG3 STOP JUMPDEST DUP1 PUSH2 0x727 PUSH2 0x715 PUSH2 0x2CE PUSH1 0x1 SWAP5 DUP11 DUP10 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x531 DUP5 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO PUSH2 0xA26 JUMP JUMPDEST ADD PUSH2 0x6D6 JUMP JUMPDEST SWAP4 PUSH2 0x73F PUSH1 0x1 SWAP2 PUSH2 0x238 DUP8 DUP11 DUP8 PUSH2 0x9EE JUMP JUMPDEST SWAP5 ADD PUSH2 0x6B6 JUMP JUMPDEST POP DUP4 ISZERO ISZERO PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x758 CALLDATASIZE PUSH2 0x815 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x765 DUP4 ISZERO ISZERO PUSH2 0x95B JUMP JUMPDEST PUSH2 0x76F DUP4 DUP4 PUSH2 0x98F JUMP JUMPDEST SWAP2 PUSH2 0x77B DUP4 CALLVALUE EQ PUSH2 0x9B6 JUMP JUMPDEST DUP4 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x7A7 JUMPI POP DUP4 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xDDC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH2 0x7DC PUSH0 DUP1 DUP1 DUP1 DUP8 DUP10 PUSH2 0x7C6 PUSH2 0x2CE DUP10 PUSH1 0x1 SWAP12 DUP13 DUP1 PUSH1 0xA0 SHL SUB SWAP5 PUSH2 0x9EE JUMP JUMPDEST AND PUSH2 0x7D2 DUP2 ISZERO ISZERO PUSH2 0xA26 JUMP JUMPDEST GAS CALL PUSH2 0x218 PUSH2 0xA8E JUMP JUMPDEST ADD DUP5 SWAP1 PUSH2 0x77E JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x13D JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x13D JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x13D JUMPI JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x13D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x13D JUMPI PUSH2 0x840 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x13D JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x13D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x13D JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13D JUMPI DUP2 PUSH2 0x89E SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x13D JUMPI PUSH2 0x8C1 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x13D JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x13D JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x13D JUMPI PUSH2 0x905 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x13D JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13D JUMPI DUP2 PUSH2 0x938 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x13D JUMPI PUSH2 0x8C1 SWAP2 PUSH1 0x4 ADD PUSH2 0x7E4 JUMP JUMPDEST ISZERO PUSH2 0x962 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x5 PUSH1 0x24 DUP3 ADD MSTORE PUSH5 0x656D707479 PUSH1 0xD8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x9A2 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ISZERO PUSH2 0x9BD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x189859081D1BDD185B PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x9FE JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x13D JUMPI SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xA2D JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4 PUSH1 0x24 DUP3 ADD MSTORE PUSH4 0x746F3D3 PUSH1 0xE4 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA7A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xAC8 JUMPI RETURNDATASIZE SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xA7A JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0xABD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0xA58 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAD4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x195D1A081CD95B990819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xB12 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0xD8CADC40DAD2E6DAC2E8C6D PUSH1 0xA3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x9A2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0xB9C SWAP2 PUSH2 0xB97 PUSH1 0x84 DUP4 PUSH2 0xA58 JUMP JUMPDEST PUSH2 0xD83 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0xB9C SWAP2 PUSH2 0xB97 PUSH1 0x64 DUP4 PUSH2 0xA58 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x13D JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x13D JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xD25 JUMPI PUSH1 0x40 MLOAD PUSH4 0x45315D8B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP3 PUSH1 0x20 DUP5 PUSH1 0x24 DUP2 DUP6 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0xCF9 JUMPI PUSH0 SWAP5 PUSH2 0xD04 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xC93 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0xC5D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x199A59081B9BDD081B1A5B9AD959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP3 SWAP4 POP PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x7B9CF4F3 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xCF9 JUMPI PUSH0 SWAP2 PUSH2 0xCCA JUMPI JUMPDEST POP SWAP1 PUSH0 DUP1 PUSH2 0xC4A JUMP JUMPDEST PUSH2 0xCEC SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xCF2 JUMPI JUMPDEST PUSH2 0xCE4 DUP2 DUP4 PUSH2 0xA58 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xBD9 JUMP JUMPDEST PUSH0 PUSH2 0xCC1 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0xD1E SWAP2 SWAP5 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xCF2 JUMPI PUSH2 0xCE4 DUP2 DUP4 PUSH2 0xA58 JUMP JUMPDEST SWAP3 PUSH0 PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x1C9959DA5CDD1C9E481B9BDD081CD95D PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xD70 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0xCF9 JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0xDD2 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0xDB2 JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0xDAB JUMP INVALID 0x4B MULMOD 0x23 0xAE DUP10 0xD0 PUSH18 0x4EC69A1FA8BEBA63B80231BD63FE6A324EA5 0xE0 MSIZE 0xC9 CODECOPY 0xD 0xF7 0xE5 SWAP4 0xEA LOG4 PUSH10 0x388F609B8B0878FD3B9A PUSH16 0x4EB03976A48189E62F980563BC9D76C9 0x26 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC1 SGT CALLDATASIZE 0xB5 LOG2 RETURNDATACOPY 0xE4 DIV 0x1F 0xE2 0xC8 SWAP11 PUSH17 0x839709C63CE40BE53A5F5572B193E5AA2A PUSH26 0x8C64736F6C634300081A00330000000000000000000000000000 ",
							"sourceMap": "1116:6884:8:-:0;;;;;;;;;-1:-1:-1;1116:6884:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1116:6884:8;;;;;;:::i;:::-;1500:62:0;;:::i;:::-;-1:-1:-1;;;;;1116:6884:8;2627:22:0;;2623:91;;1116:6884:8;;;-1:-1:-1;;;;;;1116:6884:8;;;;;;-1:-1:-1;;;;;1116:6884:8;;3052:40:0;;1116:6884:8;3052:40:0;1116:6884:8;2623:91:0;2672:31;;;1116:6884:8;2672:31:0;1116:6884:8;;;;;2672:31:0;1116:6884:8;;;;;;;;;;-1:-1:-1;;1116:6884:8;;;;;;;1223:28;1116:6884;;;;;;;:::i;:::-;7420:21;;;;;;:32;;;1116:6884;7412:57;;;:::i;:::-;1116:6884;7508:9;1116:6884;7519:7;;;;;;7570:9;7562:40;7570:9;;:18;7562:40;:::i;:::-;7618:9;1116:6884;7629:7;;;;;;1116:6884;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1116:6884:8;7840:10;7827:36;;1116:6884;7638:3;7771:30;1116:6884;;;;;7670:20;7682:7;1116:6884;;;;;;;;7682:7;;:::i;:::-;1116:6884;7670:20;:::i;:::-;1116:6884;7742:10;;;;;:::i;:::-;1116:6884;7718:39;;;;;:::i;:::-;;7771:30;:::i;:::-;1116:6884;7618:9;;;;7528:3;7542:10;7533:19;1116:6884;7542:10;;;;;;:::i;:::-;1116:6884;7533:19;;:::i;:::-;7528:3;1116:6884;7508:9;;7420:32;-1:-1:-1;7445:7:8;;;7420:32;;1116:6884;;;;:::i;:::-;6699:21;;;;;;:32;;;1116:6884;6691:57;;;:::i;:::-;1116:6884;6787:9;1116:6884;6798:7;;;;;;6849:9;6841:40;6849:9;;:18;6841:40;:::i;:::-;6897:9;1116:6884;6908:7;;;;;;1116:6884;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1116:6884:8;7159:10;7146:36;;1116:6884;6917:3;7090:30;1116:6884;;;;;6949:13;;1116:6884;;;;;;;;6949:13;;:::i;:::-;;:::i;:::-;1116:6884;6976:33;6984:16;;;6976:33;:::i;:::-;7061:10;;;;;:::i;7090:30::-;1116:6884;6897:9;;;;6807:3;6821:10;6812:19;1116:6884;6821:10;;;;;;:::i;6812:19::-;6807:3;1116:6884;6787:9;;6699:32;-1:-1:-1;6724:7:8;;;6699:32;;1116:6884;;;;;;-1:-1:-1;;1116:6884:8;;;;;;:::i;:::-;1500:62:0;;:::i;:::-;1116:6884:8;;;-1:-1:-1;;;;;;1116:6884:8;-1:-1:-1;;;;;1116:6884:8;;;;;;;;;1912:26;-1:-1:-1;;1912:26:8;1116:6884;;;;;;;-1:-1:-1;;1116:6884:8;;;;;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;;;;;;;:::i;:::-;6007:7;;5999:25;6007:7;;;5999:25;:::i;:::-;6050:16;;;;:::i;:::-;6084:9;6076:40;6084:9;;:18;6076:40;:::i;:::-;6132:9;1116:6884;6143:7;;;;;;1116:6884;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1116:6884:8;6354:10;6341:36;;1116:6884;6152:3;6285:30;1116:6884;;;;;;6184:20;6196:7;1116:6884;;;;;;;;6196:7;;:::i;6184:20::-;1116:6884;6232:39;;;;:::i;6285:30::-;1116:6884;6132:9;;;;1116:6884;;;;;;-1:-1:-1;;1116:6884:8;;;;;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;;;;;;;;;-1:-1:-1;;1116:6884:8;;;;1500:62:0;;:::i;:::-;1116:6884:8;;;-1:-1:-1;;;;;;1116:6884:8;;;;-1:-1:-1;;;;;1116:6884:8;3052:40:0;1116:6884:8;;3052:40:0;1116:6884:8;;;;;;;;:::i;:::-;4662:21;;;;;;;:32;;;1116:6884;4654:57;;;:::i;:::-;1116:6884;4750:9;1116:6884;4761:7;;;;;;-1:-1:-1;;;;;;1116:6884:8;;4863:5;4856:4;;4836:10;1116:6884;4863:5;:::i;:::-;1116:6884;4896:7;;;;;;1116:6884;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1116:6884:8;4836:10;5010:45;;1116:6884;4905:3;4963:7;4973:10;4951:20;4963:7;1116:6884;4963:7;;;;:::i;4951:20::-;4973:10;;;;;:::i;:::-;1116:6884;4973:10;;;:::i;:::-;1116:6884;4885:9;;4770:3;4784:10;4775:19;1116:6884;4784:10;;;;;;:::i;4775:19::-;4770:3;1116:6884;4750:9;;4662:32;-1:-1:-1;4687:7:8;;;4662:32;;1116:6884;;;;;;;:::i;:::-;3291:7;;;3283:25;3291:7;;;3283:25;:::i;:::-;3334:16;;;;:::i;:::-;-1:-1:-1;;;;;1116:6884:8;;;;3419:5;1116:6884;3412:4;3392:10;1116:6884;3419:5;:::i;:::-;1116:6884;3452:7;;;;;;1116:6884;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1116:6884:8;3392:10;3595:45;;1116:6884;3461:3;3505:7;3558:10;3505:7;3493:20;3505:7;1116:6884;3505:7;;;;:::i;3493:20::-;3558:10;;:::i;:::-;1116:6884;3441:9;;1116:6884;;;;;;;:::i;:::-;2602:7;;;2594:25;2602:7;;;2594:25;:::i;:::-;2645:16;;;;:::i;:::-;-1:-1:-1;;;;;1116:6884:8;;;;2788:5;1116:6884;2781:4;2761:10;1116:6884;2788:5;:::i;:::-;1116:6884;2821:7;;;;;;1116:6884;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1116:6884:8;2761:10;3004:45;;1116:6884;2830:3;2862:13;2967:10;2862:13;;;1116:6884;2862:13;;;;:::i;:::-;2889:33;1116:6884;;;;;;;2897:16;;2889:33;:::i;2967:10::-;1116:6884;2810:9;;1116:6884;;;;;;;:::i;:::-;3946:21;;;;;;;:32;;;1116:6884;3938:57;;;:::i;:::-;1116:6884;4034:9;1116:6884;4045:7;;;;;;-1:-1:-1;;;;;;1116:6884:8;;4147:5;4140:4;;4120:10;1116:6884;4147:5;:::i;:::-;1116:6884;4180:7;;;;;;1116:6884;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1116:6884:8;4120:10;4363:45;;1116:6884;4189:3;4221:13;4326:10;4221:13;;1116:6884;4221:13;;;;:::i;:::-;4248:33;1116:6884;;;;;;;4256:16;;4248:33;:::i;4326:10::-;1116:6884;4169:9;;4054:3;4068:10;4059:19;1116:6884;4068:10;;;;;;:::i;4059:19::-;4054:3;1116:6884;4034:9;;3946:32;-1:-1:-1;3971:7:8;;;3946:32;;1116:6884;;;;:::i;:::-;5365:7;;5357:25;5365:7;;;5357:25;:::i;:::-;5408:16;;;;:::i;:::-;5442:9;5434:40;5442:9;;:18;5434:40;:::i;:::-;5490:9;1116:6884;5501:7;;;;;;1116:6884;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1116:6884:8;5752:10;5739:36;;1116:6884;5510:3;5683:30;1116:6884;;;;;;5542:13;;1116:6884;;;;;;;;5542:13;;:::i;:::-;1116:6884;5569:33;5577:16;;;5569:33;:::i;:::-;5630:39;;;;:::i;5683:30::-;1116:6884;5490:9;;;;1116:6884;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;1116:6884:8;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;:::o;:::-;;;-1:-1:-1;;1116:6884:8;;;;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;-1:-1:-1;;1116:6884:8;;;;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;-1:-1:-1;;1116:6884:8;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;1116:6884:8;;;;;-1:-1:-1;1116:6884:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1116:6884:8;;;;;:::i;:::-;;;;-1:-1:-1;1116:6884:8;;;;:::o;:::-;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;;;;;;:::o;1618:188:5:-;1116:6884:8;;-1:-1:-1;;;1745:53:5;;;;-1:-1:-1;;;;;1116:6884:8;;;1745:53:5;;;1116:6884:8;;;;;;;;;;;;;;;;;1745:53:5;;;;;;;1116:6884:8;1745:53:5;:::i;:::-;;:::i;:::-;1618:188::o;1219:160::-;1116:6884:8;;-1:-1:-1;;;1328:43:5;;;;-1:-1:-1;;;;;1116:6884:8;;;1328:43:5;;;1116:6884:8;;;;;;;;;1328:43:5;;;;;;;1116:6884:8;1328:43:5;:::i;1116:6884:8:-;;;;;;;;;;-1:-1:-1;;;;;1116:6884:8;;;;;;;:::o;1987:325::-;1116:6884;;1987:325;;;-1:-1:-1;;;;;1116:6884:8;2115:24;;1116:6884;;;;-1:-1:-1;;;2175:20:8;;;;;1116:6884;;;;;;2175:20;1116:6884;2175:20;;;;;;;;-1:-1:-1;2175:20:8;;;1987:325;-1:-1:-1;;;;;;1116:6884:8;;2209:16;2205:47;;1987:325;-1:-1:-1;;;;;;;1116:6884:8;;2270:16;1116:6884;;1987:325::o;1116:6884::-;;;-1:-1:-1;;;1116:6884:8;;;2175:20;1116:6884;;;;2175:20;1116:6884;;;-1:-1:-1;;;1116:6884:8;;;;;;;2205:47;1116:6884;;;;;2175:20;1116:6884;;;;;;;;;2232:20;;2175;2232;;1116:6884;2232:20;;;;;;;-1:-1:-1;2232:20:8;;;2205:47;2227:25;2205:47;;;;;2232:20;;;;1116:6884;2232:20;1116:6884;2232:20;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;1116:6884;;;-1:-1:-1;1116:6884:8;;;;;2175:20;;;;;1116:6884;2175:20;1116:6884;2175:20;;;;;;;:::i;:::-;;;;;1116:6884;;;-1:-1:-1;;;1116:6884:8;;;;;;;;;;;;-1:-1:-1;;;1116:6884:8;;;;;;;1796:162:0;1710:6;1116:6884:8;-1:-1:-1;;;;;1116:6884:8;735:10:6;1855:23:0;1851:101;;1796:162::o;1851:101::-;1901:40;;;1710:6;1901:40;735:10:6;1901:40:0;1116:6884:8;;1710:6:0;1901:40;8370:720:5;;-1:-1:-1;8507:421:5;8370:720;8507:421;;;;;;;;;;;;-1:-1:-1;8507:421:5;;8942:15;;-1:-1:-1;;;;;;1116:6884:8;;8960:26:5;:31;8942:68;8938:146;;8370:720;:::o;8938:146::-;-1:-1:-1;;;;9033:40:5;;;-1:-1:-1;;;;;1116:6884:8;;;;9033:40:5;1116:6884:8;;;9033:40:5;8942:68;9009:1;8994:16;;8942:68;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "733000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"MODULE_ID()": "409",
								"owner()": "2447",
								"registry()": "2404",
								"renounceOwnership()": "28152",
								"sendEtH(address[],uint256[])": "infinite",
								"sendEtHByFid(uint256[],uint256[])": "infinite",
								"sendEtHEqual(address[],uint256)": "infinite",
								"sendEtHEqualByFid(uint256[],uint256)": "infinite",
								"sendToken(address,address[],uint256[])": "infinite",
								"sendTokenByFid(address,uint256[],uint256[])": "infinite",
								"sendTokenEqual(address,address[],uint256)": "infinite",
								"sendTokenEqualByFid(address,uint256[],uint256)": "infinite",
								"setRegistry(address)": "27954",
								"transferOwnership(address)": "28444"
							},
							"internal": {
								"_resolveFid(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "7"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "CODESIZE",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP5",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "7"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "7"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1581,
									"end": 1591,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 1581,
									"end": 1591,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP4",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1581,
									"end": 1591,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1581,
									"end": 1591,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 1607,
									"end": 1630,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1603,
									"end": 1742,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 1603,
									"end": 1742,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "12"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "RETURN",
									"source": 8
								},
								{
									"begin": 1603,
									"end": 1742,
									"name": "tag",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 1603,
									"end": 1742,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1705,
									"end": 1731,
									"name": "PUSH",
									"source": 8,
									"value": "D6CEDDF6D2A22F21C7C81675C518004EFF43BC5C8A6FC32A0B748E69D58671CD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": 1705,
									"end": 1731,
									"name": "LOG2",
									"source": 8
								},
								{
									"begin": 1603,
									"end": 1742,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1603,
									"end": 1742,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 1603,
									"end": 1742,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "1E4FBDF7"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "tag",
									"source": 8,
									"value": "7"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B71"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "E0"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1116,
									"end": 8000,
									"name": "REVERT",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c11336b5a23ee4041fe2c89a70839709c63ce40be53a5f5572b193e5aa2a798c64736f6c634300081a0033",
									".code": [
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "25"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "96D945B"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "A333A0F"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4D2EE433"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "54EC9841"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64914F9C"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "715018A6"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "7B103999"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "8A63BA8E"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "A91EE0DC"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "C4142FB6"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "DA923324"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "ED2F21F5"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "F2FDE38B"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF7"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1223,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "55F7C72F49DBBB427CB91EBFE0101EAB873E187659DE9F9561496AE24A17ECDF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7441,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7441,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7441,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7441,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7441,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7441,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7452,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7452,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 7420,
											"end": 7452,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7412,
											"end": 7469,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 7412,
											"end": 7469,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7412,
											"end": 7469,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 7412,
											"end": 7469,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7412,
											"end": 7469,
											"name": "tag",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 7412,
											"end": 7469,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7508,
											"end": 7517,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7519,
											"end": 7526,
											"name": "tag",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 7519,
											"end": 7526,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7519,
											"end": 7526,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7519,
											"end": 7526,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7519,
											"end": 7526,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 7519,
											"end": 7526,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 7519,
											"end": 7526,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7570,
											"end": 7579,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7562,
											"end": 7602,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 7570,
											"end": 7579,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7570,
											"end": 7579,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 7570,
											"end": 7588,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 7562,
											"end": 7602,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 7562,
											"end": 7602,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7562,
											"end": 7602,
											"name": "tag",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 7562,
											"end": 7602,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7618,
											"end": 7627,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7629,
											"end": 7636,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 7629,
											"end": 7636,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7629,
											"end": 7636,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7629,
											"end": 7636,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7629,
											"end": 7636,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 7629,
											"end": 7636,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 7629,
											"end": 7636,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "28C27A02AF64111BAEF5FBAD78FCFE18C6340D893AD8E97A024E25E809DD76AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7840,
											"end": 7850,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7863,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7863,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 7638,
											"end": 7641,
											"name": "tag",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 7638,
											"end": 7641,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7771,
											"end": 7801,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 7670,
											"end": 7690,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 7682,
											"end": 7689,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP11",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7682,
											"end": 7689,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 7682,
											"end": 7689,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 7682,
											"end": 7689,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7682,
											"end": 7689,
											"name": "tag",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 7682,
											"end": 7689,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 7670,
											"end": 7690,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 7670,
											"end": 7690,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7670,
											"end": 7690,
											"name": "tag",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 7670,
											"end": 7690,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7742,
											"end": 7752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 7742,
											"end": 7752,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 7742,
											"end": 7752,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 7742,
											"end": 7752,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 7742,
											"end": 7752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 7742,
											"end": 7752,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7742,
											"end": 7752,
											"name": "tag",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 7742,
											"end": 7752,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 7718,
											"end": 7757,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7718,
											"end": 7757,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 7718,
											"end": 7757,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 7718,
											"end": 7757,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 7718,
											"end": 7757,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 7718,
											"end": 7757,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7718,
											"end": 7757,
											"name": "tag",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 7718,
											"end": 7757,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7718,
											"end": 7757,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7771,
											"end": 7801,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 7771,
											"end": 7801,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7771,
											"end": 7801,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 7771,
											"end": 7801,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7618,
											"end": 7627,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7618,
											"end": 7627,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7618,
											"end": 7627,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 7618,
											"end": 7627,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7528,
											"end": 7531,
											"name": "tag",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 7528,
											"end": 7531,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 7533,
											"end": 7552,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 7542,
											"end": 7552,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "tag",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 7542,
											"end": 7552,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 7533,
											"end": 7552,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7533,
											"end": 7552,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 7533,
											"end": 7552,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7533,
											"end": 7552,
											"name": "tag",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 7533,
											"end": 7552,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7528,
											"end": 7531,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7508,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 7508,
											"end": 7517,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7452,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 7420,
											"end": 7452,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7445,
											"end": 7452,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7445,
											"end": 7452,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7445,
											"end": 7452,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7420,
											"end": 7452,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 7420,
											"end": 7452,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6720,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6720,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6720,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6720,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6720,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6720,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6731,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6731,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 6699,
											"end": 6731,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6691,
											"end": 6748,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "89"
										},
										{
											"begin": 6691,
											"end": 6748,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6691,
											"end": 6748,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 6691,
											"end": 6748,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6691,
											"end": 6748,
											"name": "tag",
											"source": 8,
											"value": "89"
										},
										{
											"begin": 6691,
											"end": 6748,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6787,
											"end": 6796,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6798,
											"end": 6805,
											"name": "tag",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 6798,
											"end": 6805,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6798,
											"end": 6805,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6798,
											"end": 6805,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6798,
											"end": 6805,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6798,
											"end": 6805,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 6798,
											"end": 6805,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6849,
											"end": 6858,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6841,
											"end": 6881,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "93"
										},
										{
											"begin": 6849,
											"end": 6858,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6849,
											"end": 6858,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 6849,
											"end": 6867,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6841,
											"end": 6881,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 6841,
											"end": 6881,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6841,
											"end": 6881,
											"name": "tag",
											"source": 8,
											"value": "93"
										},
										{
											"begin": 6841,
											"end": 6881,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6897,
											"end": 6906,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6908,
											"end": 6915,
											"name": "tag",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 6908,
											"end": 6915,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6908,
											"end": 6915,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6908,
											"end": 6915,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6908,
											"end": 6915,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6908,
											"end": 6915,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "95"
										},
										{
											"begin": 6908,
											"end": 6915,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "28C27A02AF64111BAEF5FBAD78FCFE18C6340D893AD8E97A024E25E809DD76AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7159,
											"end": 7169,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7146,
											"end": 7182,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7146,
											"end": 7182,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 6917,
											"end": 6920,
											"name": "tag",
											"source": 8,
											"value": "95"
										},
										{
											"begin": 6917,
											"end": 6920,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7090,
											"end": 7120,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP11",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 6949,
											"end": 6962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "tag",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 6949,
											"end": 6962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "tag",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 6949,
											"end": 6962,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6976,
											"end": 7009,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 6984,
											"end": 7000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6984,
											"end": 7000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6984,
											"end": 7000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6976,
											"end": 7009,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 6976,
											"end": 7009,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6976,
											"end": 7009,
											"name": "tag",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 6976,
											"end": 7009,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7061,
											"end": 7071,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 7061,
											"end": 7071,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 7061,
											"end": 7071,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 7061,
											"end": 7071,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 7061,
											"end": 7071,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 7061,
											"end": 7071,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7090,
											"end": 7120,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 7090,
											"end": 7120,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6897,
											"end": 6906,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6897,
											"end": 6906,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6897,
											"end": 6906,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 6897,
											"end": 6906,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6807,
											"end": 6810,
											"name": "tag",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 6807,
											"end": 6810,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6821,
											"end": 6831,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6831,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "103"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 6821,
											"end": 6831,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6821,
											"end": 6831,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 6821,
											"end": 6831,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 6821,
											"end": 6831,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6821,
											"end": 6831,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 6821,
											"end": 6831,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 6821,
											"end": 6831,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6831,
											"name": "tag",
											"source": 8,
											"value": "103"
										},
										{
											"begin": 6812,
											"end": 6831,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6807,
											"end": 6810,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6787,
											"end": 6796,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 6787,
											"end": 6796,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6731,
											"name": "tag",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 6699,
											"end": 6731,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6724,
											"end": 6731,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6724,
											"end": 6731,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6724,
											"end": 6731,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6731,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 6699,
											"end": 6731,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 1912,
											"end": 1938,
											"name": "PUSH",
											"source": 8,
											"value": "D6CEDDF6D2A22F21C7C81675C518004EFF43BC5C8A6FC32A0B748E69D58671CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 1912,
											"end": 1938,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6007,
											"end": 6014,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6007,
											"end": 6014,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5999,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 6007,
											"end": 6014,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6007,
											"end": 6014,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6007,
											"end": 6014,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5999,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 5999,
											"end": 6024,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5999,
											"end": 6024,
											"name": "tag",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 5999,
											"end": 6024,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6050,
											"end": 6066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "117"
										},
										{
											"begin": 6050,
											"end": 6066,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6050,
											"end": 6066,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6050,
											"end": 6066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 6050,
											"end": 6066,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6050,
											"end": 6066,
											"name": "tag",
											"source": 8,
											"value": "117"
										},
										{
											"begin": 6050,
											"end": 6066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6084,
											"end": 6093,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6076,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 6084,
											"end": 6093,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6084,
											"end": 6093,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 6084,
											"end": 6102,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6076,
											"end": 6116,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 6076,
											"end": 6116,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6076,
											"end": 6116,
											"name": "tag",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 6076,
											"end": 6116,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6132,
											"end": 6141,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6143,
											"end": 6150,
											"name": "tag",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 6143,
											"end": 6150,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6143,
											"end": 6150,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6143,
											"end": 6150,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6143,
											"end": 6150,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6143,
											"end": 6150,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 6143,
											"end": 6150,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "28C27A02AF64111BAEF5FBAD78FCFE18C6340D893AD8E97A024E25E809DD76AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6354,
											"end": 6364,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6341,
											"end": 6377,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6341,
											"end": 6377,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 6152,
											"end": 6155,
											"name": "tag",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 6152,
											"end": 6155,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6285,
											"end": 6315,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 6196,
											"end": 6203,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP12",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6196,
											"end": 6203,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 6196,
											"end": 6203,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 6196,
											"end": 6203,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "tag",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 6184,
											"end": 6204,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6232,
											"end": 6271,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 6232,
											"end": 6271,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 6232,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 6232,
											"end": 6271,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 6232,
											"end": 6271,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6285,
											"end": 6315,
											"name": "tag",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 6285,
											"end": 6315,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6132,
											"end": 6141,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6132,
											"end": 6141,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6132,
											"end": 6141,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 6132,
											"end": 6141,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4683,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4683,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4683,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4683,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4683,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4683,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4683,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4694,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4694,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 4662,
											"end": 4694,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "139"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4654,
											"end": 4711,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 4654,
											"end": 4711,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4654,
											"end": 4711,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 4654,
											"end": 4711,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4654,
											"end": 4711,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 4654,
											"end": 4711,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4750,
											"end": 4759,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4761,
											"end": 4768,
											"name": "tag",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 4761,
											"end": 4768,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4761,
											"end": 4768,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4761,
											"end": 4768,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4761,
											"end": 4768,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4761,
											"end": 4768,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 4761,
											"end": 4768,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 4863,
											"end": 4868,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 4856,
											"end": 4860,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4856,
											"end": 4860,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 4836,
											"end": 4846,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 4863,
											"end": 4868,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 4863,
											"end": 4868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4863,
											"end": 4868,
											"name": "tag",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 4863,
											"end": 4868,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4896,
											"end": 4903,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 4896,
											"end": 4903,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4896,
											"end": 4903,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4896,
											"end": 4903,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4896,
											"end": 4903,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4896,
											"end": 4903,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 4896,
											"end": 4903,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "FC97A1531A641D27A876C85181DFCD9B4FC1D5FB4C2D15DB7179BC6F828CD515"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4836,
											"end": 4846,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 5010,
											"end": 5055,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5010,
											"end": 5055,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 4905,
											"end": 4908,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 4905,
											"end": 4908,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4963,
											"end": 4970,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 4951,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 4963,
											"end": 4970,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4963,
											"end": 4970,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 4963,
											"end": 4970,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 4963,
											"end": 4970,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 4963,
											"end": 4970,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 4963,
											"end": 4970,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4951,
											"end": 4971,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 4951,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 4973,
											"end": 4983,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "tag",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 4973,
											"end": 4983,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 4973,
											"end": 4983,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4885,
											"end": 4894,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 4885,
											"end": 4894,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4770,
											"end": 4773,
											"name": "tag",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 4770,
											"end": 4773,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 4794,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4775,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4784,
											"end": 4794,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 4784,
											"end": 4794,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 4794,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 4794,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 4784,
											"end": 4794,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4775,
											"end": 4794,
											"name": "tag",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 4775,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4770,
											"end": 4773,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4750,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 4750,
											"end": 4759,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4694,
											"name": "tag",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 4662,
											"end": 4694,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4687,
											"end": 4694,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4687,
											"end": 4694,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4687,
											"end": 4694,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4662,
											"end": 4694,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "139"
										},
										{
											"begin": 4662,
											"end": 4694,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3291,
											"end": 3298,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3291,
											"end": 3298,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3291,
											"end": 3298,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3283,
											"end": 3308,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 3291,
											"end": 3298,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3291,
											"end": 3298,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3291,
											"end": 3298,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3283,
											"end": 3308,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 3283,
											"end": 3308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3283,
											"end": 3308,
											"name": "tag",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 3283,
											"end": 3308,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3350,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 3334,
											"end": 3350,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3350,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3350,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 3334,
											"end": 3350,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3350,
											"name": "tag",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 3334,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3424,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "159"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3412,
											"end": 3416,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 3392,
											"end": 3402,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3424,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 3419,
											"end": 3424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3424,
											"name": "tag",
											"source": 8,
											"value": "159"
										},
										{
											"begin": 3419,
											"end": 3424,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3452,
											"end": 3459,
											"name": "tag",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 3452,
											"end": 3459,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3452,
											"end": 3459,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3452,
											"end": 3459,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3452,
											"end": 3459,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3452,
											"end": 3459,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 3452,
											"end": 3459,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "FC97A1531A641D27A876C85181DFCD9B4FC1D5FB4C2D15DB7179BC6F828CD515"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3392,
											"end": 3402,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3595,
											"end": 3640,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3595,
											"end": 3640,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 3461,
											"end": 3464,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 3461,
											"end": 3464,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3505,
											"end": 3512,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3558,
											"end": 3568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 3505,
											"end": 3512,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3493,
											"end": 3513,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 3505,
											"end": 3512,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3505,
											"end": 3512,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 3505,
											"end": 3512,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 3505,
											"end": 3512,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 3505,
											"end": 3512,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 3505,
											"end": 3512,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3493,
											"end": 3513,
											"name": "tag",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 3493,
											"end": 3513,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3558,
											"end": 3568,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 3558,
											"end": 3568,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 3558,
											"end": 3568,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3558,
											"end": 3568,
											"name": "tag",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 3558,
											"end": 3568,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 3441,
											"end": 3450,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2609,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2609,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2594,
											"end": 2619,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 2602,
											"end": 2609,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2609,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2609,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2594,
											"end": 2619,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 2594,
											"end": 2619,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2594,
											"end": 2619,
											"name": "tag",
											"source": 8,
											"value": "169"
										},
										{
											"begin": 2594,
											"end": 2619,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2645,
											"end": 2661,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 2645,
											"end": 2661,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2645,
											"end": 2661,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2645,
											"end": 2661,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 2645,
											"end": 2661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2645,
											"end": 2661,
											"name": "tag",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 2645,
											"end": 2661,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2788,
											"end": 2793,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2781,
											"end": 2785,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 2761,
											"end": 2771,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 2788,
											"end": 2793,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 2788,
											"end": 2793,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2788,
											"end": 2793,
											"name": "tag",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 2788,
											"end": 2793,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2821,
											"end": 2828,
											"name": "tag",
											"source": 8,
											"value": "172"
										},
										{
											"begin": 2821,
											"end": 2828,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2828,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2828,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2828,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2821,
											"end": 2828,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 2821,
											"end": 2828,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "FC97A1531A641D27A876C85181DFCD9B4FC1D5FB4C2D15DB7179BC6F828CD515"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2761,
											"end": 2771,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3004,
											"end": 3049,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3004,
											"end": 3049,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "tag",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2967,
											"end": 2977,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 2862,
											"end": 2875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "tag",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 2862,
											"end": 2875,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2889,
											"end": 2922,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2897,
											"end": 2913,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2897,
											"end": 2913,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2889,
											"end": 2922,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 2889,
											"end": 2922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2967,
											"end": 2977,
											"name": "tag",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 2967,
											"end": 2977,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2810,
											"end": 2819,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "172"
										},
										{
											"begin": 2810,
											"end": 2819,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3967,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3967,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3967,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3967,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3967,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3967,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3967,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3978,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3978,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 3946,
											"end": 3978,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3938,
											"end": 3995,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 3938,
											"end": 3995,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3938,
											"end": 3995,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 3938,
											"end": 3995,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3938,
											"end": 3995,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 3938,
											"end": 3995,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4034,
											"end": 4043,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "tag",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 4147,
											"end": 4152,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 4140,
											"end": 4144,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4140,
											"end": 4144,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 4120,
											"end": 4130,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 4147,
											"end": 4152,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 4147,
											"end": 4152,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4147,
											"end": 4152,
											"name": "tag",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 4147,
											"end": 4152,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4180,
											"end": 4187,
											"name": "tag",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 4180,
											"end": 4187,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4180,
											"end": 4187,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4180,
											"end": 4187,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4180,
											"end": 4187,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4180,
											"end": 4187,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 4180,
											"end": 4187,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "FC97A1531A641D27A876C85181DFCD9B4FC1D5FB4C2D15DB7179BC6F828CD515"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4120,
											"end": 4130,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4408,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4408,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 4189,
											"end": 4192,
											"name": "tag",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 4189,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4326,
											"end": 4336,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 4221,
											"end": 4234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 4221,
											"end": 4234,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4248,
											"end": 4281,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4256,
											"end": 4272,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4256,
											"end": 4272,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4248,
											"end": 4281,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 4248,
											"end": 4281,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4326,
											"end": 4336,
											"name": "tag",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 4326,
											"end": 4336,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4169,
											"end": 4178,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 4169,
											"end": 4178,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4054,
											"end": 4057,
											"name": "tag",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 4054,
											"end": 4057,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4068,
											"end": 4078,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4078,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4068,
											"end": 4078,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4068,
											"end": 4078,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 4068,
											"end": 4078,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4068,
											"end": 4078,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 4068,
											"end": 4078,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4068,
											"end": 4078,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 4068,
											"end": 4078,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4078,
											"name": "tag",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 4059,
											"end": 4078,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4054,
											"end": 4057,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4034,
											"end": 4043,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 4034,
											"end": 4043,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3978,
											"name": "tag",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 3946,
											"end": 3978,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3971,
											"end": 3978,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3971,
											"end": 3978,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3971,
											"end": 3978,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3978,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 3946,
											"end": 3978,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5357,
											"end": 5382,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5357,
											"end": 5382,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 5357,
											"end": 5382,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5357,
											"end": 5382,
											"name": "tag",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 5357,
											"end": 5382,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5408,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 5408,
											"end": 5424,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5408,
											"end": 5424,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5408,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 5408,
											"end": 5424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5408,
											"end": 5424,
											"name": "tag",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 5408,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5442,
											"end": 5451,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5434,
											"end": 5474,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 5442,
											"end": 5451,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5442,
											"end": 5451,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5434,
											"end": 5474,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 5434,
											"end": 5474,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5434,
											"end": 5474,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 5434,
											"end": 5474,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5490,
											"end": 5499,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5501,
											"end": 5508,
											"name": "tag",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 5501,
											"end": 5508,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5501,
											"end": 5508,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5501,
											"end": 5508,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5501,
											"end": 5508,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5501,
											"end": 5508,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 5501,
											"end": 5508,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "28C27A02AF64111BAEF5FBAD78FCFE18C6340D893AD8E97A024E25E809DD76AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5752,
											"end": 5762,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 5739,
											"end": 5775,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5739,
											"end": 5775,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 5510,
											"end": 5513,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 5510,
											"end": 5513,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5683,
											"end": 5713,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 5542,
											"end": 5555,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 5542,
											"end": 5555,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP12",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5542,
											"end": 5555,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 5542,
											"end": 5555,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 5542,
											"end": 5555,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5542,
											"end": 5555,
											"name": "tag",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 5542,
											"end": 5555,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5569,
											"end": 5602,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 5577,
											"end": 5593,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5577,
											"end": 5593,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5577,
											"end": 5593,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5569,
											"end": 5602,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 5569,
											"end": 5602,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5569,
											"end": 5602,
											"name": "tag",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 5569,
											"end": 5602,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5630,
											"end": 5669,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 5630,
											"end": 5669,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 5630,
											"end": 5669,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 5630,
											"end": 5669,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 5630,
											"end": 5669,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5683,
											"end": 5713,
											"name": "tag",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 5683,
											"end": 5713,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5490,
											"end": 5499,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5490,
											"end": 5499,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5490,
											"end": 5499,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 5490,
											"end": 5499,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "249"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "249"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "656D707479"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "251"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "251"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "189859081D1BDD185B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "259"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "259"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "461BCD"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "E5"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "746F3D3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "263"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "263"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "195D1A081CD95B990819985A5B1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8CADC40DAD2E6DAC2E8C6D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "251"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1618,
											"end": 1806,
											"name": "tag",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 1618,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "275"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "276"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 1745,
											"end": 1798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 5,
											"value": "276"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 1745,
											"end": 1798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 5,
											"value": "275"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1618,
											"end": 1806,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "275"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "276"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 1328,
											"end": 1371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2115,
											"end": 2139,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2115,
											"end": 2139,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "45315D8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "tag",
											"source": 8,
											"value": "288"
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2209,
											"end": 2225,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "tag",
											"source": 8,
											"value": "290"
										},
										{
											"begin": 1987,
											"end": 2312,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2270,
											"end": 2286,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "291"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1987,
											"end": 2312,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "291"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "E"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "199A59081B9BDD081B1A5B9AD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "tag",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "7B9CF4F3"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "tag",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2227,
											"end": 2252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "290"
										},
										{
											"begin": 2205,
											"end": 2252,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "tag",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "tag",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 2232,
											"end": 2252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "tag",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2232,
											"end": 2252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "tag",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "tag",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "tag",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 2232,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "tag",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 2175,
											"end": 2195,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "tag",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "288"
										},
										{
											"begin": 2175,
											"end": 2195,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "tag",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C9959DA5CDD1C9E481B9BDD081CD95D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "82"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "305"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "tag",
											"source": 0,
											"value": "305"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA7"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "293"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "309"
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8960,
											"end": 8986,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 8960,
											"end": 8991,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 5,
											"value": "311"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "312"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8370,
											"end": 9090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "tag",
											"source": 5,
											"value": "312"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5274AFE7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 8000,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 5,
											"value": "309"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9009,
											"end": 9010,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "311"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMP",
											"source": 5
										}
									],
									".data": {
										"28C27A02AF64111BAEF5FBAD78FCFE18C6340D893AD8E97A024E25E809DD76AA": "4b0923ae89d0714ec69a1fa8beba63b80231bd63fe6a324ea5e059c9390df7e5",
										"FC97A1531A641D27A876C85181DFCD9B4FC1D5FB4C2D15DB7179BC6F828CD515": "93eaa469388f609b8b0878fd3b9a6f4eb03976a48189e62f980563bc9d76c926"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"MODULE_ID()": "ed2f21f5",
							"owner()": "8da5cb5b",
							"registry()": "7b103999",
							"renounceOwnership()": "715018a6",
							"sendEtH(address[],uint256[])": "c4142fb6",
							"sendEtHByFid(uint256[],uint256[])": "da923324",
							"sendEtHEqual(address[],uint256)": "096d945b",
							"sendEtHEqualByFid(uint256[],uint256)": "8a63ba8e",
							"sendToken(address,address[],uint256[])": "0a333a0f",
							"sendTokenByFid(address,uint256[],uint256[])": "64914f9c",
							"sendTokenEqual(address,address[],uint256)": "4d2ee433",
							"sendTokenEqualByFid(address,uint256[],uint256)": "54ec9841",
							"setRegistry(address)": "a91ee0dc",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipients\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"BatchEthSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipients\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"BatchTokenSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MODULE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IFarcasterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendEtH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendEtHByFid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountEach\",\"type\":\"uint256\"}],\"name\":\"sendEtHEqual\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountEach\",\"type\":\"uint256\"}],\"name\":\"sendEtHEqualByFid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"fids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendTokenByFid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountEach\",\"type\":\"uint256\"}],\"name\":\"sendTokenEqual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"fids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountEach\",\"type\":\"uint256\"}],\"name\":\"sendTokenEqualByFid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"sendEtH(address[],uint256[])\":{\"notice\":\"Distribute variable `amounts[i]` ETH to `recipients[i]`. Provide exact total in msg.value.\"},\"sendEtHByFid(uint256[],uint256[])\":{\"notice\":\"Distribute variable `amounts[i]` ETH to FID-resolved addresses.\"},\"sendEtHEqual(address[],uint256)\":{\"notice\":\"Distribute equal `amountEach` ETH to `recipients`. Provide exact total in msg.value.\"},\"sendEtHEqualByFid(uint256[],uint256)\":{\"notice\":\"Distribute equal `amountEach` ETH to FID-resolved addresses.\"},\"sendToken(address,address[],uint256[])\":{\"notice\":\"Distribute variable `amounts[i]` of `token` to `recipients[i]`.\"},\"sendTokenByFid(address,uint256[],uint256[])\":{\"notice\":\"Distribute variable `amounts[i]` of `token` to FID-resolved addresses.\"},\"sendTokenEqual(address,address[],uint256)\":{\"notice\":\"Distribute `amountEach` of `token` to every `recipients[i]`.\"},\"sendTokenEqualByFid(address,uint256[],uint256)\":{\"notice\":\"Distribute `amountEach` of `token` to FID-resolved addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":\"BatchSender\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]},\"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":{\"keccak256\":\"0xbd7a16b0d0d505f407abad981c83c2955772172a35ab3a2d0c279603b8264fea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://255503100a34c70e71012ac09b6572e5be8bd004c9504c37117c8fff40a2e611\",\"dweb:/ipfs/QmQuQYagKc6bvn8eYBMyZWsuUnNxWrf6kavbGbvR1YLE2C\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "src/Contract Architecture/P2P & Social Transfers/BatchSender.sol:BatchSender",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 858,
								"contract": "src/Contract Architecture/P2P & Social Transfers/BatchSender.sol:BatchSender",
								"label": "registry",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IFarcasterRegistry)844"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(IFarcasterRegistry)844": {
								"encoding": "inplace",
								"label": "contract IFarcasterRegistry",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"sendEtH(address[],uint256[])": {
								"notice": "Distribute variable `amounts[i]` ETH to `recipients[i]`. Provide exact total in msg.value."
							},
							"sendEtHByFid(uint256[],uint256[])": {
								"notice": "Distribute variable `amounts[i]` ETH to FID-resolved addresses."
							},
							"sendEtHEqual(address[],uint256)": {
								"notice": "Distribute equal `amountEach` ETH to `recipients`. Provide exact total in msg.value."
							},
							"sendEtHEqualByFid(uint256[],uint256)": {
								"notice": "Distribute equal `amountEach` ETH to FID-resolved addresses."
							},
							"sendToken(address,address[],uint256[])": {
								"notice": "Distribute variable `amounts[i]` of `token` to `recipients[i]`."
							},
							"sendTokenByFid(address,uint256[],uint256[])": {
								"notice": "Distribute variable `amounts[i]` of `token` to FID-resolved addresses."
							},
							"sendTokenEqual(address,address[],uint256)": {
								"notice": "Distribute `amountEach` of `token` to every `recipients[i]`."
							},
							"sendTokenEqualByFid(address,uint256[],uint256)": {
								"notice": "Distribute `amountEach` of `token` to FID-resolved addresses."
							}
						},
						"version": 1
					}
				},
				"IFarcasterRegistry": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "fid",
									"type": "uint256"
								}
							],
							"name": "getOwnerByFid",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "fid",
									"type": "uint256"
								}
							],
							"name": "getVaultByFid",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getOwnerByFid(uint256)": "7b9cf4f3",
							"getVaultByFid(uint256)": "8a62bb16"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"}],\"name\":\"getOwnerByFid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"}],\"name\":\"getVaultByFid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":\"IFarcasterRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]},\"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol\":{\"keccak256\":\"0xbd7a16b0d0d505f407abad981c83c2955772172a35ab3a2d0c279603b8264fea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://255503100a34c70e71012ac09b6572e5be8bd004c9504c37117c8fff40a2e611\",\"dweb:/ipfs/QmQuQYagKc6bvn8eYBMyZWsuUnNxWrf6kavbGbvR1YLE2C\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							809
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 810,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 809,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 809,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								809
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 791,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
					"exportedSymbols": {
						"IERC1363": [
							229
						],
						"IERC165": [
							821
						],
						"IERC20": [
							315
						]
					},
					"id": 230,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 151,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 230,
							"sourceUnit": 238,
							"src": "133:36:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 150,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 315,
										"src": "141:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 153,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 230,
							"sourceUnit": 234,
							"src": "170:38:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 152,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 821,
										"src": "178:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 155,
										"name": "IERC20",
										"nameLocations": [
											"590:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 315,
										"src": "590:6:1"
									},
									"id": 156,
									"nodeType": "InheritanceSpecifier",
									"src": "590:6:1"
								},
								{
									"baseName": {
										"id": 157,
										"name": "IERC165",
										"nameLocations": [
											"598:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 821,
										"src": "598:7:1"
									},
									"id": 158,
									"nodeType": "InheritanceSpecifier",
									"src": "598:7:1"
								}
							],
							"canonicalName": "IERC1363",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 154,
								"nodeType": "StructuredDocumentation",
								"src": "210:357:1",
								"text": " @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."
							},
							"fullyImplemented": false,
							"id": 229,
							"linearizedBaseContracts": [
								229,
								821,
								315
							],
							"name": "IERC1363",
							"nameLocation": "578:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "1148:370:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "1296ee62",
									"id": 168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "1532:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1556:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1548:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1548:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1568:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1560:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1560:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1547:27:1"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1593:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 165,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1593:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1592:6:1"
									},
									"scope": 229,
									"src": "1523:76:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 169,
										"nodeType": "StructuredDocumentation",
										"src": "1605:453:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "4000aea0",
									"id": 180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "2072:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2096:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2088:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2088:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2108:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2100:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2100:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2130:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2115:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 174,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2115:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2087:48:1"
									},
									"returnParameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2154:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 177,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2154:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2153:6:1"
									},
									"scope": 229,
									"src": "2063:97:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "2166:453:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "d8fbe994",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "2633:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2661:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2653:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2675:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2667:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2667:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2687:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2679:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2652:41:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2712:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2712:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:6:1"
									},
									"scope": 229,
									"src": "2624:94:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "2724:536:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "c1d34b89",
									"id": 206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "3274:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3302:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3294:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3294:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3316:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3308:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3308:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3328:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3320:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3350:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3335:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 200,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3335:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3293:62:1"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3374:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 203,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3374:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3373:6:1"
									},
									"scope": 229,
									"src": "3265:115:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "3386:390:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "3177029f",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "3790:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3813:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3805:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3805:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3830:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3822:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3822:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3804:32:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3855:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 213,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3855:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3854:6:1"
									},
									"scope": 229,
									"src": "3781:80:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "3867:478:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "cae9ca51",
									"id": 228,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "4359:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4382:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4374:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 218,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4374:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4399:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4391:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4391:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4421:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4406:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 222,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4406:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4373:53:1"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4445:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 225,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4445:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4444:6:1"
									},
									"scope": 229,
									"src": "4350:101:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 230,
							"src": "568:3885:1",
							"usedErrors": [],
							"usedEvents": [
								249,
								258
							]
						}
					],
					"src": "107:4347:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							821
						]
					},
					"id": 234,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 231,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "106:25:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../utils/introspection/IERC165.sol",
							"id": 233,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 234,
							"sourceUnit": 822,
							"src": "133:59:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 232,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 821,
										"src": "141:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "106:87:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							315
						]
					},
					"id": 238,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 235,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "105:25:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 237,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 238,
							"sourceUnit": 316,
							"src": "132:49:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 236,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 315,
										"src": "140:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "105:77:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							315
						]
					},
					"id": 316,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 239,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "106:25:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 240,
								"nodeType": "StructuredDocumentation",
								"src": "133:71:4",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 315,
							"linearizedBaseContracts": [
								315
							],
							"name": "IERC20",
							"nameLocation": "215:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 241,
										"nodeType": "StructuredDocumentation",
										"src": "228:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 249,
									"name": "Transfer",
									"nameLocation": "397:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "422:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "406:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "406:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "444:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "428:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "456:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "448:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "405:57:4"
									},
									"src": "391:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "469:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 258,
									"name": "Approval",
									"nameLocation": "628:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "653:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "637:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "637:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "676:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "660:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "693:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "685:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "636:63:4"
									},
									"src": "622:78:4"
								},
								{
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "706:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 264,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "785:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "796:2:4"
									},
									"returnParameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "822:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:9:4"
									},
									"scope": 315,
									"src": "776:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 265,
										"nodeType": "StructuredDocumentation",
										"src": "837:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 272,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "922:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "940:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "932:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 266,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "931:17:4"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "972:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "971:9:4"
									},
									"scope": 315,
									"src": "913:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 273,
										"nodeType": "StructuredDocumentation",
										"src": "987:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 282,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1214:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1231:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "1223:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 274,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1243:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "1235:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1235:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:27:4"
									},
									"returnParameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "1268:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 279,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:4"
									},
									"scope": 315,
									"src": "1205:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 292,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 292,
												"src": "1568:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 292,
												"src": "1583:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:4"
									},
									"returnParameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 292,
												"src": "1623:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:4"
									},
									"scope": 315,
									"src": "1549:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 293,
										"nodeType": "StructuredDocumentation",
										"src": "1638:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 302,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2319:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2335:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "2327:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2327:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2352:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "2344:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2344:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2326:32:4"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "2377:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 299,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:6:4"
									},
									"scope": 315,
									"src": "2310:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "2389:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 314,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2700:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2721:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "2713:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2713:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2735:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "2727:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2747:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "2739:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2739:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2712:41:4"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "2772:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 311,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2772:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2771:6:4"
									},
									"scope": 315,
									"src": "2691:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 316,
							"src": "205:2575:4",
							"usedErrors": [],
							"usedEvents": [
								249,
								258
							]
						}
					],
					"src": "106:2675:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"IERC1363": [
							229
						],
						"IERC20": [
							315
						],
						"SafeERC20": [
							779
						]
					},
					"id": 780,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 317,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 319,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 780,
							"sourceUnit": 316,
							"src": "141:37:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 318,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 315,
										"src": "149:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
							"file": "../../../interfaces/IERC1363.sol",
							"id": 321,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 780,
							"sourceUnit": 230,
							"src": "179:58:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 320,
										"name": "IERC1363",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 229,
										"src": "187:8:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 322,
								"nodeType": "StructuredDocumentation",
								"src": "239:458:5",
								"text": " @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 779,
							"linearizedBaseContracts": [
								779
							],
							"name": "SafeERC20",
							"nameLocation": "706:9:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 323,
										"nodeType": "StructuredDocumentation",
										"src": "722:65:5",
										"text": " @dev An operation with an ERC-20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 327,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "798:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "831:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "823:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "823:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:15:5"
									},
									"src": "792:46:5"
								},
								{
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "844:71:5",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 336,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "926:32:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "967:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "959:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "984:16:5",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "976:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "976:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1010:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1002:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:70:5"
									},
									"src": "920:109:5"
								},
								{
									"body": {
										"id": 359,
										"nodeType": "Block",
										"src": "1291:88:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 348,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "1321:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 351,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 340,
																		"src": "1343:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1349:8:5",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 282,
																	"src": "1343:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 353,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 342,
																			"src": "1360:2:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 354,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 344,
																			"src": "1364:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 355,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1359:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 349,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1328:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 350,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1332:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1328:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1328:43:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 347,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 737,
														"src": "1301:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1301:71:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 358,
												"nodeType": "ExpressionStatement",
												"src": "1301:71:5"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "1035:179:5",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 360,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1228:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1248:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "1241:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 339,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 338,
														"name": "IERC20",
														"nameLocations": [
															"1241:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "1241:6:5"
													},
													"referencedDeclaration": 315,
													"src": "1241:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1263:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "1255:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1275:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "1267:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:41:5"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1291:0:5"
									},
									"scope": 779,
									"src": "1219:160:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 386,
										"nodeType": "Block",
										"src": "1708:98:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 374,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "1738:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 377,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 364,
																		"src": "1760:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1766:12:5",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 314,
																	"src": "1760:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 379,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 366,
																			"src": "1781:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 380,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 368,
																			"src": "1787:2:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 381,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 370,
																			"src": "1791:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 382,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1780:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 375,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1745:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 376,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1749:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1745:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1745:53:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 373,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 737,
														"src": "1718:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1718:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 385,
												"nodeType": "ExpressionStatement",
												"src": "1718:81:5"
											}
										]
									},
									"documentation": {
										"id": 361,
										"nodeType": "StructuredDocumentation",
										"src": "1385:228:5",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 387,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1627:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1651:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "1644:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 363,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 362,
														"name": "IERC20",
														"nameLocations": [
															"1644:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "1644:6:5"
													},
													"referencedDeclaration": 315,
													"src": "1644:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1666:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "1658:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1658:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1680:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "1672:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1692:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "1684:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1643:55:5"
									},
									"returnParameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1708:0:5"
									},
									"scope": 779,
									"src": "1618:188:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 412,
										"nodeType": "Block",
										"src": "2033:99:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 401,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 391,
															"src": "2074:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 404,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 391,
																		"src": "2096:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 405,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2102:8:5",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 282,
																	"src": "2096:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 406,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 393,
																			"src": "2113:2:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 407,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 395,
																			"src": "2117:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 408,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2112:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 402,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2081:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 403,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2085:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2081:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2081:43:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 400,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 778,
														"src": "2050:23:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2050:75:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 399,
												"id": 411,
												"nodeType": "Return",
												"src": "2043:82:5"
											}
										]
									},
									"documentation": {
										"id": 388,
										"nodeType": "StructuredDocumentation",
										"src": "1812:126:5",
										"text": " @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 413,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransfer",
									"nameLocation": "1952:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1975:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "1968:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 390,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 389,
														"name": "IERC20",
														"nameLocations": [
															"1968:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "1968:6:5"
													},
													"referencedDeclaration": 315,
													"src": "1968:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1990:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "1982:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 392,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1982:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2002:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "1994:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1967:41:5"
									},
									"returnParameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "2027:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 397,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2027:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2026:6:5"
									},
									"scope": 779,
									"src": "1943:189:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 441,
										"nodeType": "Block",
										"src": "2381:109:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 429,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "2422:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 432,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 417,
																		"src": "2444:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 433,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2450:12:5",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 314,
																	"src": "2444:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 434,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 419,
																			"src": "2465:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 435,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 421,
																			"src": "2471:2:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 436,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 423,
																			"src": "2475:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 437,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2464:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 430,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2429:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 431,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2433:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2429:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2429:53:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 428,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 778,
														"src": "2398:23:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2398:85:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 427,
												"id": 440,
												"nodeType": "Return",
												"src": "2391:92:5"
											}
										]
									},
									"documentation": {
										"id": 414,
										"nodeType": "StructuredDocumentation",
										"src": "2138:130:5",
										"text": " @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransferFrom",
									"nameLocation": "2282:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2309:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "2302:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 416,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 415,
														"name": "IERC20",
														"nameLocations": [
															"2302:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "2302:6:5"
													},
													"referencedDeclaration": 315,
													"src": "2302:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2324:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "2316:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2316:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2338:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "2330:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 420,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "2342:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:55:5"
									},
									"returnParameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 426,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "2375:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 425,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:5"
									},
									"scope": 779,
									"src": "2273:217:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 472,
										"nodeType": "Block",
										"src": "3232:139:5",
										"statements": [
											{
												"assignments": [
													454
												],
												"declarations": [
													{
														"constant": false,
														"id": 454,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "3250:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 472,
														"src": "3242:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 453,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3242:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 463,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 459,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3289:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$779",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$779",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 458,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3281:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 457,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3281:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3281:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 461,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 448,
															"src": "3296:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 455,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "3265:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														"id": 456,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3271:9:5",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 292,
														"src": "3265:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3265:39:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3242:62:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 465,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "3327:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 466,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 448,
															"src": "3334:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 469,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 467,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 454,
																"src": "3343:12:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 468,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 450,
																"src": "3358:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3343:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 464,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 563,
														"src": "3314:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:50:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 471,
												"nodeType": "ExpressionStatement",
												"src": "3314:50:5"
											}
										]
									},
									"documentation": {
										"id": 443,
										"nodeType": "StructuredDocumentation",
										"src": "2496:645:5",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "3155:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3184:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "3177:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 445,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 444,
														"name": "IERC20",
														"nameLocations": [
															"3177:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "3177:6:5"
													},
													"referencedDeclaration": 315,
													"src": "3177:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3199:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "3191:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3191:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3216:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "3208:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3208:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3176:46:5"
									},
									"returnParameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3232:0:5"
									},
									"scope": 779,
									"src": "3146:225:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "4137:370:5",
										"statements": [
											{
												"id": 514,
												"nodeType": "UncheckedBlock",
												"src": "4147:354:5",
												"statements": [
													{
														"assignments": [
															485
														],
														"declarations": [
															{
																"constant": false,
																"id": 485,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "4179:16:5",
																"nodeType": "VariableDeclaration",
																"scope": 514,
																"src": "4171:24:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 484,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4171:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 494,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 490,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4222:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$779",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$779",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4214:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 488,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4214:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 491,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4214:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 492,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 479,
																	"src": "4229:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 486,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "4198:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$315",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4204:9:5",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 292,
																"src": "4198:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4198:39:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4171:66:5"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 495,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 485,
																"src": "4255:16:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 496,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 481,
																"src": "4274:17:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4255:36:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 505,
														"nodeType": "IfStatement",
														"src": "4251:160:5",
														"trueBody": {
															"id": 504,
															"nodeType": "Block",
															"src": "4293:118:5",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 499,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 479,
																				"src": "4351:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 500,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 485,
																				"src": "4360:16:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 501,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 481,
																				"src": "4378:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 498,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 336,
																			"src": "4318:32:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (address,uint256,uint256) pure returns (error)"
																			}
																		},
																		"id": 502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4318:78:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 503,
																	"nodeType": "RevertStatement",
																	"src": "4311:85:5"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 507,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "4437:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$315",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 508,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 479,
																	"src": "4444:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 511,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 509,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 485,
																		"src": "4453:16:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 510,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 481,
																		"src": "4472:17:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4453:36:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$315",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 506,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 563,
																"src": "4424:12:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 512,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4424:66:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 513,
														"nodeType": "ExpressionStatement",
														"src": "4424:66:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "3377:657:5",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "4048:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4077:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "4070:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 476,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 475,
														"name": "IERC20",
														"nameLocations": [
															"4070:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "4070:6:5"
													},
													"referencedDeclaration": 315,
													"src": "4070:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4092:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "4084:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "4109:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "4101:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4101:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4069:58:5"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4137:0:5"
									},
									"scope": 779,
									"src": "4039:468:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 562,
										"nodeType": "Block",
										"src": "5161:303:5",
										"statements": [
											{
												"assignments": [
													528
												],
												"declarations": [
													{
														"constant": false,
														"id": 528,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "5184:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 562,
														"src": "5171:25:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 527,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5171:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 537,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 531,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 520,
																"src": "5214:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$315",
																	"typeString": "contract IERC20"
																}
															},
															"id": 532,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5220:7:5",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 302,
															"src": "5214:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 533,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 522,
																	"src": "5230:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 534,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 524,
																	"src": "5239:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 535,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5229:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 529,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5199:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 530,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5203:10:5",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "5199:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 536,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5199:47:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5171:75:5"
											},
											{
												"condition": {
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5261:45:5",
													"subExpression": {
														"arguments": [
															{
																"id": 539,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 520,
																"src": "5286:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$315",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 540,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 528,
																"src": "5293:12:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$315",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 538,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "5262:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 541,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5262:44:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 561,
												"nodeType": "IfStatement",
												"src": "5257:201:5",
												"trueBody": {
													"id": 560,
													"nodeType": "Block",
													"src": "5308:150:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 544,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 520,
																		"src": "5342:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 547,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 520,
																					"src": "5364:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$315",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 548,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5370:7:5",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 302,
																				"src": "5364:13:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 549,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 522,
																						"src": "5380:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 550,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5389:1:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 551,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5379:12:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 545,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5349:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 546,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5353:10:5",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "5349:14:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5349:43:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 543,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 737,
																	"src": "5322:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 553,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5322:71:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 554,
															"nodeType": "ExpressionStatement",
															"src": "5322:71:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 556,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 520,
																		"src": "5427:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 557,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 528,
																		"src": "5434:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 555,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 737,
																	"src": "5407:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5407:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 559,
															"nodeType": "ExpressionStatement",
															"src": "5407:40:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "4513:566:5",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."
									},
									"id": 563,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "5093:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5113:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "5106:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 519,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 518,
														"name": "IERC20",
														"nameLocations": [
															"5106:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "5106:6:5"
													},
													"referencedDeclaration": 315,
													"src": "5106:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5128:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "5120:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5120:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5145:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "5137:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5137:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5105:46:5"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5161:0:5"
									},
									"scope": 779,
									"src": "5084:380:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "5911:219:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 576,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 569,
																"src": "5925:2:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5928:4:5",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "5925:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 578,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5933:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5925:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 579,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5943:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5925:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6011:39:5",
														"subExpression": {
															"arguments": [
																{
																	"id": 590,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 569,
																	"src": "6034:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 591,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 571,
																	"src": "6038:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 592,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "6045:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 588,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 567,
																	"src": "6012:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 589,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6018:15:5",
																"memberName": "transferAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 180,
																"src": "6012:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 593,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6012:38:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 603,
													"nodeType": "IfStatement",
													"src": "6007:117:5",
													"trueBody": {
														"id": 602,
														"nodeType": "Block",
														"src": "6052:72:5",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 598,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 567,
																					"src": "6106:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 597,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6098:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 596,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6098:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 599,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6098:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 595,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 327,
																		"src": "6073:24:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 600,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6073:40:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 601,
																"nodeType": "RevertStatement",
																"src": "6066:47:5"
															}
														]
													}
												},
												"id": 604,
												"nodeType": "IfStatement",
												"src": "5921:203:5",
												"trueBody": {
													"id": 587,
													"nodeType": "Block",
													"src": "5946:55:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 582,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 567,
																		"src": "5973:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 583,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 569,
																		"src": "5980:2:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 584,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 571,
																		"src": "5984:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 581,
																	"name": "safeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "5960:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 585,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5960:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 586,
															"nodeType": "ExpressionStatement",
															"src": "5960:30:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 564,
										"nodeType": "StructuredDocumentation",
										"src": "5470:333:5",
										"text": " @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCallRelaxed",
									"nameLocation": "5817:22:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5849:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "5840:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 566,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 565,
														"name": "IERC1363",
														"nameLocations": [
															"5840:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "5840:8:5"
													},
													"referencedDeclaration": 229,
													"src": "5840:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5864:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "5856:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5856:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5876:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "5868:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 570,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5868:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5896:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "5883:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 572,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5883:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5839:62:5"
									},
									"returnParameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5911:0:5"
									},
									"scope": 779,
									"src": "5808:322:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 652,
										"nodeType": "Block",
										"src": "6649:239:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 621,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 614,
																"src": "6663:2:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 622,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6666:4:5",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "6663:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 623,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6671:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6663:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6681:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6663:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 641,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6759:49:5",
														"subExpression": {
															"arguments": [
																{
																	"id": 636,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 612,
																	"src": "6786:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 637,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 614,
																	"src": "6792:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 638,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 616,
																	"src": "6796:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 639,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 618,
																	"src": "6803:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 634,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 610,
																	"src": "6760:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 635,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6766:19:5",
																"memberName": "transferFromAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 206,
																"src": "6760:25:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6760:48:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 650,
													"nodeType": "IfStatement",
													"src": "6755:127:5",
													"trueBody": {
														"id": 649,
														"nodeType": "Block",
														"src": "6810:72:5",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 645,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 610,
																					"src": "6864:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 644,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6856:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 643,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6856:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 646,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6856:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 642,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 327,
																		"src": "6831:24:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6831:40:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 648,
																"nodeType": "RevertStatement",
																"src": "6824:47:5"
															}
														]
													}
												},
												"id": 651,
												"nodeType": "IfStatement",
												"src": "6659:223:5",
												"trueBody": {
													"id": 633,
													"nodeType": "Block",
													"src": "6684:65:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 627,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 610,
																		"src": "6715:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 628,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 612,
																		"src": "6722:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 629,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 614,
																		"src": "6728:2:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 630,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 616,
																		"src": "6732:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 626,
																	"name": "safeTransferFrom",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 387,
																	"src": "6698:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 631,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6698:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 632,
															"nodeType": "ExpressionStatement",
															"src": "6698:40:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "6136:341:5",
										"text": " @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 653,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCallRelaxed",
									"nameLocation": "6491:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6536:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6527:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 609,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 608,
														"name": "IERC1363",
														"nameLocations": [
															"6527:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "6527:8:5"
													},
													"referencedDeclaration": 229,
													"src": "6527:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6559:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6551:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6551:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6581:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6573:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6573:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6601:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6593:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6593:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6616:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 617,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6517:122:5"
									},
									"returnParameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6649:0:5"
									},
									"scope": 779,
									"src": "6482:406:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 695,
										"nodeType": "Block",
										"src": "7655:218:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 666,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 659,
																"src": "7669:2:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7672:4:5",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "7669:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 668,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7677:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7669:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 669,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7687:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7669:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 684,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "7755:38:5",
														"subExpression": {
															"arguments": [
																{
																	"id": 680,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 659,
																	"src": "7777:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 681,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 661,
																	"src": "7781:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 682,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 663,
																	"src": "7788:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 678,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 657,
																	"src": "7756:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 679,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7762:14:5",
																"memberName": "approveAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 228,
																"src": "7756:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 683,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7756:37:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 693,
													"nodeType": "IfStatement",
													"src": "7751:116:5",
													"trueBody": {
														"id": 692,
														"nodeType": "Block",
														"src": "7795:72:5",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 688,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 657,
																					"src": "7849:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 687,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7841:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 686,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7841:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 689,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7841:14:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 685,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 327,
																		"src": "7816:24:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 690,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7816:40:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 691,
																"nodeType": "RevertStatement",
																"src": "7809:47:5"
															}
														]
													}
												},
												"id": 694,
												"nodeType": "IfStatement",
												"src": "7665:202:5",
												"trueBody": {
													"id": 677,
													"nodeType": "Block",
													"src": "7690:55:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 672,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 657,
																		"src": "7717:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 673,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 659,
																		"src": "7724:2:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 674,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 661,
																		"src": "7728:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 671,
																	"name": "forceApprove",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 563,
																	"src": "7704:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 675,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7704:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 676,
															"nodeType": "ExpressionStatement",
															"src": "7704:30:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "6894:654:5",
										"text": " @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."
									},
									"id": 696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCallRelaxed",
									"nameLocation": "7562:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7593:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "7584:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 656,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 655,
														"name": "IERC1363",
														"nameLocations": [
															"7584:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "7584:8:5"
													},
													"referencedDeclaration": 229,
													"src": "7584:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7608:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "7600:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 658,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7600:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7620:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "7612:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7612:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7640:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "7627:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 662,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7627:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7583:62:5"
									},
									"returnParameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7655:0:5"
									},
									"scope": 779,
									"src": "7553:320:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 736,
										"nodeType": "Block",
										"src": "8440:650:5",
										"statements": [
											{
												"assignments": [
													706
												],
												"declarations": [
													{
														"constant": false,
														"id": 706,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "8458:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 736,
														"src": "8450:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 705,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8450:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 707,
												"nodeType": "VariableDeclarationStatement",
												"src": "8450:18:5"
											},
											{
												"assignments": [
													709
												],
												"declarations": [
													{
														"constant": false,
														"id": 709,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "8486:11:5",
														"nodeType": "VariableDeclaration",
														"scope": 736,
														"src": "8478:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 708,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8478:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 710,
												"nodeType": "VariableDeclarationStatement",
												"src": "8478:19:5"
											},
											{
												"AST": {
													"nativeSrc": "8532:396:5",
													"nodeType": "YulBlock",
													"src": "8532:396:5",
													"statements": [
														{
															"nativeSrc": "8546:75:5",
															"nodeType": "YulVariableDeclaration",
															"src": "8546:75:5",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "8566:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "8566:3:5"
																		},
																		"nativeSrc": "8566:5:5",
																		"nodeType": "YulFunctionCall",
																		"src": "8566:5:5"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "8573:5:5",
																		"nodeType": "YulIdentifier",
																		"src": "8573:5:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8580:1:5",
																		"nodeType": "YulLiteral",
																		"src": "8580:1:5",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8587:4:5",
																				"nodeType": "YulIdentifier",
																				"src": "8587:4:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8593:4:5",
																				"nodeType": "YulLiteral",
																				"src": "8593:4:5",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8583:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "8583:3:5"
																		},
																		"nativeSrc": "8583:15:5",
																		"nodeType": "YulFunctionCall",
																		"src": "8583:15:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8606:4:5",
																				"nodeType": "YulIdentifier",
																				"src": "8606:4:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "8600:5:5",
																			"nodeType": "YulIdentifier",
																			"src": "8600:5:5"
																		},
																		"nativeSrc": "8600:11:5",
																		"nodeType": "YulFunctionCall",
																		"src": "8600:11:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8613:1:5",
																		"nodeType": "YulLiteral",
																		"src": "8613:1:5",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8616:4:5",
																		"nodeType": "YulLiteral",
																		"src": "8616:4:5",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "8561:4:5",
																	"nodeType": "YulIdentifier",
																	"src": "8561:4:5"
																},
																"nativeSrc": "8561:60:5",
																"nodeType": "YulFunctionCall",
																"src": "8561:60:5"
															},
															"variables": [
																{
																	"name": "success",
																	"nativeSrc": "8550:7:5",
																	"nodeType": "YulTypedName",
																	"src": "8550:7:5",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8682:157:5",
																"nodeType": "YulBlock",
																"src": "8682:157:5",
																"statements": [
																	{
																		"nativeSrc": "8700:22:5",
																		"nodeType": "YulVariableDeclaration",
																		"src": "8700:22:5",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8717:4:5",
																					"nodeType": "YulLiteral",
																					"src": "8717:4:5",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "8711:5:5",
																				"nodeType": "YulIdentifier",
																				"src": "8711:5:5"
																			},
																			"nativeSrc": "8711:11:5",
																			"nodeType": "YulFunctionCall",
																			"src": "8711:11:5"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nativeSrc": "8704:3:5",
																				"nodeType": "YulTypedName",
																				"src": "8704:3:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8754:3:5",
																					"nodeType": "YulIdentifier",
																					"src": "8754:3:5"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8759:1:5",
																					"nodeType": "YulLiteral",
																					"src": "8759:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8762:14:5",
																						"nodeType": "YulIdentifier",
																						"src": "8762:14:5"
																					},
																					"nativeSrc": "8762:16:5",
																					"nodeType": "YulFunctionCall",
																					"src": "8762:16:5"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nativeSrc": "8739:14:5",
																				"nodeType": "YulIdentifier",
																				"src": "8739:14:5"
																			},
																			"nativeSrc": "8739:40:5",
																			"nodeType": "YulFunctionCall",
																			"src": "8739:40:5"
																		},
																		"nativeSrc": "8739:40:5",
																		"nodeType": "YulExpressionStatement",
																		"src": "8739:40:5"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8803:3:5",
																					"nodeType": "YulIdentifier",
																					"src": "8803:3:5"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8808:14:5",
																						"nodeType": "YulIdentifier",
																						"src": "8808:14:5"
																					},
																					"nativeSrc": "8808:16:5",
																					"nodeType": "YulFunctionCall",
																					"src": "8808:16:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8796:6:5",
																				"nodeType": "YulIdentifier",
																				"src": "8796:6:5"
																			},
																			"nativeSrc": "8796:29:5",
																			"nodeType": "YulFunctionCall",
																			"src": "8796:29:5"
																		},
																		"nativeSrc": "8796:29:5",
																		"nodeType": "YulExpressionStatement",
																		"src": "8796:29:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "success",
																		"nativeSrc": "8673:7:5",
																		"nodeType": "YulIdentifier",
																		"src": "8673:7:5"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8666:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "8666:6:5"
																},
																"nativeSrc": "8666:15:5",
																"nodeType": "YulFunctionCall",
																"src": "8666:15:5"
															},
															"nativeSrc": "8663:176:5",
															"nodeType": "YulIf",
															"src": "8663:176:5"
														},
														{
															"nativeSrc": "8852:30:5",
															"nodeType": "YulAssignment",
															"src": "8852:30:5",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "8866:14:5",
																	"nodeType": "YulIdentifier",
																	"src": "8866:14:5"
																},
																"nativeSrc": "8866:16:5",
																"nodeType": "YulFunctionCall",
																"src": "8866:16:5"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "8852:10:5",
																	"nodeType": "YulIdentifier",
																	"src": "8852:10:5"
																}
															]
														},
														{
															"nativeSrc": "8895:23:5",
															"nodeType": "YulAssignment",
															"src": "8895:23:5",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8916:1:5",
																		"nodeType": "YulLiteral",
																		"src": "8916:1:5",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8910:5:5",
																	"nodeType": "YulIdentifier",
																	"src": "8910:5:5"
																},
																"nativeSrc": "8910:8:5",
																"nodeType": "YulFunctionCall",
																"src": "8910:8:5"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "8895:11:5",
																	"nodeType": "YulIdentifier",
																	"src": "8895:11:5"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 702,
														"isOffset": false,
														"isSlot": false,
														"src": "8587:4:5",
														"valueSize": 1
													},
													{
														"declaration": 702,
														"isOffset": false,
														"isSlot": false,
														"src": "8606:4:5",
														"valueSize": 1
													},
													{
														"declaration": 706,
														"isOffset": false,
														"isSlot": false,
														"src": "8852:10:5",
														"valueSize": 1
													},
													{
														"declaration": 709,
														"isOffset": false,
														"isSlot": false,
														"src": "8895:11:5",
														"valueSize": 1
													},
													{
														"declaration": 700,
														"isOffset": false,
														"isSlot": false,
														"src": "8573:5:5",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 711,
												"nodeType": "InlineAssembly",
												"src": "8507:421:5"
											},
											{
												"condition": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 714,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 712,
															"name": "returnSize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "8942:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 713,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8956:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8942:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 725,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 723,
															"name": "returnValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "8994:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "31",
															"id": 724,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9009:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8994:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8942:68:5",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 722,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 717,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 700,
																			"src": "8968:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$315",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$315",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 716,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8960:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 715,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8960:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 718,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8960:14:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 719,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8975:4:5",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "8960:19:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8980:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8960:26:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 721,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8990:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8960:31:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 735,
												"nodeType": "IfStatement",
												"src": "8938:146:5",
												"trueBody": {
													"id": 734,
													"nodeType": "Block",
													"src": "9012:72:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 730,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 700,
																				"src": "9066:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$315",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$315",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 729,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9058:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 728,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9058:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 731,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9058:14:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 727,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 327,
																	"src": "9033:24:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 732,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9033:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 733,
															"nodeType": "RevertStatement",
															"src": "9026:47:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "7879:486:5",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."
									},
									"id": 737,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "8379:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8406:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 737,
												"src": "8399:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 699,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 698,
														"name": "IERC20",
														"nameLocations": [
															"8399:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "8399:6:5"
													},
													"referencedDeclaration": 315,
													"src": "8399:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8426:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 737,
												"src": "8413:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 701,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8413:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8398:33:5"
									},
									"returnParameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8440:0:5"
									},
									"scope": 779,
									"src": "8370:720:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 777,
										"nodeType": "Block",
										"src": "9681:391:5",
										"statements": [
											{
												"assignments": [
													749
												],
												"declarations": [
													{
														"constant": false,
														"id": 749,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "9696:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 777,
														"src": "9691:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 748,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9691:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 750,
												"nodeType": "VariableDeclarationStatement",
												"src": "9691:12:5"
											},
											{
												"assignments": [
													752
												],
												"declarations": [
													{
														"constant": false,
														"id": 752,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "9721:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 777,
														"src": "9713:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 751,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9713:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 753,
												"nodeType": "VariableDeclarationStatement",
												"src": "9713:18:5"
											},
											{
												"assignments": [
													755
												],
												"declarations": [
													{
														"constant": false,
														"id": 755,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "9749:11:5",
														"nodeType": "VariableDeclaration",
														"scope": 777,
														"src": "9741:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 754,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9741:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 756,
												"nodeType": "VariableDeclarationStatement",
												"src": "9741:19:5"
											},
											{
												"AST": {
													"nativeSrc": "9795:174:5",
													"nodeType": "YulBlock",
													"src": "9795:174:5",
													"statements": [
														{
															"nativeSrc": "9809:71:5",
															"nodeType": "YulAssignment",
															"src": "9809:71:5",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "9825:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "9825:3:5"
																		},
																		"nativeSrc": "9825:5:5",
																		"nodeType": "YulFunctionCall",
																		"src": "9825:5:5"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "9832:5:5",
																		"nodeType": "YulIdentifier",
																		"src": "9832:5:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9839:1:5",
																		"nodeType": "YulLiteral",
																		"src": "9839:1:5",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9846:4:5",
																				"nodeType": "YulIdentifier",
																				"src": "9846:4:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9852:4:5",
																				"nodeType": "YulLiteral",
																				"src": "9852:4:5",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9842:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "9842:3:5"
																		},
																		"nativeSrc": "9842:15:5",
																		"nodeType": "YulFunctionCall",
																		"src": "9842:15:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9865:4:5",
																				"nodeType": "YulIdentifier",
																				"src": "9865:4:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "9859:5:5",
																			"nodeType": "YulIdentifier",
																			"src": "9859:5:5"
																		},
																		"nativeSrc": "9859:11:5",
																		"nodeType": "YulFunctionCall",
																		"src": "9859:11:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9872:1:5",
																		"nodeType": "YulLiteral",
																		"src": "9872:1:5",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9875:4:5",
																		"nodeType": "YulLiteral",
																		"src": "9875:4:5",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "9820:4:5",
																	"nodeType": "YulIdentifier",
																	"src": "9820:4:5"
																},
																"nativeSrc": "9820:60:5",
																"nodeType": "YulFunctionCall",
																"src": "9820:60:5"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nativeSrc": "9809:7:5",
																	"nodeType": "YulIdentifier",
																	"src": "9809:7:5"
																}
															]
														},
														{
															"nativeSrc": "9893:30:5",
															"nodeType": "YulAssignment",
															"src": "9893:30:5",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "9907:14:5",
																	"nodeType": "YulIdentifier",
																	"src": "9907:14:5"
																},
																"nativeSrc": "9907:16:5",
																"nodeType": "YulFunctionCall",
																"src": "9907:16:5"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "9893:10:5",
																	"nodeType": "YulIdentifier",
																	"src": "9893:10:5"
																}
															]
														},
														{
															"nativeSrc": "9936:23:5",
															"nodeType": "YulAssignment",
															"src": "9936:23:5",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9957:1:5",
																		"nodeType": "YulLiteral",
																		"src": "9957:1:5",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "9951:5:5",
																	"nodeType": "YulIdentifier",
																	"src": "9951:5:5"
																},
																"nativeSrc": "9951:8:5",
																"nodeType": "YulFunctionCall",
																"src": "9951:8:5"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "9936:11:5",
																	"nodeType": "YulIdentifier",
																	"src": "9936:11:5"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 743,
														"isOffset": false,
														"isSlot": false,
														"src": "9846:4:5",
														"valueSize": 1
													},
													{
														"declaration": 743,
														"isOffset": false,
														"isSlot": false,
														"src": "9865:4:5",
														"valueSize": 1
													},
													{
														"declaration": 752,
														"isOffset": false,
														"isSlot": false,
														"src": "9893:10:5",
														"valueSize": 1
													},
													{
														"declaration": 755,
														"isOffset": false,
														"isSlot": false,
														"src": "9936:11:5",
														"valueSize": 1
													},
													{
														"declaration": 749,
														"isOffset": false,
														"isSlot": false,
														"src": "9809:7:5",
														"valueSize": 1
													},
													{
														"declaration": 741,
														"isOffset": false,
														"isSlot": false,
														"src": "9832:5:5",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 757,
												"nodeType": "InlineAssembly",
												"src": "9770:199:5"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 758,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 749,
														"src": "9985:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 761,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 759,
																		"name": "returnSize",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 752,
																		"src": "9997:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 760,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10011:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9997:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 772,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 770,
																		"name": "returnValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 755,
																		"src": "10048:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 771,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10063:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "10048:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 773,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9997:67:5",
																"trueExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 769,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 764,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 741,
																						"src": "10023:5:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$315",
																							"typeString": "contract IERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_IERC20_$315",
																							"typeString": "contract IERC20"
																						}
																					],
																					"id": 763,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "10015:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 762,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "10015:7:5",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 765,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10015:14:5",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 766,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "10030:4:5",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "10015:19:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 767,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10035:6:5",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "10015:26:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 768,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10044:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "10015:30:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 774,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9996:69:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9985:80:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 747,
												"id": 776,
												"nodeType": "Return",
												"src": "9978:87:5"
											}
										]
									},
									"documentation": {
										"id": 738,
										"nodeType": "StructuredDocumentation",
										"src": "9096:491:5",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."
									},
									"id": 778,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "9601:23:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9632:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "9625:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$315",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 740,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 739,
														"name": "IERC20",
														"nameLocations": [
															"9625:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 315,
														"src": "9625:6:5"
													},
													"referencedDeclaration": 315,
													"src": "9625:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$315",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 743,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9652:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "9639:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 742,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9639:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9624:33:5"
									},
									"returnParameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "9675:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 745,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9675:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9674:6:5"
									},
									"scope": 779,
									"src": "9592:480:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 780,
							"src": "698:9376:5",
							"usedErrors": [
								327,
								336
							],
							"usedEvents": []
						}
					],
					"src": "115:9960:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							809
						]
					},
					"id": 810,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 781,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 782,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 809,
							"linearizedBaseContracts": [
								809
							],
							"name": "Context",
							"nameLocation": "642:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 790,
										"nodeType": "Block",
										"src": "718:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 787,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 786,
												"id": 789,
												"nodeType": "Return",
												"src": "728:17:6"
											}
										]
									},
									"id": 791,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:6"
									},
									"returnParameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 791,
												"src": "709:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:6"
									},
									"scope": 809,
									"src": "656:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 799,
										"nodeType": "Block",
										"src": "825:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 796,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 795,
												"id": 798,
												"nodeType": "Return",
												"src": "835:15:6"
											}
										]
									},
									"id": 800,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:6"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "809:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 793,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:6"
									},
									"scope": 809,
									"src": "758:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "935:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 804,
												"id": 806,
												"nodeType": "Return",
												"src": "945:8:6"
											}
										]
									},
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:6"
									},
									"returnParameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "926:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 802,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:6"
									},
									"scope": 809,
									"src": "863:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 810,
							"src": "624:338:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							821
						]
					},
					"id": 822,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 811,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "115:25:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 812,
								"nodeType": "StructuredDocumentation",
								"src": "142:280:7",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 821,
							"linearizedBaseContracts": [
								821
							],
							"name": "IERC165",
							"nameLocation": "433:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 813,
										"nodeType": "StructuredDocumentation",
										"src": "447:340:7",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 820,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "801:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "826:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "819:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 814,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "819:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:20:7"
									},
									"returnParameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "862:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 817,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "862:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "861:6:7"
									},
									"scope": 821,
									"src": "792:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 822,
							"src": "423:447:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:756:7"
				},
				"id": 7
			},
			"src/Contract Architecture/P2P & Social Transfers/BatchSender.sol": {
				"ast": {
					"absolutePath": "src/Contract Architecture/P2P & Social Transfers/BatchSender.sol",
					"exportedSymbols": {
						"BatchSender": [
							1728
						],
						"IERC20": [
							315
						],
						"IFarcasterRegistry": [
							844
						],
						"Ownable": [
							147
						],
						"SafeERC20": [
							779
						]
					},
					"id": 1729,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 823,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 825,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1729,
							"sourceUnit": 148,
							"src": "713:67:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 824,
										"name": "Ownable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 147,
										"src": "721:7:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 827,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1729,
							"sourceUnit": 316,
							"src": "781:70:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 826,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 315,
										"src": "789:6:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 829,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1729,
							"sourceUnit": 780,
							"src": "852:82:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 828,
										"name": "SafeERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 779,
										"src": "860:9:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IFarcasterRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 844,
							"linearizedBaseContracts": [
								844
							],
							"name": "IFarcasterRegistry",
							"nameLocation": "946:18:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "8a62bb16",
									"id": 836,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getVaultByFid",
									"nameLocation": "980:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "fid",
												"nameLocation": "1002:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "994:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 830,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:13:8"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "1030:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 833,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1030:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1029:9:8"
									},
									"scope": 844,
									"src": "971:68:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7b9cf4f3",
									"id": 843,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getOwnerByFid",
									"nameLocation": "1053:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 839,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 838,
												"mutability": "mutable",
												"name": "fid",
												"nameLocation": "1075:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "1067:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 837,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1067:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1066:13:8"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "1103:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1103:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1102:9:8"
									},
									"scope": 844,
									"src": "1044:68:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1729,
							"src": "936:178:8",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 845,
										"name": "Ownable",
										"nameLocations": [
											"1140:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "1140:7:8"
									},
									"id": 846,
									"nodeType": "InheritanceSpecifier",
									"src": "1140:7:8"
								}
							],
							"canonicalName": "BatchSender",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1728,
							"linearizedBaseContracts": [
								1728,
								147,
								809
							],
							"name": "BatchSender",
							"nameLocation": "1125:11:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 850,
									"libraryName": {
										"id": 847,
										"name": "SafeERC20",
										"nameLocations": [
											"1160:9:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 779,
										"src": "1160:9:8"
									},
									"nodeType": "UsingForDirective",
									"src": "1154:27:8",
									"typeName": {
										"id": 849,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 848,
											"name": "IERC20",
											"nameLocations": [
												"1174:6:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 315,
											"src": "1174:6:8"
										},
										"referencedDeclaration": 315,
										"src": "1174:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$315",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": true,
									"functionSelector": "ed2f21f5",
									"id": 855,
									"mutability": "constant",
									"name": "MODULE_ID",
									"nameLocation": "1211:9:8",
									"nodeType": "VariableDeclaration",
									"scope": 1728,
									"src": "1187:64:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 851,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1187:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "42415443485f53454e4445525f5631",
												"id": 853,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1233:17:8",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_55f7c72f49dbbb427cb91ebfe0101eab873e187659de9f9561496ae24a17ecdf",
													"typeString": "literal_string \"BATCH_SENDER_V1\""
												},
												"value": "BATCH_SENDER_V1"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_55f7c72f49dbbb427cb91ebfe0101eab873e187659de9f9561496ae24a17ecdf",
													"typeString": "literal_string \"BATCH_SENDER_V1\""
												}
											],
											"id": 852,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1223:9:8",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 854,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1223:28:8",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "7b103999",
									"id": 858,
									"mutability": "mutable",
									"name": "registry",
									"nameLocation": "1284:8:8",
									"nodeType": "VariableDeclaration",
									"scope": 1728,
									"src": "1258:34:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
										"typeString": "contract IFarcasterRegistry"
									},
									"typeName": {
										"id": 857,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 856,
											"name": "IFarcasterRegistry",
											"nameLocations": [
												"1258:18:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 844,
											"src": "1258:18:8"
										},
										"referencedDeclaration": 844,
										"src": "1258:18:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
											"typeString": "contract IFarcasterRegistry"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "d6ceddf6d2a22f21c7c81675c518004eff43bc5c8a6fc32a0b748e69d58671cd",
									"id": 862,
									"name": "RegistryUpdated",
									"nameLocation": "1305:15:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 861,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 860,
												"indexed": true,
												"mutability": "mutable",
												"name": "registry",
												"nameLocation": "1337:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "1321:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1321:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1320:26:8"
									},
									"src": "1299:48:8"
								},
								{
									"anonymous": false,
									"eventSelector": "93eaa469388f609b8b0878fd3b9a6f4eb03976a48189e62f980563bc9d76c926",
									"id": 872,
									"name": "BatchTokenSent",
									"nameLocation": "1358:14:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 864,
												"indexed": true,
												"mutability": "mutable",
												"name": "vault",
												"nameLocation": "1389:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "1373:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 863,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1373:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 866,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1412:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "1396:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 865,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1396:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 868,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "1427:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "1419:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 867,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1419:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 870,
												"indexed": false,
												"mutability": "mutable",
												"name": "total",
												"nameLocation": "1447:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "1439:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1439:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1372:81:8"
									},
									"src": "1352:102:8"
								},
								{
									"anonymous": false,
									"eventSelector": "4b0923ae89d0714ec69a1fa8beba63b80231bd63fe6a324ea5e059c9390df7e5",
									"id": 880,
									"name": "BatchEthSent",
									"nameLocation": "1465:12:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"indexed": true,
												"mutability": "mutable",
												"name": "vault",
												"nameLocation": "1494:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1478:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 873,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1478:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "1509:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1501:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1501:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 878,
												"indexed": false,
												"mutability": "mutable",
												"name": "total",
												"nameLocation": "1529:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1521:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 877,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1521:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1477:58:8"
									},
									"src": "1459:77:8"
								},
								{
									"body": {
										"id": 907,
										"nodeType": "Block",
										"src": "1593:155:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 889,
														"name": "_registry",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 882,
														"src": "1607:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 892,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1628:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 891,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1620:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 890,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1620:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 893,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1620:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1607:23:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 906,
												"nodeType": "IfStatement",
												"src": "1603:139:8",
												"trueBody": {
													"id": 905,
													"nodeType": "Block",
													"src": "1632:110:8",
													"statements": [
														{
															"expression": {
																"id": 899,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 895,
																	"name": "registry",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 858,
																	"src": "1646:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
																		"typeString": "contract IFarcasterRegistry"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 897,
																			"name": "_registry",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 882,
																			"src": "1676:9:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 896,
																		"name": "IFarcasterRegistry",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 844,
																		"src": "1657:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IFarcasterRegistry_$844_$",
																			"typeString": "type(contract IFarcasterRegistry)"
																		}
																	},
																	"id": 898,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1657:29:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
																		"typeString": "contract IFarcasterRegistry"
																	}
																},
																"src": "1646:40:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
																	"typeString": "contract IFarcasterRegistry"
																}
															},
															"id": 900,
															"nodeType": "ExpressionStatement",
															"src": "1646:40:8"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 902,
																		"name": "_registry",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 882,
																		"src": "1721:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 901,
																	"name": "RegistryUpdated",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 862,
																	"src": "1705:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
																		"typeString": "function (address)"
																	}
																},
																"id": 903,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1705:26:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 904,
															"nodeType": "EmitStatement",
															"src": "1700:31:8"
														}
													]
												}
											}
										]
									},
									"id": 908,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 885,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1581:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1585:6:8",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "1581:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 887,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 884,
												"name": "Ownable",
												"nameLocations": [
													"1573:7:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "1573:7:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1573:19:8"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "_registry",
												"nameLocation": "1562:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 908,
												"src": "1554:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 881,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1554:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1553:19:8"
									},
									"returnParameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1593:0:8"
									},
									"scope": 1728,
									"src": "1542:206:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 925,
										"nodeType": "Block",
										"src": "1847:98:8",
										"statements": [
											{
												"expression": {
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 915,
														"name": "registry",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "1857:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
															"typeString": "contract IFarcasterRegistry"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 917,
																"name": "_registry",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 910,
																"src": "1887:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 916,
															"name": "IFarcasterRegistry",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 844,
															"src": "1868:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IFarcasterRegistry_$844_$",
																"typeString": "type(contract IFarcasterRegistry)"
															}
														},
														"id": 918,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1868:29:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
															"typeString": "contract IFarcasterRegistry"
														}
													},
													"src": "1857:40:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
														"typeString": "contract IFarcasterRegistry"
													}
												},
												"id": 920,
												"nodeType": "ExpressionStatement",
												"src": "1857:40:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 922,
															"name": "_registry",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 910,
															"src": "1928:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 921,
														"name": "RegistryUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 862,
														"src": "1912:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1912:26:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 924,
												"nodeType": "EmitStatement",
												"src": "1907:31:8"
											}
										]
									},
									"functionSelector": "a91ee0dc",
									"id": 926,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 913,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 912,
												"name": "onlyOwner",
												"nameLocations": [
													"1837:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1837:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1837:9:8"
										}
									],
									"name": "setRegistry",
									"nameLocation": "1797:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "_registry",
												"nameLocation": "1817:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "1809:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 909,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1809:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1808:19:8"
									},
									"returnParameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1847:0:8"
									},
									"scope": 1728,
									"src": "1788:157:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "2056:256:8",
										"statements": [
											{
												"assignments": [
													935
												],
												"declarations": [
													{
														"constant": false,
														"id": 935,
														"mutability": "mutable",
														"name": "r",
														"nameLocation": "2085:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 982,
														"src": "2066:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
															"typeString": "contract IFarcasterRegistry"
														},
														"typeName": {
															"id": 934,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 933,
																"name": "IFarcasterRegistry",
																"nameLocations": [
																	"2066:18:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 844,
																"src": "2066:18:8"
															},
															"referencedDeclaration": 844,
															"src": "2066:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
																"typeString": "contract IFarcasterRegistry"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 937,
												"initialValue": {
													"id": 936,
													"name": "registry",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 858,
													"src": "2089:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
														"typeString": "contract IFarcasterRegistry"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2066:31:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 941,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 935,
																		"src": "2123:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
																			"typeString": "contract IFarcasterRegistry"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
																			"typeString": "contract IFarcasterRegistry"
																		}
																	],
																	"id": 940,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2115:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 939,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2115:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 942,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2115:10:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2137:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 944,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2129:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 943,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2129:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 946,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2129:10:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2115:24:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7265676973747279206e6f7420736574",
															"id": 948,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2141:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4deb429080cdc72dfa69065ca954584fabbfd87f9e50d29b6d9d8fd8a6d56106",
																"typeString": "literal_string \"registry not set\""
															},
															"value": "registry not set"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4deb429080cdc72dfa69065ca954584fabbfd87f9e50d29b6d9d8fd8a6d56106",
																"typeString": "literal_string \"registry not set\""
															}
														],
														"id": 938,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2107:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2107:53:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 950,
												"nodeType": "ExpressionStatement",
												"src": "2107:53:8"
											},
											{
												"expression": {
													"id": 956,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 951,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "2170:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 954,
																"name": "fid",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 928,
																"src": "2191:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 952,
																"name": "r",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 935,
																"src": "2175:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
																	"typeString": "contract IFarcasterRegistry"
																}
															},
															"id": 953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2177:13:8",
															"memberName": "getVaultByFid",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 836,
															"src": "2175:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view external returns (address)"
															}
														},
														"id": 955,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2175:20:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2170:25:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 957,
												"nodeType": "ExpressionStatement",
												"src": "2170:25:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 958,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "2209:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2223:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 960,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2215:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 959,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2215:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 962,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2215:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2209:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 971,
												"nodeType": "IfStatement",
												"src": "2205:47:8",
												"trueBody": {
													"expression": {
														"id": 969,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 964,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 931,
															"src": "2227:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"arguments": [
																{
																	"id": 967,
																	"name": "fid",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 928,
																	"src": "2248:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 965,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 935,
																	"src": "2232:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IFarcasterRegistry_$844",
																		"typeString": "contract IFarcasterRegistry"
																	}
																},
																"id": 966,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2234:13:8",
																"memberName": "getOwnerByFid",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 843,
																"src": "2232:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
																	"typeString": "function (uint256) view external returns (address)"
																}
															},
															"id": 968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2232:20:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2227:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 970,
													"nodeType": "ExpressionStatement",
													"src": "2227:25:8"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 978,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 973,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 931,
																"src": "2270:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 976,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2284:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 975,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2276:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 974,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2276:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 977,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2276:10:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2270:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "666964206e6f74206c696e6b6564",
															"id": 979,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2288:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b41eb7e35a05028f38181b8b0304d6251fa0e9a40209888ba261d5bf28268a88",
																"typeString": "literal_string \"fid not linked\""
															},
															"value": "fid not linked"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b41eb7e35a05028f38181b8b0304d6251fa0e9a40209888ba261d5bf28268a88",
																"typeString": "literal_string \"fid not linked\""
															}
														],
														"id": 972,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2262:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2262:43:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 981,
												"nodeType": "ExpressionStatement",
												"src": "2262:43:8"
											}
										]
									},
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_resolveFid",
									"nameLocation": "1996:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "fid",
												"nameLocation": "2016:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "2008:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2007:13:8"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2052:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "2044:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2044:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2043:12:8"
									},
									"scope": 1728,
									"src": "1987:325:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1068,
										"nodeType": "Block",
										"src": "2543:513:8",
										"statements": [
											{
												"assignments": [
													995
												],
												"declarations": [
													{
														"constant": false,
														"id": 995,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2561:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1068,
														"src": "2553:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 994,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2553:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 998,
												"initialValue": {
													"expression": {
														"id": 996,
														"name": "recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 989,
														"src": "2567:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2578:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "2567:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2553:31:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1002,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1000,
																"name": "len",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 995,
																"src": "2602:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2608:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2602:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "656d707479",
															"id": 1003,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2611:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
																"typeString": "literal_string \"empty\""
															},
															"value": "empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
																"typeString": "literal_string \"empty\""
															}
														],
														"id": 999,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2594:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2594:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1005,
												"nodeType": "ExpressionStatement",
												"src": "2594:25:8"
											},
											{
												"assignments": [
													1007
												],
												"declarations": [
													{
														"constant": false,
														"id": 1007,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "2637:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1068,
														"src": "2629:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1006,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2629:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1011,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1010,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1008,
														"name": "amountEach",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 991,
														"src": "2645:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1009,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 995,
														"src": "2658:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2645:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2629:32:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1016,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2761:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1017,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2765:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2761:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1020,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2781:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_BatchSender_$1728",
																		"typeString": "contract BatchSender"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_BatchSender_$1728",
																		"typeString": "contract BatchSender"
																	}
																],
																"id": 1019,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2773:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1018,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2773:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1021,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2773:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1022,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "2788:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1013,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 986,
																	"src": "2737:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1012,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 315,
																"src": "2730:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$315_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2730:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														"id": 1015,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2744:16:8",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 387,
														"src": "2730:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$315_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1023,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2730:64:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1024,
												"nodeType": "ExpressionStatement",
												"src": "2730:64:8"
											},
											{
												"body": {
													"id": 1058,
													"nodeType": "Block",
													"src": "2835:154:8",
													"statements": [
														{
															"assignments": [
																1035
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1035,
																	"mutability": "mutable",
																	"name": "to",
																	"nameLocation": "2857:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1058,
																	"src": "2849:10:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1034,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2849:7:8",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1039,
															"initialValue": {
																"baseExpression": {
																	"id": 1036,
																	"name": "recipients",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 989,
																	"src": "2862:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																		"typeString": "address[] calldata"
																	}
																},
																"id": 1038,
																"indexExpression": {
																	"id": 1037,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1026,
																	"src": "2873:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2862:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2849:26:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1046,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1041,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1035,
																			"src": "2897:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 1044,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2911:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 1043,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2903:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1042,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "2903:7:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1045,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2903:10:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "2897:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "746f3d30",
																		"id": 1047,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2915:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
																			"typeString": "literal_string \"to=0\""
																		},
																		"value": "to=0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
																			"typeString": "literal_string \"to=0\""
																		}
																	],
																	"id": 1040,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "2889:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1048,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2889:33:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1049,
															"nodeType": "ExpressionStatement",
															"src": "2889:33:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1054,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1035,
																		"src": "2963:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1055,
																		"name": "amountEach",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 991,
																		"src": "2967:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1051,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 986,
																				"src": "2943:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1050,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "2936:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$315_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1052,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2936:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1053,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2950:12:8",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 360,
																	"src": "2936:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$315_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1056,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2936:42:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1057,
															"nodeType": "ExpressionStatement",
															"src": "2936:42:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1028,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1026,
														"src": "2821:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1029,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 995,
														"src": "2825:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2821:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1059,
												"initializationExpression": {
													"assignments": [
														1026
													],
													"declarations": [
														{
															"constant": false,
															"id": 1026,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2818:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1059,
															"src": "2810:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1025,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2810:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1027,
													"nodeType": "VariableDeclarationStatement",
													"src": "2810:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1032,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "2830:3:8",
														"subExpression": {
															"id": 1031,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1026,
															"src": "2832:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1033,
													"nodeType": "ExpressionStatement",
													"src": "2830:3:8"
												},
												"nodeType": "ForStatement",
												"src": "2805:184:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1061,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3019:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3023:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3019:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1063,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 986,
															"src": "3031:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1064,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 995,
															"src": "3038:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1065,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "3043:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1060,
														"name": "BatchTokenSent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 872,
														"src": "3004:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3004:45:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1067,
												"nodeType": "EmitStatement",
												"src": "2999:50:8"
											}
										]
									},
									"documentation": {
										"id": 984,
										"nodeType": "StructuredDocumentation",
										"src": "2367:72:8",
										"text": "@notice Distribute `amountEach` of `token` to every `recipients[i]`."
									},
									"functionSelector": "4d2ee433",
									"id": 1069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendTokenEqual",
									"nameLocation": "2453:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2476:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "2468:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2468:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "2502:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "2483:29:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 987,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2483:7:8",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 988,
													"nodeType": "ArrayTypeName",
													"src": "2483:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "amountEach",
												"nameLocation": "2522:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "2514:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2514:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2467:66:8"
									},
									"returnParameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2543:0:8"
									},
									"scope": 1728,
									"src": "2444:612:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1146,
										"nodeType": "Block",
										"src": "3238:409:8",
										"statements": [
											{
												"assignments": [
													1081
												],
												"declarations": [
													{
														"constant": false,
														"id": 1081,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "3256:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1146,
														"src": "3248:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1080,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3248:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1084,
												"initialValue": {
													"expression": {
														"id": 1082,
														"name": "fids",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1075,
														"src": "3262:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
															"typeString": "uint256[] calldata"
														}
													},
													"id": 1083,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3267:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "3262:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3248:25:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1086,
																"name": "len",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1081,
																"src": "3291:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3297:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3291:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "656d707479",
															"id": 1089,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3300:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
																"typeString": "literal_string \"empty\""
															},
															"value": "empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
																"typeString": "literal_string \"empty\""
															}
														],
														"id": 1085,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3283:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3283:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1091,
												"nodeType": "ExpressionStatement",
												"src": "3283:25:8"
											},
											{
												"assignments": [
													1093
												],
												"declarations": [
													{
														"constant": false,
														"id": 1093,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "3326:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1146,
														"src": "3318:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1092,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3318:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1097,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1094,
														"name": "amountEach",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "3334:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1095,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1081,
														"src": "3347:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3334:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3318:32:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1102,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3392:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3396:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3392:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1106,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3412:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_BatchSender_$1728",
																		"typeString": "contract BatchSender"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_BatchSender_$1728",
																		"typeString": "contract BatchSender"
																	}
																],
																"id": 1105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3404:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1104,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3404:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3404:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1108,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1093,
															"src": "3419:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1099,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1072,
																	"src": "3368:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1098,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 315,
																"src": "3361:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$315_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3361:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														"id": 1101,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3375:16:8",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 387,
														"src": "3361:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$315_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3361:64:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1110,
												"nodeType": "ExpressionStatement",
												"src": "3361:64:8"
											},
											{
												"body": {
													"id": 1136,
													"nodeType": "Block",
													"src": "3466:114:8",
													"statements": [
														{
															"assignments": [
																1121
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1121,
																	"mutability": "mutable",
																	"name": "to",
																	"nameLocation": "3488:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1136,
																	"src": "3480:10:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1120,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3480:7:8",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1127,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1123,
																			"name": "fids",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1075,
																			"src": "3505:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 1125,
																		"indexExpression": {
																			"id": 1124,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1112,
																			"src": "3510:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3505:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1122,
																	"name": "_resolveFid",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "3493:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 1126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3493:20:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3480:33:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1132,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1121,
																		"src": "3554:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1133,
																		"name": "amountEach",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "3558:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1129,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1072,
																				"src": "3534:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1128,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "3527:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$315_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1130,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3527:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3541:12:8",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 360,
																	"src": "3527:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$315_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1134,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3527:42:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1135,
															"nodeType": "ExpressionStatement",
															"src": "3527:42:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1114,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "3452:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1115,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1081,
														"src": "3456:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3452:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1137,
												"initializationExpression": {
													"assignments": [
														1112
													],
													"declarations": [
														{
															"constant": false,
															"id": 1112,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "3449:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1137,
															"src": "3441:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1111,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3441:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1113,
													"nodeType": "VariableDeclarationStatement",
													"src": "3441:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1118,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "3461:3:8",
														"subExpression": {
															"id": 1117,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1112,
															"src": "3463:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1119,
													"nodeType": "ExpressionStatement",
													"src": "3461:3:8"
												},
												"nodeType": "ForStatement",
												"src": "3436:144:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1139,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3610:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3614:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3610:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1141,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1072,
															"src": "3622:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1142,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1081,
															"src": "3629:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1143,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1093,
															"src": "3634:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1138,
														"name": "BatchTokenSent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 872,
														"src": "3595:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3595:45:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1145,
												"nodeType": "EmitStatement",
												"src": "3590:50:8"
											}
										]
									},
									"documentation": {
										"id": 1070,
										"nodeType": "StructuredDocumentation",
										"src": "3062:73:8",
										"text": "@notice Distribute `amountEach` of `token` to FID-resolved addresses."
									},
									"functionSelector": "54ec9841",
									"id": 1147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendTokenEqualByFid",
									"nameLocation": "3149:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3177:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "3169:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1071,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3169:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "fids",
												"nameLocation": "3203:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "3184:23:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1073,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3184:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1074,
													"nodeType": "ArrayTypeName",
													"src": "3184:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "amountEach",
												"nameLocation": "3217:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "3209:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3209:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3168:60:8"
									},
									"returnParameters": {
										"id": 1079,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3238:0:8"
									},
									"scope": 1728,
									"src": "3140:507:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1253,
										"nodeType": "Block",
										"src": "3887:528:8",
										"statements": [
											{
												"assignments": [
													1160
												],
												"declarations": [
													{
														"constant": false,
														"id": 1160,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "3905:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1253,
														"src": "3897:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1159,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3897:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1163,
												"initialValue": {
													"expression": {
														"id": 1161,
														"name": "recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1153,
														"src": "3911:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 1162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3922:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "3911:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3897:31:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1165,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1160,
																	"src": "3946:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1166,
																		"name": "amounts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1156,
																		"src": "3953:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	"id": 1167,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3961:6:8",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "3953:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3946:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1169,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1160,
																	"src": "3971:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1170,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3977:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "3971:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3946:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6c656e206d69736d61746368",
															"id": 1173,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3980:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0e352347f105e53d1683898051fa1900c2627846e8fa6a2123e59ec4885206f8",
																"typeString": "literal_string \"len mismatch\""
															},
															"value": "len mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0e352347f105e53d1683898051fa1900c2627846e8fa6a2123e59ec4885206f8",
																"typeString": "literal_string \"len mismatch\""
															}
														],
														"id": 1164,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3938:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3938:57:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1175,
												"nodeType": "ExpressionStatement",
												"src": "3938:57:8"
											},
											{
												"assignments": [
													1177
												],
												"declarations": [
													{
														"constant": false,
														"id": 1177,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "4014:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1253,
														"src": "4006:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1176,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4006:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1178,
												"nodeType": "VariableDeclarationStatement",
												"src": "4006:13:8"
											},
											{
												"body": {
													"expression": {
														"id": 1192,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1188,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1177,
															"src": "4059:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"baseExpression": {
																"id": 1189,
																"name": "amounts",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1156,
																"src": "4068:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																	"typeString": "uint256[] calldata"
																}
															},
															"id": 1191,
															"indexExpression": {
																"id": 1190,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1180,
																"src": "4076:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4068:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4059:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1193,
													"nodeType": "ExpressionStatement",
													"src": "4059:19:8"
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1182,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1180,
														"src": "4045:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1183,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1160,
														"src": "4049:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4045:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1194,
												"initializationExpression": {
													"assignments": [
														1180
													],
													"declarations": [
														{
															"constant": false,
															"id": 1180,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4042:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1194,
															"src": "4034:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1179,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4034:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1181,
													"nodeType": "VariableDeclarationStatement",
													"src": "4034:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "4054:3:8",
														"subExpression": {
															"id": 1185,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1180,
															"src": "4056:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1187,
													"nodeType": "ExpressionStatement",
													"src": "4054:3:8"
												},
												"nodeType": "ForStatement",
												"src": "4029:49:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1199,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4120:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4124:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4120:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1203,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4140:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_BatchSender_$1728",
																		"typeString": "contract BatchSender"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_BatchSender_$1728",
																		"typeString": "contract BatchSender"
																	}
																],
																"id": 1202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4132:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1201,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4132:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4132:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1205,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1177,
															"src": "4147:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1196,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1150,
																	"src": "4096:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1195,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 315,
																"src": "4089:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$315_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4089:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														"id": 1198,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4103:16:8",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 387,
														"src": "4089:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$315_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4089:64:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1207,
												"nodeType": "ExpressionStatement",
												"src": "4089:64:8"
											},
											{
												"body": {
													"id": 1243,
													"nodeType": "Block",
													"src": "4194:154:8",
													"statements": [
														{
															"assignments": [
																1218
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1218,
																	"mutability": "mutable",
																	"name": "to",
																	"nameLocation": "4216:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1243,
																	"src": "4208:10:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1217,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4208:7:8",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1222,
															"initialValue": {
																"baseExpression": {
																	"id": 1219,
																	"name": "recipients",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1153,
																	"src": "4221:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																		"typeString": "address[] calldata"
																	}
																},
																"id": 1221,
																"indexExpression": {
																	"id": 1220,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1209,
																	"src": "4232:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4221:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4208:26:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1229,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1224,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1218,
																			"src": "4256:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 1227,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4270:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 1226,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4262:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1225,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "4262:7:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1228,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4262:10:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "4256:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "746f3d30",
																		"id": 1230,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4274:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
																			"typeString": "literal_string \"to=0\""
																		},
																		"value": "to=0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
																			"typeString": "literal_string \"to=0\""
																		}
																	],
																	"id": 1223,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4248:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1231,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4248:33:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1232,
															"nodeType": "ExpressionStatement",
															"src": "4248:33:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1237,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1218,
																		"src": "4322:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1238,
																			"name": "amounts",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1156,
																			"src": "4326:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 1240,
																		"indexExpression": {
																			"id": 1239,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1209,
																			"src": "4334:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4326:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1234,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1150,
																				"src": "4302:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1233,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "4295:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$315_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1235,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4295:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4309:12:8",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 360,
																	"src": "4295:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$315_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1241,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4295:42:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1242,
															"nodeType": "ExpressionStatement",
															"src": "4295:42:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1211,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1209,
														"src": "4180:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1212,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1160,
														"src": "4184:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4180:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1244,
												"initializationExpression": {
													"assignments": [
														1209
													],
													"declarations": [
														{
															"constant": false,
															"id": 1209,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4177:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1244,
															"src": "4169:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1208,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4169:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1210,
													"nodeType": "VariableDeclarationStatement",
													"src": "4169:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1215,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "4189:3:8",
														"subExpression": {
															"id": 1214,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1209,
															"src": "4191:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1216,
													"nodeType": "ExpressionStatement",
													"src": "4189:3:8"
												},
												"nodeType": "ForStatement",
												"src": "4164:184:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1246,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4378:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4382:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4378:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1248,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1150,
															"src": "4390:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1249,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1160,
															"src": "4397:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1250,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1177,
															"src": "4402:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1245,
														"name": "BatchTokenSent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 872,
														"src": "4363:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4363:45:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1252,
												"nodeType": "EmitStatement",
												"src": "4358:50:8"
											}
										]
									},
									"documentation": {
										"id": 1148,
										"nodeType": "StructuredDocumentation",
										"src": "3705:75:8",
										"text": "@notice Distribute variable `amounts[i]` of `token` to `recipients[i]`."
									},
									"functionSelector": "0a333a0f",
									"id": 1254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendToken",
									"nameLocation": "3794:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3812:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "3804:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3804:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "3838:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "3819:29:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1151,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "3819:7:8",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1152,
													"nodeType": "ArrayTypeName",
													"src": "3819:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "3869:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "3850:26:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1154,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3850:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1155,
													"nodeType": "ArrayTypeName",
													"src": "3850:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3803:74:8"
									},
									"returnParameters": {
										"id": 1158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3887:0:8"
									},
									"scope": 1728,
									"src": "3785:630:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1348,
										"nodeType": "Block",
										"src": "4609:453:8",
										"statements": [
											{
												"assignments": [
													1267
												],
												"declarations": [
													{
														"constant": false,
														"id": 1267,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "4627:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1348,
														"src": "4619:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1266,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4619:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1270,
												"initialValue": {
													"expression": {
														"id": 1268,
														"name": "fids",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1260,
														"src": "4633:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
															"typeString": "uint256[] calldata"
														}
													},
													"id": 1269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4638:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4633:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4619:25:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1279,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1275,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1272,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1267,
																	"src": "4662:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1273,
																		"name": "amounts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1263,
																		"src": "4669:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	"id": 1274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4677:6:8",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "4669:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4662:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1278,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1276,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1267,
																	"src": "4687:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1277,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4693:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "4687:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4662:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6c656e206d69736d61746368",
															"id": 1280,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4696:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0e352347f105e53d1683898051fa1900c2627846e8fa6a2123e59ec4885206f8",
																"typeString": "literal_string \"len mismatch\""
															},
															"value": "len mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0e352347f105e53d1683898051fa1900c2627846e8fa6a2123e59ec4885206f8",
																"typeString": "literal_string \"len mismatch\""
															}
														],
														"id": 1271,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4654:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4654:57:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1282,
												"nodeType": "ExpressionStatement",
												"src": "4654:57:8"
											},
											{
												"assignments": [
													1284
												],
												"declarations": [
													{
														"constant": false,
														"id": 1284,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "4730:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1348,
														"src": "4722:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1283,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4722:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1285,
												"nodeType": "VariableDeclarationStatement",
												"src": "4722:13:8"
											},
											{
												"body": {
													"expression": {
														"id": 1299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1295,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "4775:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"baseExpression": {
																"id": 1296,
																"name": "amounts",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1263,
																"src": "4784:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																	"typeString": "uint256[] calldata"
																}
															},
															"id": 1298,
															"indexExpression": {
																"id": 1297,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1287,
																"src": "4792:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4784:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4775:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1300,
													"nodeType": "ExpressionStatement",
													"src": "4775:19:8"
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1289,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1287,
														"src": "4761:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1290,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1267,
														"src": "4765:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4761:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1301,
												"initializationExpression": {
													"assignments": [
														1287
													],
													"declarations": [
														{
															"constant": false,
															"id": 1287,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4758:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1301,
															"src": "4750:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1286,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4750:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1288,
													"nodeType": "VariableDeclarationStatement",
													"src": "4750:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1293,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "4770:3:8",
														"subExpression": {
															"id": 1292,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1287,
															"src": "4772:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1294,
													"nodeType": "ExpressionStatement",
													"src": "4770:3:8"
												},
												"nodeType": "ForStatement",
												"src": "4745:49:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1306,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4836:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1307,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4840:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4836:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1310,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4856:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_BatchSender_$1728",
																		"typeString": "contract BatchSender"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_BatchSender_$1728",
																		"typeString": "contract BatchSender"
																	}
																],
																"id": 1309,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4848:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1308,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4848:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4848:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1312,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "4863:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1303,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1257,
																	"src": "4812:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1302,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 315,
																"src": "4805:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$315_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4805:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$315",
																"typeString": "contract IERC20"
															}
														},
														"id": 1305,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4819:16:8",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 387,
														"src": "4805:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$315_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4805:64:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1314,
												"nodeType": "ExpressionStatement",
												"src": "4805:64:8"
											},
											{
												"body": {
													"id": 1338,
													"nodeType": "Block",
													"src": "4910:85:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"baseExpression": {
																					"id": 1329,
																					"name": "fids",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1260,
																					"src": "4963:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																						"typeString": "uint256[] calldata"
																					}
																				},
																				"id": 1331,
																				"indexExpression": {
																					"id": 1330,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1316,
																					"src": "4968:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "4963:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1328,
																			"name": "_resolveFid",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 983,
																			"src": "4951:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																				"typeString": "function (uint256) view returns (address)"
																			}
																		},
																		"id": 1332,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4951:20:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1333,
																			"name": "amounts",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1263,
																			"src": "4973:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 1335,
																		"indexExpression": {
																			"id": 1334,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1316,
																			"src": "4981:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4973:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1325,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1257,
																				"src": "4931:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1324,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "4924:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$315_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1326,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4924:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$315",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1327,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4938:12:8",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 360,
																	"src": "4924:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$315_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$315_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1336,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4924:60:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1337,
															"nodeType": "ExpressionStatement",
															"src": "4924:60:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1318,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1316,
														"src": "4896:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1319,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1267,
														"src": "4900:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4896:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1339,
												"initializationExpression": {
													"assignments": [
														1316
													],
													"declarations": [
														{
															"constant": false,
															"id": 1316,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4893:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1339,
															"src": "4885:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1315,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4885:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1317,
													"nodeType": "VariableDeclarationStatement",
													"src": "4885:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1322,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "4905:3:8",
														"subExpression": {
															"id": 1321,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1316,
															"src": "4907:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1323,
													"nodeType": "ExpressionStatement",
													"src": "4905:3:8"
												},
												"nodeType": "ForStatement",
												"src": "4880:115:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1341,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5025:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5029:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5025:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1343,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1257,
															"src": "5037:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1344,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1267,
															"src": "5044:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1345,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "5049:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1340,
														"name": "BatchTokenSent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 872,
														"src": "5010:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5010:45:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1347,
												"nodeType": "EmitStatement",
												"src": "5005:50:8"
											}
										]
									},
									"documentation": {
										"id": 1255,
										"nodeType": "StructuredDocumentation",
										"src": "4421:82:8",
										"text": "@notice Distribute variable `amounts[i]` of `token` to FID-resolved addresses."
									},
									"functionSelector": "64914f9c",
									"id": 1349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendTokenByFid",
									"nameLocation": "4517:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4540:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "4532:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4532:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "fids",
												"nameLocation": "4566:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "4547:23:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1258,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "4547:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1259,
													"nodeType": "ArrayTypeName",
													"src": "4547:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "4591:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "4572:26:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1261,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "4572:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1262,
													"nodeType": "ArrayTypeName",
													"src": "4572:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4531:68:8"
									},
									"returnParameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4609:0:8"
									},
									"scope": 1728,
									"src": "4508:554:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1435,
										"nodeType": "Block",
										"src": "5306:476:8",
										"statements": [
											{
												"assignments": [
													1359
												],
												"declarations": [
													{
														"constant": false,
														"id": 1359,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "5324:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1435,
														"src": "5316:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1358,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5316:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1362,
												"initialValue": {
													"expression": {
														"id": 1360,
														"name": "recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1353,
														"src": "5330:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 1361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5341:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "5330:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5316:31:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1364,
																"name": "len",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1359,
																"src": "5365:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1365,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5371:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5365:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "656d707479",
															"id": 1367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5374:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
																"typeString": "literal_string \"empty\""
															},
															"value": "empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
																"typeString": "literal_string \"empty\""
															}
														],
														"id": 1363,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5357:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5357:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1369,
												"nodeType": "ExpressionStatement",
												"src": "5357:25:8"
											},
											{
												"assignments": [
													1371
												],
												"declarations": [
													{
														"constant": false,
														"id": 1371,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "5400:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1435,
														"src": "5392:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1370,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5392:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1375,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1372,
														"name": "amountEach",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1355,
														"src": "5408:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1373,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1359,
														"src": "5421:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5408:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5392:32:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1380,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1377,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5442:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1378,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5446:5:8",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "5442:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1379,
																"name": "total",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1371,
																"src": "5455:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5442:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "62616420746f74616c",
															"id": 1381,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5462:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ee137189928b7bc44fc5968da7cd5f5fd4c042547c6cb11621d56880d1110aae",
																"typeString": "literal_string \"bad total\""
															},
															"value": "bad total"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ee137189928b7bc44fc5968da7cd5f5fd4c042547c6cb11621d56880d1110aae",
																"typeString": "literal_string \"bad total\""
															}
														],
														"id": 1376,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5434:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5434:40:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1383,
												"nodeType": "ExpressionStatement",
												"src": "5434:40:8"
											},
											{
												"body": {
													"id": 1426,
													"nodeType": "Block",
													"src": "5515:209:8",
													"statements": [
														{
															"assignments": [
																1394
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1394,
																	"mutability": "mutable",
																	"name": "to",
																	"nameLocation": "5537:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1426,
																	"src": "5529:10:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1393,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5529:7:8",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1398,
															"initialValue": {
																"baseExpression": {
																	"id": 1395,
																	"name": "recipients",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1353,
																	"src": "5542:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																		"typeString": "address[] calldata"
																	}
																},
																"id": 1397,
																"indexExpression": {
																	"id": 1396,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1385,
																	"src": "5553:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5542:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5529:26:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1405,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1400,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1394,
																			"src": "5577:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 1403,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "5591:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 1402,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5583:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1401,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "5583:7:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5583:10:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "5577:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "746f3d30",
																		"id": 1406,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5595:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
																			"typeString": "literal_string \"to=0\""
																		},
																		"value": "to=0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
																			"typeString": "literal_string \"to=0\""
																		}
																	],
																	"id": 1399,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5569:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1407,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5569:33:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1408,
															"nodeType": "ExpressionStatement",
															"src": "5569:33:8"
														},
														{
															"assignments": [
																1410,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1410,
																	"mutability": "mutable",
																	"name": "ok",
																	"nameLocation": "5622:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1426,
																	"src": "5617:7:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1409,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "5617:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 1420,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 1418,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5666:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1413,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1394,
																					"src": "5638:2:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1412,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5630:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 1411,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "5630:8:8",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1414,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5630:11:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 1415,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5642:4:8",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "5630:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 1417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 1416,
																			"name": "amountEach",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1355,
																			"src": "5654:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "5630:35:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 1419,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5630:39:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5616:53:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1422,
																		"name": "ok",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1410,
																		"src": "5691:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "6574682073656e64206661696c6564",
																		"id": 1423,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5695:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a89848c6d332ffaff3dde638406e7a4a63d28071304ef31e7edea170d62dab79",
																			"typeString": "literal_string \"eth send failed\""
																		},
																		"value": "eth send failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a89848c6d332ffaff3dde638406e7a4a63d28071304ef31e7edea170d62dab79",
																			"typeString": "literal_string \"eth send failed\""
																		}
																	],
																	"id": 1421,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5683:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1424,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5683:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1425,
															"nodeType": "ExpressionStatement",
															"src": "5683:30:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1387,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1385,
														"src": "5501:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1388,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1359,
														"src": "5505:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5501:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1427,
												"initializationExpression": {
													"assignments": [
														1385
													],
													"declarations": [
														{
															"constant": false,
															"id": 1385,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "5498:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1427,
															"src": "5490:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1384,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5490:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1386,
													"nodeType": "VariableDeclarationStatement",
													"src": "5490:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1391,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "5510:3:8",
														"subExpression": {
															"id": 1390,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1385,
															"src": "5512:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1392,
													"nodeType": "ExpressionStatement",
													"src": "5510:3:8"
												},
												"nodeType": "ForStatement",
												"src": "5485:239:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1429,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5752:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1430,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5756:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5752:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1431,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "5764:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1432,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1371,
															"src": "5769:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1428,
														"name": "BatchEthSent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 880,
														"src": "5739:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 1433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5739:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1434,
												"nodeType": "EmitStatement",
												"src": "5734:41:8"
											}
										]
									},
									"documentation": {
										"id": 1350,
										"nodeType": "StructuredDocumentation",
										"src": "5115:96:8",
										"text": "@notice Distribute equal `amountEach` ETH to `recipients`. Provide exact total in msg.value."
									},
									"functionSelector": "096d945b",
									"id": 1436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendEtHEqual",
									"nameLocation": "5225:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "5257:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "5238:29:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1351,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5238:7:8",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1352,
													"nodeType": "ArrayTypeName",
													"src": "5238:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "amountEach",
												"nameLocation": "5277:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "5269:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5269:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5237:51:8"
									},
									"returnParameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5306:0:8"
									},
									"scope": 1728,
									"src": "5216:566:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1514,
										"nodeType": "Block",
										"src": "5954:430:8",
										"statements": [
											{
												"assignments": [
													1446
												],
												"declarations": [
													{
														"constant": false,
														"id": 1446,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "5972:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1514,
														"src": "5964:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1445,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5964:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1449,
												"initialValue": {
													"expression": {
														"id": 1447,
														"name": "fids",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1440,
														"src": "5978:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
															"typeString": "uint256[] calldata"
														}
													},
													"id": 1448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5983:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "5978:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5964:25:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1451,
																"name": "len",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1446,
																"src": "6007:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1452,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6013:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6007:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "656d707479",
															"id": 1454,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6016:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
																"typeString": "literal_string \"empty\""
															},
															"value": "empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_61fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80",
																"typeString": "literal_string \"empty\""
															}
														],
														"id": 1450,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5999:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5999:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1456,
												"nodeType": "ExpressionStatement",
												"src": "5999:25:8"
											},
											{
												"assignments": [
													1458
												],
												"declarations": [
													{
														"constant": false,
														"id": 1458,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "6042:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1514,
														"src": "6034:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1457,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6034:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1462,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1459,
														"name": "amountEach",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1442,
														"src": "6050:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1460,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1446,
														"src": "6063:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6050:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6034:32:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1467,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1464,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6084:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6088:5:8",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "6084:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1466,
																"name": "total",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1458,
																"src": "6097:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6084:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "62616420746f74616c",
															"id": 1468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6104:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ee137189928b7bc44fc5968da7cd5f5fd4c042547c6cb11621d56880d1110aae",
																"typeString": "literal_string \"bad total\""
															},
															"value": "bad total"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ee137189928b7bc44fc5968da7cd5f5fd4c042547c6cb11621d56880d1110aae",
																"typeString": "literal_string \"bad total\""
															}
														],
														"id": 1463,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6076:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6076:40:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1470,
												"nodeType": "ExpressionStatement",
												"src": "6076:40:8"
											},
											{
												"body": {
													"id": 1505,
													"nodeType": "Block",
													"src": "6157:169:8",
													"statements": [
														{
															"assignments": [
																1481
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1481,
																	"mutability": "mutable",
																	"name": "to",
																	"nameLocation": "6179:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1505,
																	"src": "6171:10:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1480,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6171:7:8",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1487,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1483,
																			"name": "fids",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1440,
																			"src": "6196:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 1485,
																		"indexExpression": {
																			"id": 1484,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1472,
																			"src": "6201:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6196:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1482,
																	"name": "_resolveFid",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "6184:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 1486,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6184:20:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6171:33:8"
														},
														{
															"assignments": [
																1489,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1489,
																	"mutability": "mutable",
																	"name": "ok",
																	"nameLocation": "6224:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1505,
																	"src": "6219:7:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1488,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "6219:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 1499,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 1497,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6268:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1492,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1481,
																					"src": "6240:2:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1491,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6232:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 1490,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6232:8:8",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1493,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6232:11:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 1494,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6244:4:8",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "6232:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 1496,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 1495,
																			"name": "amountEach",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1442,
																			"src": "6256:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "6232:35:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 1498,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6232:39:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6218:53:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1501,
																		"name": "ok",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1489,
																		"src": "6293:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "6574682073656e64206661696c6564",
																		"id": 1502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6297:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a89848c6d332ffaff3dde638406e7a4a63d28071304ef31e7edea170d62dab79",
																			"typeString": "literal_string \"eth send failed\""
																		},
																		"value": "eth send failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a89848c6d332ffaff3dde638406e7a4a63d28071304ef31e7edea170d62dab79",
																			"typeString": "literal_string \"eth send failed\""
																		}
																	],
																	"id": 1500,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "6285:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6285:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1504,
															"nodeType": "ExpressionStatement",
															"src": "6285:30:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1474,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1472,
														"src": "6143:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1475,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1446,
														"src": "6147:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6143:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1506,
												"initializationExpression": {
													"assignments": [
														1472
													],
													"declarations": [
														{
															"constant": false,
															"id": 1472,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6140:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1506,
															"src": "6132:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1471,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6132:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1473,
													"nodeType": "VariableDeclarationStatement",
													"src": "6132:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1478,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "6152:3:8",
														"subExpression": {
															"id": 1477,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1472,
															"src": "6154:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1479,
													"nodeType": "ExpressionStatement",
													"src": "6152:3:8"
												},
												"nodeType": "ForStatement",
												"src": "6127:199:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1508,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6354:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1509,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6358:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6354:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1510,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1446,
															"src": "6366:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1511,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "6371:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1507,
														"name": "BatchEthSent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 880,
														"src": "6341:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 1512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6341:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1513,
												"nodeType": "EmitStatement",
												"src": "6336:41:8"
											}
										]
									},
									"documentation": {
										"id": 1437,
										"nodeType": "StructuredDocumentation",
										"src": "5788:72:8",
										"text": "@notice Distribute equal `amountEach` ETH to FID-resolved addresses."
									},
									"functionSelector": "8a63ba8e",
									"id": 1515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendEtHEqualByFid",
									"nameLocation": "5874:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "fids",
												"nameLocation": "5911:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "5892:23:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1438,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5892:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1439,
													"nodeType": "ArrayTypeName",
													"src": "5892:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1442,
												"mutability": "mutable",
												"name": "amountEach",
												"nameLocation": "5925:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1515,
												"src": "5917:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5917:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:45:8"
									},
									"returnParameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5954:0:8"
									},
									"scope": 1728,
									"src": "5865:519:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1622,
										"nodeType": "Block",
										"src": "6640:549:8",
										"statements": [
											{
												"assignments": [
													1526
												],
												"declarations": [
													{
														"constant": false,
														"id": 1526,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "6658:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1622,
														"src": "6650:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1525,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6650:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1529,
												"initialValue": {
													"expression": {
														"id": 1527,
														"name": "recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1519,
														"src": "6664:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 1528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6675:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "6664:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6650:31:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1531,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1526,
																	"src": "6699:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1532,
																		"name": "amounts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1522,
																		"src": "6706:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	"id": 1533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6714:6:8",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6706:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6699:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1537,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1535,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1526,
																	"src": "6724:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1536,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6730:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6724:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "6699:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6c656e206d69736d61746368",
															"id": 1539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6733:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0e352347f105e53d1683898051fa1900c2627846e8fa6a2123e59ec4885206f8",
																"typeString": "literal_string \"len mismatch\""
															},
															"value": "len mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0e352347f105e53d1683898051fa1900c2627846e8fa6a2123e59ec4885206f8",
																"typeString": "literal_string \"len mismatch\""
															}
														],
														"id": 1530,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6691:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6691:57:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1541,
												"nodeType": "ExpressionStatement",
												"src": "6691:57:8"
											},
											{
												"assignments": [
													1543
												],
												"declarations": [
													{
														"constant": false,
														"id": 1543,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "6767:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1622,
														"src": "6759:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1542,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6759:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1544,
												"nodeType": "VariableDeclarationStatement",
												"src": "6759:13:8"
											},
											{
												"body": {
													"expression": {
														"id": 1558,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1554,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1543,
															"src": "6812:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"baseExpression": {
																"id": 1555,
																"name": "amounts",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1522,
																"src": "6821:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																	"typeString": "uint256[] calldata"
																}
															},
															"id": 1557,
															"indexExpression": {
																"id": 1556,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1546,
																"src": "6829:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6821:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "6812:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1559,
													"nodeType": "ExpressionStatement",
													"src": "6812:19:8"
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1548,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1546,
														"src": "6798:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1549,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1526,
														"src": "6802:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6798:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1560,
												"initializationExpression": {
													"assignments": [
														1546
													],
													"declarations": [
														{
															"constant": false,
															"id": 1546,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6795:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1560,
															"src": "6787:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1545,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6787:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1547,
													"nodeType": "VariableDeclarationStatement",
													"src": "6787:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1552,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "6807:3:8",
														"subExpression": {
															"id": 1551,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1546,
															"src": "6809:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1553,
													"nodeType": "ExpressionStatement",
													"src": "6807:3:8"
												},
												"nodeType": "ForStatement",
												"src": "6782:49:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1565,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1562,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6849:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1563,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6853:5:8",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "6849:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1564,
																"name": "total",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1543,
																"src": "6862:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6849:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "62616420746f74616c",
															"id": 1566,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6869:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ee137189928b7bc44fc5968da7cd5f5fd4c042547c6cb11621d56880d1110aae",
																"typeString": "literal_string \"bad total\""
															},
															"value": "bad total"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ee137189928b7bc44fc5968da7cd5f5fd4c042547c6cb11621d56880d1110aae",
																"typeString": "literal_string \"bad total\""
															}
														],
														"id": 1561,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6841:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6841:40:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1568,
												"nodeType": "ExpressionStatement",
												"src": "6841:40:8"
											},
											{
												"body": {
													"id": 1613,
													"nodeType": "Block",
													"src": "6922:209:8",
													"statements": [
														{
															"assignments": [
																1579
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1579,
																	"mutability": "mutable",
																	"name": "to",
																	"nameLocation": "6944:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1613,
																	"src": "6936:10:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1578,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6936:7:8",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1583,
															"initialValue": {
																"baseExpression": {
																	"id": 1580,
																	"name": "recipients",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1519,
																	"src": "6949:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																		"typeString": "address[] calldata"
																	}
																},
																"id": 1582,
																"indexExpression": {
																	"id": 1581,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1570,
																	"src": "6960:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6949:13:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6936:26:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1590,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1585,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1579,
																			"src": "6984:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 1588,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6998:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 1587,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6990:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1586,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6990:7:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1589,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6990:10:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "6984:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "746f3d30",
																		"id": 1591,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7002:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
																			"typeString": "literal_string \"to=0\""
																		},
																		"value": "to=0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
																			"typeString": "literal_string \"to=0\""
																		}
																	],
																	"id": 1584,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "6976:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1592,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6976:33:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1593,
															"nodeType": "ExpressionStatement",
															"src": "6976:33:8"
														},
														{
															"assignments": [
																1595,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1595,
																	"mutability": "mutable",
																	"name": "ok",
																	"nameLocation": "7029:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1613,
																	"src": "7024:7:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1594,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "7024:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 1607,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 1605,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7073:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1598,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1579,
																					"src": "7045:2:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1597,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7037:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 1596,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7037:8:8",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1599,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7037:11:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 1600,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7049:4:8",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "7037:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 1604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"baseExpression": {
																				"id": 1601,
																				"name": "amounts",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1522,
																				"src": "7061:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																					"typeString": "uint256[] calldata"
																				}
																			},
																			"id": 1603,
																			"indexExpression": {
																				"id": 1602,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1570,
																				"src": "7069:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7061:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "7037:35:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 1606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7037:39:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7023:53:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1609,
																		"name": "ok",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1595,
																		"src": "7098:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "6574682073656e64206661696c6564",
																		"id": 1610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7102:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a89848c6d332ffaff3dde638406e7a4a63d28071304ef31e7edea170d62dab79",
																			"typeString": "literal_string \"eth send failed\""
																		},
																		"value": "eth send failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a89848c6d332ffaff3dde638406e7a4a63d28071304ef31e7edea170d62dab79",
																			"typeString": "literal_string \"eth send failed\""
																		}
																	],
																	"id": 1608,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "7090:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1611,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7090:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1612,
															"nodeType": "ExpressionStatement",
															"src": "7090:30:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1572,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1570,
														"src": "6908:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1573,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1526,
														"src": "6912:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6908:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1614,
												"initializationExpression": {
													"assignments": [
														1570
													],
													"declarations": [
														{
															"constant": false,
															"id": 1570,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6905:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1614,
															"src": "6897:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1569,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6897:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1571,
													"nodeType": "VariableDeclarationStatement",
													"src": "6897:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1576,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "6917:3:8",
														"subExpression": {
															"id": 1575,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1570,
															"src": "6919:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1577,
													"nodeType": "ExpressionStatement",
													"src": "6917:3:8"
												},
												"nodeType": "ForStatement",
												"src": "6892:239:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1616,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7159:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7163:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7159:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1618,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1526,
															"src": "7171:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1619,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1543,
															"src": "7176:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1615,
														"name": "BatchEthSent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 880,
														"src": "7146:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 1620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7146:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1621,
												"nodeType": "EmitStatement",
												"src": "7141:41:8"
											}
										]
									},
									"documentation": {
										"id": 1516,
										"nodeType": "StructuredDocumentation",
										"src": "6440:102:8",
										"text": "@notice Distribute variable `amounts[i]` ETH to `recipients[i]`. Provide exact total in msg.value."
									},
									"functionSelector": "c4142fb6",
									"id": 1623,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendEtH",
									"nameLocation": "6556:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "6583:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1623,
												"src": "6564:29:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1517,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "6564:7:8",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1518,
													"nodeType": "ArrayTypeName",
													"src": "6564:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "6614:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1623,
												"src": "6595:26:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1520,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6595:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1521,
													"nodeType": "ArrayTypeName",
													"src": "6595:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6563:59:8"
									},
									"returnParameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6640:0:8"
									},
									"scope": 1728,
									"src": "6547:642:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1722,
										"nodeType": "Block",
										"src": "7367:503:8",
										"statements": [
											{
												"assignments": [
													1634
												],
												"declarations": [
													{
														"constant": false,
														"id": 1634,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "7385:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1722,
														"src": "7377:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1633,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7377:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1637,
												"initialValue": {
													"expression": {
														"id": 1635,
														"name": "fids",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1627,
														"src": "7391:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
															"typeString": "uint256[] calldata"
														}
													},
													"id": 1636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7396:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "7391:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7377:25:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1646,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1642,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1639,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1634,
																	"src": "7420:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1640,
																		"name": "amounts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1630,
																		"src": "7427:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	"id": 1641,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7435:6:8",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7427:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7420:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1645,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1643,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1634,
																	"src": "7445:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1644,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7451:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7445:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "7420:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6c656e206d69736d61746368",
															"id": 1647,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7454:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0e352347f105e53d1683898051fa1900c2627846e8fa6a2123e59ec4885206f8",
																"typeString": "literal_string \"len mismatch\""
															},
															"value": "len mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0e352347f105e53d1683898051fa1900c2627846e8fa6a2123e59ec4885206f8",
																"typeString": "literal_string \"len mismatch\""
															}
														],
														"id": 1638,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7412:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7412:57:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1649,
												"nodeType": "ExpressionStatement",
												"src": "7412:57:8"
											},
											{
												"assignments": [
													1651
												],
												"declarations": [
													{
														"constant": false,
														"id": 1651,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "7488:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1722,
														"src": "7480:13:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1650,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7480:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1652,
												"nodeType": "VariableDeclarationStatement",
												"src": "7480:13:8"
											},
											{
												"body": {
													"expression": {
														"id": 1666,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1662,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "7533:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"baseExpression": {
																"id": 1663,
																"name": "amounts",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1630,
																"src": "7542:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																	"typeString": "uint256[] calldata"
																}
															},
															"id": 1665,
															"indexExpression": {
																"id": 1664,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1654,
																"src": "7550:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7542:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "7533:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1667,
													"nodeType": "ExpressionStatement",
													"src": "7533:19:8"
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1656,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1654,
														"src": "7519:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1657,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1634,
														"src": "7523:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7519:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1668,
												"initializationExpression": {
													"assignments": [
														1654
													],
													"declarations": [
														{
															"constant": false,
															"id": 1654,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "7516:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1668,
															"src": "7508:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1653,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7508:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1655,
													"nodeType": "VariableDeclarationStatement",
													"src": "7508:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1660,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "7528:3:8",
														"subExpression": {
															"id": 1659,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1654,
															"src": "7530:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1661,
													"nodeType": "ExpressionStatement",
													"src": "7528:3:8"
												},
												"nodeType": "ForStatement",
												"src": "7503:49:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1673,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1670,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "7570:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1671,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7574:5:8",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "7570:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1672,
																"name": "total",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1651,
																"src": "7583:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7570:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "62616420746f74616c",
															"id": 1674,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7590:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ee137189928b7bc44fc5968da7cd5f5fd4c042547c6cb11621d56880d1110aae",
																"typeString": "literal_string \"bad total\""
															},
															"value": "bad total"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ee137189928b7bc44fc5968da7cd5f5fd4c042547c6cb11621d56880d1110aae",
																"typeString": "literal_string \"bad total\""
															}
														],
														"id": 1669,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7562:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1675,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7562:40:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1676,
												"nodeType": "ExpressionStatement",
												"src": "7562:40:8"
											},
											{
												"body": {
													"id": 1713,
													"nodeType": "Block",
													"src": "7643:169:8",
													"statements": [
														{
															"assignments": [
																1687
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1687,
																	"mutability": "mutable",
																	"name": "to",
																	"nameLocation": "7665:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1713,
																	"src": "7657:10:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1686,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7657:7:8",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1693,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1689,
																			"name": "fids",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1627,
																			"src": "7682:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 1691,
																		"indexExpression": {
																			"id": 1690,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1678,
																			"src": "7687:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7682:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1688,
																	"name": "_resolveFid",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "7670:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 1692,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7670:20:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7657:33:8"
														},
														{
															"assignments": [
																1695,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1695,
																	"mutability": "mutable",
																	"name": "ok",
																	"nameLocation": "7710:2:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1713,
																	"src": "7705:7:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1694,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "7705:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 1707,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 1705,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7754:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1698,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1687,
																					"src": "7726:2:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1697,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7718:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_payable_$",
																					"typeString": "type(address payable)"
																				},
																				"typeName": {
																					"id": 1696,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7718:8:8",
																					"stateMutability": "payable",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1699,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7718:11:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 1700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7730:4:8",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "7718:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 1704,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"baseExpression": {
																				"id": 1701,
																				"name": "amounts",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1630,
																				"src": "7742:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																					"typeString": "uint256[] calldata"
																				}
																			},
																			"id": 1703,
																			"indexExpression": {
																				"id": 1702,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1678,
																				"src": "7750:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7742:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "7718:35:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 1706,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7718:39:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7704:53:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1709,
																		"name": "ok",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1695,
																		"src": "7779:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "6574682073656e64206661696c6564",
																		"id": 1710,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7783:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a89848c6d332ffaff3dde638406e7a4a63d28071304ef31e7edea170d62dab79",
																			"typeString": "literal_string \"eth send failed\""
																		},
																		"value": "eth send failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a89848c6d332ffaff3dde638406e7a4a63d28071304ef31e7edea170d62dab79",
																			"typeString": "literal_string \"eth send failed\""
																		}
																	],
																	"id": 1708,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "7771:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1711,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7771:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1712,
															"nodeType": "ExpressionStatement",
															"src": "7771:30:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1680,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1678,
														"src": "7629:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1681,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1634,
														"src": "7633:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7629:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1714,
												"initializationExpression": {
													"assignments": [
														1678
													],
													"declarations": [
														{
															"constant": false,
															"id": 1678,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "7626:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1714,
															"src": "7618:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1677,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7618:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1679,
													"nodeType": "VariableDeclarationStatement",
													"src": "7618:9:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1684,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "7638:3:8",
														"subExpression": {
															"id": 1683,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1678,
															"src": "7640:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1685,
													"nodeType": "ExpressionStatement",
													"src": "7638:3:8"
												},
												"nodeType": "ForStatement",
												"src": "7613:199:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1716,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7840:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7844:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7840:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1718,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1634,
															"src": "7852:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1719,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "7857:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1715,
														"name": "BatchEthSent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 880,
														"src": "7827:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 1720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7827:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1721,
												"nodeType": "EmitStatement",
												"src": "7822:41:8"
											}
										]
									},
									"documentation": {
										"id": 1624,
										"nodeType": "StructuredDocumentation",
										"src": "7195:75:8",
										"text": "@notice Distribute variable `amounts[i]` ETH to FID-resolved addresses."
									},
									"functionSelector": "da923324",
									"id": 1723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendEtHByFid",
									"nameLocation": "7284:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1627,
												"mutability": "mutable",
												"name": "fids",
												"nameLocation": "7316:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "7297:23:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1625,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "7297:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1626,
													"nodeType": "ArrayTypeName",
													"src": "7297:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1630,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "7341:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "7322:26:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1628,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "7322:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1629,
													"nodeType": "ArrayTypeName",
													"src": "7322:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7296:53:8"
									},
									"returnParameters": {
										"id": 1632,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7367:0:8"
									},
									"scope": 1728,
									"src": "7275:595:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1726,
										"nodeType": "Block",
										"src": "7996:2:8",
										"statements": []
									},
									"id": 1727,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7976:2:8"
									},
									"returnParameters": {
										"id": 1725,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7996:0:8"
									},
									"scope": 1728,
									"src": "7969:29:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1729,
							"src": "1116:6884:8",
							"usedErrors": [
								13,
								18,
								327
							],
							"usedEvents": [
								24,
								862,
								872,
								880
							]
						}
					],
					"src": "32:7969:8"
				},
				"id": 8
			}
		}
	}
}