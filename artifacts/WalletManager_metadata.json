{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userVaultImplementation",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AlreadyHasVault",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedDeployment",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FidAlreadyLinked",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FidNotLinked",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImplementationNotSet",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OwnerAlreadyLinked",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "VaultNotFound",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroAddress",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "fid",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "FidLinked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "fid",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					}
				],
				"name": "FidUnlinked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "UserVaultImplementationUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "fid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "vault",
						"type": "address"
					}
				],
				"name": "WalletCreated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "fid_",
						"type": "uint256"
					}
				],
				"name": "createWallet",
				"outputs": [
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "fidToOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "fid_",
						"type": "uint256"
					}
				],
				"name": "getOwnerByFid",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					}
				],
				"name": "getVault",
				"outputs": [
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "fid_",
						"type": "uint256"
					}
				],
				"name": "getVaultByFid",
				"outputs": [
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "fid_",
						"type": "uint256"
					}
				],
				"name": "linkFarcasterId",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "ownerToFid",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "ownerToVault",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_implementation",
						"type": "address"
					}
				],
				"name": "setUserVaultImplementation",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unlinkFarcasterId",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "userVaultImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"FailedDeployment()": [
					{
						"details": "The deployment failed."
					}
				],
				"InsufficientBalance(uint256,uint256)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"ZeroAddress()": [
					{
						"details": "Basic errors to keep bytecode lean."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"createWallet(address,uint256)": {
					"details": "Reverts if owner already has a vault. If fid_ > 0, also links the FID.",
					"params": {
						"fid_": "Farcaster ID to link (use 0 to skip linking).",
						"owner_": "The EOA or smart account that will control the new vault."
					},
					"returns": {
						"vault": " The address of the newly created vault clone."
					}
				},
				"linkFarcasterId(uint256)": {
					"details": "If msg.sender already has a different FID, unlink first by calling `unlinkFid`."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setUserVaultImplementation(address)": {
					"details": "Only affects *new* vaults; existing vaults remain unchanged."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"FidLinked(uint256,address)": {
					"notice": "Emitted when a FID is linked to an owner."
				},
				"FidUnlinked(uint256,address)": {
					"notice": "Emitted when a FID is unlinked from its owner."
				},
				"UserVaultImplementationUpdated(address)": {
					"notice": "Emitted when the UserVault implementation is updated."
				},
				"WalletCreated(address,uint256,address)": {
					"notice": "Emitted when a new vault is created for an owner."
				}
			},
			"kind": "user",
			"methods": {
				"createWallet(address,uint256)": {
					"notice": "Create a vault for `owner_` and (optionally) link a Farcaster FID."
				},
				"fidToOwner(uint256)": {
					"notice": "Farcaster FID -> Owner address (1:1)."
				},
				"getOwnerByFid(uint256)": {
					"notice": "Get an owner by FID (returns address(0) if not linked)."
				},
				"getVault(address)": {
					"notice": "Get a vault by owner. Reverts if none exists."
				},
				"getVaultByFid(uint256)": {
					"notice": "Get a vault by FID (reverts if FID not linked or vault missing)."
				},
				"linkFarcasterId(uint256)": {
					"notice": "Link a Farcaster FID to msg.sender. Each FID and owner can be linked only once."
				},
				"ownerToFid(address)": {
					"notice": "Owner -> FID (0 when not linked)."
				},
				"ownerToVault(address)": {
					"notice": "Owner -> Vault address (1:1)."
				},
				"setUserVaultImplementation(address)": {
					"notice": "Update the UserVault implementation used by future clones."
				},
				"unlinkFarcasterId()": {
					"notice": "Unlink the FID currently tied to msg.sender."
				},
				"userVaultImplementation()": {
					"notice": "UserVault implementation to be cloned for each new user."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/Contract Architecture/Core Infrastructure/WalletManager.sol": "WalletManager"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/proxy/Clones.sol": {
			"keccak256": "0x7e918671c04972845975935ea13c9ce0be1228031ba0e929d0f1f68fd1f17214",
			"license": "MIT",
			"urls": [
				"bzz-raw://3027ebaeef3e678ad9bae26f0556469878e992bf7dec94bede328a92be529419",
				"dweb:/ipfs/Qmdu4RfMYv9Q7iHWuYfyUL6fZKc73nM4YWizNP8w1xay56"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Create2.sol": {
			"keccak256": "0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06",
			"license": "MIT",
			"urls": [
				"bzz-raw://866a11ad89c93ee918078f7a46ae31e17d89216ce64603f0d34be7ed0a5c520e",
				"dweb:/ipfs/QmW3ckLEJg2v2NzuVLNJFmRuerGSipw6Dzg6ntbmqbAGoC"
			]
		},
		"@openzeppelin/contracts/utils/Errors.sol": {
			"keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
				"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
			]
		},
		"src/Contract Architecture/Core Infrastructure/WalletManager.sol": {
			"keccak256": "0x7d2998af0a2c7e87d8d25d3b7d15b4c211133005624f040324d20be4802106be",
			"license": "MIT",
			"urls": [
				"bzz-raw://be538323ab19a734e62570e636390bc703a7e53632ab71f873249b04d429255a",
				"dweb:/ipfs/QmWSaQCnYxiFGKjaGUNyM3e7VpU2YPYyKTDbP4q5v9UfrL"
			]
		}
	},
	"version": 1
}