{
	"id": "da7779a098536bece54e69242919f30c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"src/Contract Architecture/Core Infrastructure/WalletManager.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/**\n * @title WalletManager\n * @notice Creates per-user vaults using EIP-1167 minimal proxies and links Farcaster IDs to owners.\n *         Keeps bijective relations: owner -> vault, FID -> owner. Each owner has at most one vault.\n *\n * @dev    Expects a deployed UserVault implementation that has an initialize(address owner) function.\n *         Uses OpenZeppelin Ownable & Clones. Safe for use as a core infra piece.\n */\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\n\ninterface IUserVault {\n    function initialize(address owner_) external;\n    function owner() external view returns (address);\n}\n\n/// @dev Basic errors to keep bytecode lean.\nerror ZeroAddress();\nerror AlreadyHasVault();\nerror VaultNotFound();\nerror FidAlreadyLinked();\nerror FidNotLinked();\nerror NotFidOwner();\nerror OwnerAlreadyLinked();\nerror ImplementationNotSet();\n\ncontract WalletManager is Ownable {\n    using Clones for address;\n\n    /// @notice UserVault implementation to be cloned for each new user.\n    address public userVaultImplementation;\n\n    /// @notice Owner -> Vault address (1:1).\n    mapping(address => address) public ownerToVault;\n\n    /// @notice Farcaster FID -> Owner address (1:1).\n    mapping(uint256 => address) public fidToOwner;\n\n    /// @notice Owner -> FID (0 when not linked).\n    mapping(address => uint256) public ownerToFid;\n\n    /// @notice Emitted when a new vault is created for an owner.\n    event WalletCreated(address indexed owner, uint256 indexed fid, address vault);\n\n    /// @notice Emitted when a FID is linked to an owner.\n    event FidLinked(uint256 indexed fid, address indexed owner);\n\n    /// @notice Emitted when a FID is unlinked from its owner.\n    event FidUnlinked(uint256 indexed fid, address indexed previousOwner);\n\n    /// @notice Emitted when the UserVault implementation is updated.\n    event UserVaultImplementationUpdated(address indexed implementation);\n\n    constructor(address _userVaultImplementation) Ownable(msg.sender) {\n        if (_userVaultImplementation == address(0)) revert ZeroAddress();\n        userVaultImplementation = _userVaultImplementation;\n        emit UserVaultImplementationUpdated(_userVaultImplementation);\n    }\n\n    // ========= Admin =========\n\n    /// @notice Update the UserVault implementation used by future clones.\n    /// @dev Only affects *new* vaults; existing vaults remain unchanged.\n    function setUserVaultImplementation(address _implementation) external onlyOwner {\n        if (_implementation == address(0)) revert ZeroAddress();\n        userVaultImplementation = _implementation;\n        emit UserVaultImplementationUpdated(_implementation);\n    }\n\n    // ========= Public (Owner) Actions =========\n\n    /**\n     * @notice Create a vault for `owner_` and (optionally) link a Farcaster FID.\n     * @dev    Reverts if owner already has a vault. If fid_ > 0, also links the FID.\n     * @param  owner_ The EOA or smart account that will control the new vault.\n     * @param  fid_   Farcaster ID to link (use 0 to skip linking).\n     * @return vault  The address of the newly created vault clone.\n     */\n    function createWallet(address owner_, uint256 fid_) external returns (address vault) {\n        if (userVaultImplementation == address(0)) revert ImplementationNotSet();\n        if (owner_ == address(0)) revert ZeroAddress();\n        if (ownerToVault[owner_] != address(0)) revert AlreadyHasVault();\n        if (fid_ != 0 && fidToOwner[fid_] != address(0)) revert FidAlreadyLinked();\n\n        // Deploy minimal proxy clone\n        vault = Clones.clone(userVaultImplementation);\n\n        // Initialize ownership inside the vault\n        IUserVault(vault).initialize(owner_);\n\n        // Record owner -> vault\n        ownerToVault[owner_] = vault;\n\n        // Optionally link FID\n        if (fid_ != 0) {\n            fidToOwner[fid_] = owner_;\n            ownerToFid[owner_] = fid_;\n            emit FidLinked(fid_, owner_);\n        }\n\n        emit WalletCreated(owner_, fid_, vault);\n    }\n\n    /**\n     * @notice Link a Farcaster FID to msg.sender. Each FID and owner can be linked only once.\n     * @dev    If msg.sender already has a different FID, unlink first by calling `unlinkFid`.\n     */\n    function linkFarcasterId(uint256 fid_) external {\n        if (fid_ == 0) revert FidNotLinked();\n        if (fidToOwner[fid_] != address(0)) revert FidAlreadyLinked();\n        if (ownerToFid[msg.sender] != 0) revert OwnerAlreadyLinked();\n\n        fidToOwner[fid_] = msg.sender;\n        ownerToFid[msg.sender] = fid_;\n        emit FidLinked(fid_, msg.sender);\n    }\n\n    /**\n     * @notice Unlink the FID currently tied to msg.sender.\n     */\n    function unlinkFarcasterId() external {\n        uint256 existing = ownerToFid[msg.sender];\n        if (existing == 0) revert FidNotLinked();\n\n        // Clear both mappings\n        delete fidToOwner[existing];\n        delete ownerToFid[msg.sender];\n\n        emit FidUnlinked(existing, msg.sender);\n    }\n\n    // ========= Views =========\n\n    /// @notice Get a vault by owner. Reverts if none exists.\n    function getVault(address owner_) external view returns (address vault) {\n        vault = ownerToVault[owner_];\n        if (vault == address(0)) revert VaultNotFound();\n    }\n\n    /// @notice Get an owner by FID (returns address(0) if not linked).\n    function getOwnerByFid(uint256 fid_) external view returns (address) {\n        return fidToOwner[fid_];\n    }\n\n    /// @notice Get a vault by FID (reverts if FID not linked or vault missing).\n    function getVaultByFid(uint256 fid_) external view returns (address vault) {\n        address owner_ = fidToOwner[fid_];\n        if (owner_ == address(0)) revert FidNotLinked();\n        vault = ownerToVault[owner_];\n        if (vault == address(0)) revert VaultNotFound();\n    }\n}\n"
			},
			"@openzeppelin/contracts/proxy/Clones.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\nimport {Create2} from \"../utils/Create2.sol\";\nimport {Errors} from \"../utils/Errors.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    error CloneArgumentsTooLong();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        return clone(implementation, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n     * to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function clone(address implementation, uint256 value) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(value, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\n     * the clones cannot be deployed twice at the same address.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        return cloneDeterministic(implementation, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n     * a `value` parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(value, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create opcode, which should never revert.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\n        return cloneWithImmutableArgs(implementation, args, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\n     * parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        assembly (\"memory-safe\") {\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\n     * at the same address.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (address instance) {\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\n     * but with a `value` parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.deploy(value, salt, bytecode);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\n    }\n\n    /**\n     * @dev Get the immutable args attached to a clone.\n     *\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\n     *   function will return an empty array.\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\n     *   creation.\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\n     *   function should only be used to check addresses that are known to be clones.\n     */\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\n        assembly (\"memory-safe\") {\n            extcodecopy(instance, add(result, 32), 45, mload(result))\n        }\n        return result;\n    }\n\n    /**\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\n     *\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\n     * abi.encodePacked is more expensive but also more portable and easier to review.\n     *\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\n     */\n    function _cloneCodeWithImmutableArgs(\n        address implementation,\n        bytes memory args\n    ) private pure returns (bytes memory) {\n        if (args.length > 24531) revert CloneArgumentsTooLong();\n        return\n            abi.encodePacked(\n                hex\"61\",\n                uint16(args.length + 45),\n                hex\"3d81600a3d39f3363d3d373d3d3d363d73\",\n                implementation,\n                hex\"5af43d82803e903d91602b57fd5bf3\",\n                args\n            );\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Errors.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
			},
			"@openzeppelin/contracts/utils/Create2.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/proxy/Clones.sol": {
				"Clones": {
					"abi": [
						{
							"inputs": [],
							"name": "CloneArgumentsTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for deploying minimal proxy contracts, also known as \"clones\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/proxy/Clones.sol\":817:14520  library Clones {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":817:14520  library Clones {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b555de5aecf37c64bd99e24021cef1994cc180d46b92b0a7dda11462bd262b1264736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b555de5aecf37c64bd99e24021cef1994cc180d46b92b0a7dda11462bd262b1264736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB5 SSTORE 0xDE GAS 0xEC RETURN PUSH29 0x64BD99E24021CEF1994CC180D46B92B0A7DDA11462BD262B1264736F6C PUSH4 0x4300081A STOP CALLER ",
							"sourceMap": "817:13703:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;817:13703:1;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b555de5aecf37c64bd99e24021cef1994cc180d46b92b0a7dda11462bd262b1264736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB5 SSTORE 0xDE GAS 0xEC RETURN PUSH29 0x64BD99E24021CEF1994CC180D46B92B0A7DDA11462BD262B1264736F6C PUSH4 0x4300081A STOP CALLER ",
							"sourceMap": "817:13703:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_cloneCodeWithImmutableArgs(address,bytes memory)": "infinite",
								"clone(address)": "infinite",
								"clone(address,uint256)": "infinite",
								"cloneDeterministic(address,bytes32)": "infinite",
								"cloneDeterministic(address,bytes32,uint256)": "infinite",
								"cloneDeterministicWithImmutableArgs(address,bytes memory,bytes32)": "infinite",
								"cloneDeterministicWithImmutableArgs(address,bytes memory,bytes32,uint256)": "infinite",
								"cloneWithImmutableArgs(address,bytes memory)": "infinite",
								"cloneWithImmutableArgs(address,bytes memory,uint256)": "infinite",
								"fetchCloneArgs(address)": "infinite",
								"predictDeterministicAddress(address,bytes32)": "infinite",
								"predictDeterministicAddress(address,bytes32,address)": "infinite",
								"predictDeterministicAddressWithImmutableArgs(address,bytes memory,bytes32)": "infinite",
								"predictDeterministicAddressWithImmutableArgs(address,bytes memory,bytes32,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 817,
									"end": 14520,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b555de5aecf37c64bd99e24021cef1994cc180d46b92b0a7dda11462bd262b1264736f6c634300081a0033",
									".code": [
										{
											"begin": 817,
											"end": 14520,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 817,
											"end": 14520,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 817,
											"end": 14520,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 817,
											"end": 14520,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 817,
											"end": 14520,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 14520,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 817,
											"end": 14520,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 817,
											"end": 14520,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 817,
											"end": 14520,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/proxy/Clones.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Create2.sol",
								"@openzeppelin/contracts/utils/Errors.sol",
								"src/Contract Architecture/Core Infrastructure/WalletManager.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CloneArgumentsTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for deploying minimal proxy contracts, also known as \\\"clones\\\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/Clones.sol\":\"Clones\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"keccak256\":\"0x7e918671c04972845975935ea13c9ce0be1228031ba0e929d0f1f68fd1f17214\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3027ebaeef3e678ad9bae26f0556469878e992bf7dec94bede328a92be529419\",\"dweb:/ipfs/Qmdu4RfMYv9Q7iHWuYfyUL6fZKc73nM4YWizNP8w1xay56\"]},\"@openzeppelin/contracts/utils/Create2.sol\":{\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866a11ad89c93ee918078f7a46ae31e17d89216ce64603f0d34be7ed0a5c520e\",\"dweb:/ipfs/QmW3ckLEJg2v2NzuVLNJFmRuerGSipw6Dzg6ntbmqbAGoC\"]},\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Create2.sol": {
				"Create2": {
					"abi": [
						{
							"inputs": [],
							"name": "Create2EmptyBytecode",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.",
						"errors": {
							"Create2EmptyBytecode()": [
								{
									"details": "There's no code to deploy."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Create2.sol\":533:4465  library Create2 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Create2.sol\":533:4465  library Create2 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201af1e4343840a7ef161b7a91eb0f841b91f5be473b511a8488c0360273cfc2c864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201af1e4343840a7ef161b7a91eb0f841b91f5be473b511a8488c0360273cfc2c864736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE CALL 0xE4 CALLVALUE CODESIZE BLOCKHASH 0xA7 0xEF AND SHL PUSH27 0x91EB0F841B91F5BE473B511A8488C0360273CFC2C864736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "533:3932:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;533:3932:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212201af1e4343840a7ef161b7a91eb0f841b91f5be473b511a8488c0360273cfc2c864736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE CALL 0xE4 CALLVALUE CODESIZE BLOCKHASH 0xA7 0xEF AND SHL PUSH27 0x91EB0F841B91F5BE473B511A8488C0360273CFC2C864736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "533:3932:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"computeAddress(bytes32,bytes32)": "infinite",
								"computeAddress(bytes32,bytes32,address)": "infinite",
								"deploy(uint256,bytes32,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201af1e4343840a7ef161b7a91eb0f841b91f5be473b511a8488c0360273cfc2c864736f6c634300081a0033",
									".code": [
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/proxy/Clones.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Create2.sol",
								"@openzeppelin/contracts/utils/Errors.sol",
								"src/Contract Architecture/Core Infrastructure/WalletManager.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Create2EmptyBytecode\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.\",\"errors\":{\"Create2EmptyBytecode()\":[{\"details\":\"There's no code to deploy.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Create2.sol\":\"Create2\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866a11ad89c93ee918078f7a46ae31e17d89216ce64603f0d34be7ed0a5c520e\",\"dweb:/ipfs/QmW3ckLEJg2v2NzuVLNJFmRuerGSipw6Dzg6ntbmqbAGoC\"]},\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Errors.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "FailedCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedDeployment",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "MissingPrecompile",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._",
						"errors": {
							"FailedCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"FailedDeployment()": [
								{
									"details": "The deployment failed."
								}
							],
							"InsufficientBalance(uint256,uint256)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"MissingPrecompile(address)": [
								{
									"details": "A necessary precompile is missing."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Errors.sol\":411:895  library Errors {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Errors.sol\":411:895  library Errors {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207f24a2d9d64be2436433cbce0ae15485d95954a8bc59d3a0738667681461fc9064736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212207f24a2d9d64be2436433cbce0ae15485d95954a8bc59d3a0738667681461fc9064736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x24A2D9D64BE2436433CBCE0AE15485D95954A8BC59D3A0738667681461FC9064 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "411:484:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;411:484:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212207f24a2d9d64be2436433cbce0ae15485d95954a8bc59d3a0738667681461fc9064736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x24A2D9D64BE2436433CBCE0AE15485D95954A8BC59D3A0738667681461FC9064 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "411:484:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 411,
									"end": 895,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207f24a2d9d64be2436433cbce0ae15485d95954a8bc59d3a0738667681461fc9064736f6c634300081a0033",
									".code": [
										{
											"begin": 411,
											"end": 895,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 411,
											"end": 895,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 411,
											"end": 895,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 411,
											"end": 895,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 411,
											"end": 895,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 411,
											"end": 895,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 411,
											"end": 895,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 895,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 411,
											"end": 895,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/proxy/Clones.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Create2.sol",
								"@openzeppelin/contracts/utils/Errors.sol",
								"src/Contract Architecture/Core Infrastructure/WalletManager.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MissingPrecompile\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"MissingPrecompile(address)\":[{\"details\":\"A necessary precompile is missing.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Errors.sol\":\"Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/Contract Architecture/Core Infrastructure/WalletManager.sol": {
				"IUserVault": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"initialize(address)": "c4d66de8",
							"owner()": "8da5cb5b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":\"IUserVault\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"keccak256\":\"0x7e918671c04972845975935ea13c9ce0be1228031ba0e929d0f1f68fd1f17214\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3027ebaeef3e678ad9bae26f0556469878e992bf7dec94bede328a92be529419\",\"dweb:/ipfs/Qmdu4RfMYv9Q7iHWuYfyUL6fZKc73nM4YWizNP8w1xay56\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Create2.sol\":{\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866a11ad89c93ee918078f7a46ae31e17d89216ce64603f0d34be7ed0a5c520e\",\"dweb:/ipfs/QmW3ckLEJg2v2NzuVLNJFmRuerGSipw6Dzg6ntbmqbAGoC\"]},\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":{\"keccak256\":\"0x65be71d63bbe1632c4cc318ced096d0e00771f90220b5f2c2a11a58a90761dd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6cb7c9e107605fc889d8ded7c1fe75eaf7ac1c7e2f830fcc8b77e5adc79bcfd4\",\"dweb:/ipfs/QmWYUrLeAdU4YmoM4Zf8Gn1n585hEm44KHJG347tNtdrA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"WalletManager": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_userVaultImplementation",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "AlreadyHasVault",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedDeployment",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FidAlreadyLinked",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FidNotLinked",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ImplementationNotSet",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerAlreadyLinked",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "VaultNotFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddress",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "fid",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "FidLinked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "fid",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								}
							],
							"name": "FidUnlinked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "UserVaultImplementationUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "fid",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "vault",
									"type": "address"
								}
							],
							"name": "WalletCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "fid_",
									"type": "uint256"
								}
							],
							"name": "createWallet",
							"outputs": [
								{
									"internalType": "address",
									"name": "vault",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "fidToOwner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "fid_",
									"type": "uint256"
								}
							],
							"name": "getOwnerByFid",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner_",
									"type": "address"
								}
							],
							"name": "getVault",
							"outputs": [
								{
									"internalType": "address",
									"name": "vault",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "fid_",
									"type": "uint256"
								}
							],
							"name": "getVaultByFid",
							"outputs": [
								{
									"internalType": "address",
									"name": "vault",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "fid_",
									"type": "uint256"
								}
							],
							"name": "linkFarcasterId",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "ownerToFid",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "ownerToVault",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_implementation",
									"type": "address"
								}
							],
							"name": "setUserVaultImplementation",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unlinkFarcasterId",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "userVaultImplementation",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"FailedDeployment()": [
								{
									"details": "The deployment failed."
								}
							],
							"InsufficientBalance(uint256,uint256)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							],
							"ZeroAddress()": [
								{
									"details": "Basic errors to keep bytecode lean."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"createWallet(address,uint256)": {
								"details": "Reverts if owner already has a vault. If fid_ > 0, also links the FID.",
								"params": {
									"fid_": "Farcaster ID to link (use 0 to skip linking).",
									"owner_": "The EOA or smart account that will control the new vault."
								},
								"returns": {
									"vault": " The address of the newly created vault clone."
								}
							},
							"linkFarcasterId(uint256)": {
								"details": "If msg.sender already has a different FID, unlink first by calling `unlinkFid`."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"setUserVaultImplementation(address)": {
								"details": "Only affects *new* vaults; existing vaults remain unchanged."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":989:5910  contract WalletManager is Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2045:2323  constructor(address _userVaultImplementation) Ownable(msg.sender) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2099:2109  msg.sender */\n  caller\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_7\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":455:506   */\n  mstore\n    /* \"#utility.yul\":428:446   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_7:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_11\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_10:\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2125:2163  _userVaultImplementation == address(0) */\n  dup2\n  and\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2121:2185  if (_userVaultImplementation == address(0)) revert ZeroAddress() */\n  tag_13\n  jumpi\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2172:2185  ZeroAddress() */\n  mload(0x40)\n  shl(0xe0, 0xd92e233d)\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2121:2185  if (_userVaultImplementation == address(0)) revert ZeroAddress() */\ntag_13:\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2195:2218  userVaultImplementation */\n  0x01\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2195:2245  userVaultImplementation = _userVaultImplementation */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  dup4\n  and\n  swap1\n  dup2\n  or\n  swap1\n  swap2\n  sstore\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2260:2316  UserVaultImplementationUpdated(_userVaultImplementation) */\n  mload(0x40)\n  0xb3113c226e7a2d90bb0324c2c6af9fc8f012eb7a61f4004619548b54acf2eb04\n  swap1\n  0x00\n  swap1\n  log2\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2045:2323  constructor(address _userVaultImplementation) Ownable(msg.sender) {... */\n  pop\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":989:5910  contract WalletManager is Ownable {... */\n  jump(tag_16)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_11:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_18\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_18:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_19\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_19:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":309:512   */\ntag_16:\n    /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":989:5910  contract WalletManager is Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":989:5910  contract WalletManager is Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8a62bb16\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xc8b6a983\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xc8b6a983\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xe2cc3d2f\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xf247d217\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x8a62bb16\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa6e7d83f\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup1\n      0x5cf25981\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x5cf25981\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x7b9cf4f3\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x820b3d53\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x0eb9af38\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x1c576575\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x35598a02\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5183:5357  function getVault(address owner_) external view returns (address vault) {... */\n    tag_3:\n      tag_20\n      tag_21\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_21:\n      tag_23\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":547:579   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":529:580   */\n      dup2\n      mstore\n        /* \"#utility.yul\":517:519   */\n      0x20\n        /* \"#utility.yul\":502:520   */\n      add\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5183:5357  function getVault(address owner_) external view returns (address vault) {... */\n    tag_24:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4333:4696  function linkFarcasterId(uint256 fid_) external {... */\n    tag_4:\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      stop\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2512:2777  function setUserVaultImplementation(address _implementation) external onlyOwner {... */\n    tag_5:\n      tag_26\n      tag_31\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_31:\n      tag_32\n      jump\t// in\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":1224:1271  mapping(address => address) public ownerToVault */\n    tag_6:\n      tag_20\n      tag_34\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_34:\n      mstore(0x20, 0x02)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_7:\n      tag_26\n      tag_38\n      jump\t// in\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5435:5544  function getOwnerByFid(uint256 fid_) external view returns (address) {... */\n    tag_8:\n      tag_20\n      tag_40\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_40:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5495:5502  address */\n      0x00\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5521:5537  fidToOwner[fid_] */\n      swap1\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5521:5531  fidToOwner */\n      0x03\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5521:5537  fidToOwner[fid_] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5435:5544  function getOwnerByFid(uint256 fid_) external view returns (address) {... */\n      jump\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4778:5081  function unlinkFarcasterId() external {... */\n    tag_9:\n      tag_26\n      tag_44\n      jump\t// in\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5631:5908  function getVaultByFid(uint256 fid_) external view returns (address vault) {... */\n    tag_10:\n      tag_20\n      tag_46\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_46:\n      tag_47\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_11:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      jump(tag_20)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":1133:1171  address public userVaultImplementation */\n    tag_12:\n      sload(0x01)\n      tag_20\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":1332:1377  mapping(uint256 => address) public fidToOwner */\n    tag_13:\n      tag_20\n      tag_56\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_56:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":1434:1479  mapping(address => uint256) public ownerToFid */\n    tag_14:\n      tag_59\n      tag_60\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_60:\n      mstore(0x20, 0x04)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n    tag_59:\n      mload(0x40)\n        /* \"#utility.yul\":968:993   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":956:958   */\n      0x20\n        /* \"#utility.yul\":941:959   */\n      add\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":1434:1479  mapping(address => uint256) public ownerToFid */\n      tag_24\n        /* \"#utility.yul\":822:999   */\n      jump\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3234:4121  function createWallet(address owner_, uint256 fid_) external returns (address vault) {... */\n    tag_15:\n      tag_20\n      tag_65\n      calldatasize\n      0x04\n      tag_66\n      jump\t// in\n    tag_65:\n      tag_67\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_16:\n      tag_26\n      tag_70\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_70:\n      tag_71\n      jump\t// in\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5183:5357  function getVault(address owner_) external view returns (address vault) {... */\n    tag_23:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5273:5293  ownerToVault[owner_] */\n      dup1\n      dup3\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5240:5253  address vault */\n      0x00\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5273:5293  ownerToVault[owner_] */\n      swap1\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5273:5285  ownerToVault */\n      0x02\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5273:5293  ownerToVault[owner_] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      and\n      dup1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5303:5350  if (vault == address(0)) revert VaultNotFound() */\n      tag_73\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5335:5350  VaultNotFound() */\n      mload(0x40)\n      shl(0xe0, 0xdee790fb)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5303:5350  if (vault == address(0)) revert VaultNotFound() */\n    tag_73:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5183:5357  function getVault(address owner_) external view returns (address vault) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4333:4696  function linkFarcasterId(uint256 fid_) external {... */\n    tag_29:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4395:4399  fid_ */\n      dup1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4403:4404  0 */\n      0x00\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4395:4404  fid_ == 0 */\n      sub\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4391:4427  if (fid_ == 0) revert FidNotLinked() */\n      tag_75\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4413:4427  FidNotLinked() */\n      mload(0x40)\n      shl(0xe1, 0x7a93adf7)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4391:4427  if (fid_ == 0) revert FidNotLinked() */\n    tag_75:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4469:4470  0 */\n      0x00\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4441:4457  fidToOwner[fid_] */\n      dup2\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4441:4451  fidToOwner */\n      0x03\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4441:4457  fidToOwner[fid_] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4441:4471  fidToOwner[fid_] != address(0) */\n      iszero\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4437:4498  if (fidToOwner[fid_] != address(0)) revert FidAlreadyLinked() */\n      tag_76\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4480:4498  FidAlreadyLinked() */\n      mload(0x40)\n      shl(0xe3, 0x1f2c68c1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4437:4498  if (fidToOwner[fid_] != address(0)) revert FidAlreadyLinked() */\n    tag_76:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4523:4533  msg.sender */\n      caller\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4512:4534  ownerToFid[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4512:4522  ownerToFid */\n      0x04\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4512:4534  ownerToFid[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4512:4539  ownerToFid[msg.sender] != 0 */\n      iszero\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4508:4568  if (ownerToFid[msg.sender] != 0) revert OwnerAlreadyLinked() */\n      tag_77\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4548:4568  OwnerAlreadyLinked() */\n      mload(0x40)\n      shl(0xe2, 0x34b3fb37)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4508:4568  if (ownerToFid[msg.sender] != 0) revert OwnerAlreadyLinked() */\n    tag_77:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4579:4595  fidToOwner[fid_] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4579:4589  fidToOwner */\n      0x03\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4579:4595  fidToOwner[fid_] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4579:4608  fidToOwner[fid_] = msg.sender */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4598:4608  msg.sender */\n      caller\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4579:4608  fidToOwner[fid_] = msg.sender */\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4618:4640  ownerToFid[msg.sender] */\n      dup1\n      dup5\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4618:4628  ownerToFid */\n      0x04\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4618:4640  ownerToFid[msg.sender] */\n      swap1\n      swap3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4618:4647  ownerToFid[msg.sender] = fid_ */\n      dup5\n      swap1\n      sstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4662:4689  FidLinked(fid_, msg.sender) */\n      mload\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4598:4608  msg.sender */\n      swap1\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4590:4594  fid_ */\n      dup4\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4662:4689  FidLinked(fid_, msg.sender) */\n      0x352813b8d042518a94ed321d9dc289e197f2c4808f289e723bb13e59559f1633\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4579:4595  fidToOwner[fid_] */\n      swap1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4662:4689  FidLinked(fid_, msg.sender) */\n      log3\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4333:4696  function linkFarcasterId(uint256 fid_) external {... */\n      pop\n      jump\t// out\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2512:2777  function setUserVaultImplementation(address _implementation) external onlyOwner {... */\n    tag_32:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_79\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_80\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_79:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2606:2635  _implementation == address(0) */\n      dup2\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2602:2657  if (_implementation == address(0)) revert ZeroAddress() */\n      tag_82\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2644:2657  ZeroAddress() */\n      mload(0x40)\n      shl(0xe0, 0xd92e233d)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2602:2657  if (_implementation == address(0)) revert ZeroAddress() */\n    tag_82:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2667:2690  userVaultImplementation */\n      0x01\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2667:2708  userVaultImplementation = _implementation */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2723:2770  UserVaultImplementationUpdated(_implementation) */\n      mload(0x40)\n      0xb3113c226e7a2d90bb0324c2c6af9fc8f012eb7a61f4004619548b54acf2eb04\n      swap1\n      0x00\n      swap1\n      log2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":2512:2777  function setUserVaultImplementation(address _implementation) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_84\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_80\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_84:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_86\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_87\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4778:5081  function unlinkFarcasterId() external {... */\n    tag_44:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4856:4866  msg.sender */\n      caller\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4826:4842  uint256 existing */\n      0x00\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4845:4867  ownerToFid[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4845:4855  ownerToFid */\n      0x04\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4845:4867  ownerToFid[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n      swap1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4881:4894  existing == 0 */\n      dup2\n      swap1\n      sub\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4877:4917  if (existing == 0) revert FidNotLinked() */\n      tag_90\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4903:4917  FidNotLinked() */\n      mload(0x40)\n      shl(0xe1, 0x7a93adf7)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4877:4917  if (existing == 0) revert FidNotLinked() */\n    tag_90:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4966:4986  fidToOwner[existing] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4966:4976  fidToOwner */\n      0x03\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4966:4986  fidToOwner[existing] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4959:4986  delete fidToOwner[existing] */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5014:5024  msg.sender */\n      caller\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5003:5025  ownerToFid[msg.sender] */\n      dup1\n      dup5\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5003:5013  ownerToFid */\n      0x04\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5003:5025  ownerToFid[msg.sender] */\n      swap1\n      swap3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4996:5025  delete ownerToFid[msg.sender] */\n      dup4\n      swap1\n      sstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5041:5074  FidUnlinked(existing, msg.sender) */\n      mload\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5014:5024  msg.sender */\n      swap1\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4977:4985  existing */\n      dup4\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5041:5074  FidUnlinked(existing, msg.sender) */\n      0xafa425487c9afa00a971354b7196fe3cfcda1835bf4c2a1027b6f21f28889762\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4966:4986  fidToOwner[existing] */\n      swap1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5041:5074  FidUnlinked(existing, msg.sender) */\n      log3\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4816:5081  {... */\n      pop\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4778:5081  function unlinkFarcasterId() external {... */\n      jump\t// out\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5631:5908  function getVaultByFid(uint256 fid_) external view returns (address vault) {... */\n    tag_47:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5691:5704  address vault */\n      0x00\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5733:5749  fidToOwner[fid_] */\n      dup2\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5733:5743  fidToOwner */\n      0x03\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5733:5749  fidToOwner[fid_] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5759:5806  if (owner_ == address(0)) revert FidNotLinked() */\n      tag_92\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5792:5806  FidNotLinked() */\n      mload(0x40)\n      shl(0xe1, 0x7a93adf7)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5759:5806  if (owner_ == address(0)) revert FidNotLinked() */\n    tag_92:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5824:5844  ownerToVault[owner_] */\n      dup1\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5824:5836  ownerToVault */\n      0x02\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5824:5844  ownerToVault[owner_] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      and\n      swap2\n      pop\n      dup2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5854:5901  if (vault == address(0)) revert VaultNotFound() */\n      tag_93\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5886:5901  VaultNotFound() */\n      mload(0x40)\n      shl(0xe0, 0xdee790fb)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5854:5901  if (vault == address(0)) revert VaultNotFound() */\n    tag_93:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5706:5908  {... */\n      pop\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":5631:5908  function getVaultByFid(uint256 fid_) external view returns (address vault) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3234:4121  function createWallet(address owner_, uint256 fid_) external returns (address vault) {... */\n    tag_67:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3333:3356  userVaultImplementation */\n      sload(0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3304:3317  address vault */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3333:3356  userVaultImplementation */\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3329:3401  if (userVaultImplementation == address(0)) revert ImplementationNotSet() */\n      tag_96\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3379:3401  ImplementationNotSet() */\n      mload(0x40)\n      shl(0xe0, 0x40dde935)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3329:3401  if (userVaultImplementation == address(0)) revert ImplementationNotSet() */\n    tag_96:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3415:3435  owner_ == address(0) */\n      dup4\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3411:3457  if (owner_ == address(0)) revert ZeroAddress() */\n      tag_97\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3444:3457  ZeroAddress() */\n      mload(0x40)\n      shl(0xe0, 0xd92e233d)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3411:3457  if (owner_ == address(0)) revert ZeroAddress() */\n    tag_97:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3471:3491  ownerToVault[owner_] */\n      dup4\n      dup2\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3503:3504  0 */\n      0x00\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3471:3491  ownerToVault[owner_] */\n      swap1\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3471:3483  ownerToVault */\n      0x02\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3471:3491  ownerToVault[owner_] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3471:3505  ownerToVault[owner_] != address(0) */\n      iszero\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3467:3531  if (ownerToVault[owner_] != address(0)) revert AlreadyHasVault() */\n      tag_98\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3514:3531  AlreadyHasVault() */\n      mload(0x40)\n      shl(0xe0, 0x4f109875)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3467:3531  if (ownerToVault[owner_] != address(0)) revert AlreadyHasVault() */\n    tag_98:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3545:3554  fid_ != 0 */\n      dup2\n      iszero\n      dup1\n      iszero\n      swap1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3545:3588  fid_ != 0 && fidToOwner[fid_] != address(0) */\n      tag_99\n      jumpi\n      pop\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3586:3587  0 */\n      0x00\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3558:3574  fidToOwner[fid_] */\n      dup3\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3558:3568  fidToOwner */\n      0x03\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3558:3574  fidToOwner[fid_] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3558:3588  fidToOwner[fid_] != address(0) */\n      iszero\n      iszero\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3545:3588  fid_ != 0 && fidToOwner[fid_] != address(0) */\n    tag_99:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3541:3615  if (fid_ != 0 && fidToOwner[fid_] != address(0)) revert FidAlreadyLinked() */\n      iszero\n      tag_100\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3597:3615  FidAlreadyLinked() */\n      mload(0x40)\n      shl(0xe3, 0x1f2c68c1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3541:3615  if (fid_ != 0 && fidToOwner[fid_] != address(0)) revert FidAlreadyLinked() */\n    tag_100:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3685:3708  userVaultImplementation */\n      sload(0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3672:3709  Clones.clone(userVaultImplementation) */\n      tag_101\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3685:3708  userVaultImplementation */\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3672:3684  Clones.clone */\n      tag_102\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3672:3709  Clones.clone(userVaultImplementation) */\n      jump\t// in\n    tag_101:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3769:3805  IUserVault(vault).initialize(owner_) */\n      mload(0x40)\n      shl(0xe3, 0x189acdbd)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":547:579   */\n      dup6\n      dup2\n      and\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3769:3805  IUserVault(vault).initialize(owner_) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":529:580   */\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3664:3709  vault = Clones.clone(userVaultImplementation) */\n      swap2\n      swap3\n      pop\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3769:3797  IUserVault(vault).initialize */\n      swap1\n      dup3\n      and\n      swap1\n      0xc4d66de8\n      swap1\n        /* \"#utility.yul\":502:520   */\n      0x24\n      add\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3769:3805  IUserVault(vault).initialize(owner_) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_104\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_104:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_106\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_106:\n      pop\n      pop\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3849:3869  ownerToVault[owner_] */\n      dup4\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3849:3861  ownerToVault */\n      0x02\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3849:3869  ownerToVault[owner_] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3849:3877  ownerToVault[owner_] = vault */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap2\n      dup4\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3923:3932  fid_ != 0 */\n      dup2\n      iszero\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3919:4065  if (fid_ != 0) {... */\n      tag_107\n      jumpi\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3948:3964  fidToOwner[fid_] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3948:3958  fidToOwner */\n      0x03\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3948:3964  fidToOwner[fid_] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3948:3973  fidToOwner[fid_] = owner_ */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup9\n      and\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3987:4005  ownerToFid[owner_] */\n      dup1\n      dup5\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3987:3997  ownerToFid */\n      0x04\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3987:4005  ownerToFid[owner_] */\n      swap1\n      swap3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3987:4012  ownerToFid[owner_] = fid_ */\n      dup6\n      swap1\n      sstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4031:4054  FidLinked(fid_, owner_) */\n      mload\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3948:3973  fidToOwner[fid_] = owner_ */\n      swap1\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3948:3964  fidToOwner[fid_] */\n      dup5\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4031:4054  FidLinked(fid_, owner_) */\n      0x352813b8d042518a94ed321d9dc289e197f2c4808f289e723bb13e59559f1633\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3948:3964  fidToOwner[fid_] */\n      swap1\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4031:4054  FidLinked(fid_, owner_) */\n      log3\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3919:4065  if (fid_ != 0) {... */\n    tag_107:\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4080:4114  WalletCreated(owner_, fid_, vault) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":547:579   */\n      dup3\n      dup2\n      and\n        /* \"#utility.yul\":529:580   */\n      dup3\n      mstore\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4102:4106  fid_ */\n      dup4\n      swap2\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4080:4114  WalletCreated(owner_, fid_, vault) */\n      swap1\n      dup6\n      and\n      swap1\n      0x4a3920ce64f1f4f94c7d183cc35de5df87c9b0b30de1c886f490b495cb8791c8\n      swap1\n        /* \"#utility.yul\":517:519   */\n      0x20\n        /* \"#utility.yul\":502:520   */\n      add\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":4080:4114  WalletCreated(owner_, fid_, vault) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":3234:4121  function createWallet(address owner_, uint256 fid_) external returns (address vault) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_71:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_110\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_80\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_110:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_112\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":529:580   */\n      mstore\n        /* \"#utility.yul\":502:520   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n    tag_113:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_112:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_114\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_87\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_114:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_80:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_86\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":529:580   */\n      mstore\n        /* \"#utility.yul\":502:520   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_113\n        /* \"#utility.yul\":383:586   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_87:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1405:1528  function clone(address implementation) internal returns (address instance) {... */\n    tag_102:\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1462:1478  address instance */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1497:1521  clone(implementation, 0) */\n      tag_124\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1503:1517  implementation */\n      dup3\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1519:1520  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1497:1502  clone */\n      tag_125\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1497:1521  clone(implementation, 0) */\n      jump\t// in\n    tag_124:\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1490:1521  return clone(implementation, 0) */\n      swap3\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":1405:1528  function clone(address implementation) internal returns (address instance) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2255:3165  function clone(address implementation, uint256 value) internal returns (address instance) {... */\n    tag_125:\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2327:2343  address instance */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2383:2388  value */\n      dup2\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2359:2380  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2359:2388  address(this).balance < value */\n      lt\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2355:2478  if (address(this).balance < value) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2411:2467  Errors.InsufficientBalance(address(this).balance, value) */\n      mload(0x40)\n      shl(0xe0, 0xcf479181)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2438:2459  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2411:2467  Errors.InsufficientBalance(address(this).balance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1483:1508   */\n      mstore\n        /* \"#utility.yul\":1524:1542   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":1517:1551   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":1456:1474   */\n      0x44\n      add\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2411:2467  Errors.InsufficientBalance(address(this).balance, value) */\n      tag_113\n        /* \"#utility.yul\":1309:1557   */\n      jump\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2355:2478  if (address(this).balance < value) {... */\n    tag_128:\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2764:2812  0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000 */\n      0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2746:2760  implementation */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2740:2744  0x60 */\n      0x60\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2736:2761  shl(0x60, implementation) */\n      shl\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2730:2734  0xe8 */\n      0xe8\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2726:2762  shr(0xe8, shl(0x60, implementation)) */\n      shr\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2723:2813  or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000) */\n      or\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2717:2721  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2710:2814  mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000)) */\n      mstore\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2971:3003  0x5af43d82803e903d91602b57fd5bf3 */\n      0x5af43d82803e903d91602b57fd5bf3\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2954:2968  implementation */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2948:2952  0x78 */\n      0x78\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2944:2969  shl(0x78, implementation) */\n      shl\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2941:3004  or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3) */\n      or\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2935:2939  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":2928:3005  mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3)) */\n      mstore\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":3050:3054  0x37 */\n      0x37\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":3044:3048  0x09 */\n      0x09\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":3037:3042  value */\n      dup4\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":3030:3055  create(value, 0x09, 0x37) */\n      create\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":3018:3055  instance := create(value, 0x09, 0x37) */\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":3078:3100  instance == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":3074:3159  if (instance == address(0)) {... */\n      tag_124\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/Clones.sol\":3123:3148  Errors.FailedDeployment() */\n      mload(0x40)\n      shl(0xe0, 0xb06ebf3d)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":14:187   */\n    tag_132:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:181   */\n      tag_73\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":192:378   */\n    tag_22:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:324   */\n      iszero\n      tag_137\n      jumpi\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":272:324   */\n    tag_137:\n        /* \"#utility.yul\":343:372   */\n      tag_138\n        /* \"#utility.yul\":362:371   */\n      dup3\n        /* \"#utility.yul\":343:372   */\n      tag_132\n      jump\t// in\n    tag_138:\n        /* \"#utility.yul\":333:372   */\n      swap4\n        /* \"#utility.yul\":192:378   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":591:817   */\n    tag_28:\n        /* \"#utility.yul\":650:656   */\n      0x00\n        /* \"#utility.yul\":703:705   */\n      0x20\n        /* \"#utility.yul\":691:700   */\n      dup3\n        /* \"#utility.yul\":682:689   */\n      dup5\n        /* \"#utility.yul\":678:701   */\n      sub\n        /* \"#utility.yul\":674:706   */\n      slt\n        /* \"#utility.yul\":671:723   */\n      iszero\n      tag_141\n      jumpi\n        /* \"#utility.yul\":719:720   */\n      0x00\n        /* \"#utility.yul\":716:717   */\n      dup1\n        /* \"#utility.yul\":709:721   */\n      revert\n        /* \"#utility.yul\":671:723   */\n    tag_141:\n      pop\n        /* \"#utility.yul\":764:787   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":591:817   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1004:1304   */\n    tag_66:\n        /* \"#utility.yul\":1072:1078   */\n      0x00\n        /* \"#utility.yul\":1080:1086   */\n      dup1\n        /* \"#utility.yul\":1133:1135   */\n      0x40\n        /* \"#utility.yul\":1121:1130   */\n      dup4\n        /* \"#utility.yul\":1112:1119   */\n      dup6\n        /* \"#utility.yul\":1108:1131   */\n      sub\n        /* \"#utility.yul\":1104:1136   */\n      slt\n        /* \"#utility.yul\":1101:1153   */\n      iszero\n      tag_144\n      jumpi\n        /* \"#utility.yul\":1149:1150   */\n      0x00\n        /* \"#utility.yul\":1146:1147   */\n      dup1\n        /* \"#utility.yul\":1139:1151   */\n      revert\n        /* \"#utility.yul\":1101:1153   */\n    tag_144:\n        /* \"#utility.yul\":1172:1201   */\n      tag_145\n        /* \"#utility.yul\":1191:1200   */\n      dup4\n        /* \"#utility.yul\":1172:1201   */\n      tag_132\n      jump\t// in\n    tag_145:\n        /* \"#utility.yul\":1162:1201   */\n      swap5\n        /* \"#utility.yul\":1270:1272   */\n      0x20\n        /* \"#utility.yul\":1255:1273   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1242:1274   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1004:1304   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220c4de30a966445f6148cbce15e7ece1efae8ca525eebcfaf5ae5f4d32c0810f5564736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_810": {
									"entryPoint": null,
									"id": 810,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 208,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 287,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:514:6",
										"nodeType": "YulBlock",
										"src": "0:514:6",
										"statements": [
											{
												"nativeSrc": "6:3:6",
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "95:209:6",
													"nodeType": "YulBlock",
													"src": "95:209:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "141:16:6",
																"nodeType": "YulBlock",
																"src": "141:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "150:1:6",
																					"nodeType": "YulLiteral",
																					"src": "150:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "153:1:6",
																					"nodeType": "YulLiteral",
																					"src": "153:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "143:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:6"
																			},
																			"nativeSrc": "143:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:6"
																		},
																		"nativeSrc": "143:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "116:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "125:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "112:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:6"
																		},
																		"nativeSrc": "112:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "137:2:6",
																		"nodeType": "YulLiteral",
																		"src": "137:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "108:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:6"
																},
																"nativeSrc": "108:32:6",
																"nodeType": "YulFunctionCall",
																"src": "108:32:6"
															},
															"nativeSrc": "105:52:6",
															"nodeType": "YulIf",
															"src": "105:52:6"
														},
														{
															"nativeSrc": "166:29:6",
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "185:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "179:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:6"
																},
																"nativeSrc": "179:16:6",
																"nodeType": "YulFunctionCall",
																"src": "179:16:6"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "170:5:6",
																	"nodeType": "YulTypedName",
																	"src": "170:5:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "258:16:6",
																"nodeType": "YulBlock",
																"src": "258:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "267:1:6",
																					"nodeType": "YulLiteral",
																					"src": "267:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "270:1:6",
																					"nodeType": "YulLiteral",
																					"src": "270:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "260:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:6"
																			},
																			"nativeSrc": "260:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:6"
																		},
																		"nativeSrc": "260:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "217:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "228:5:6",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "243:3:6",
																										"nodeType": "YulLiteral",
																										"src": "243:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "248:1:6",
																										"nodeType": "YulLiteral",
																										"src": "248:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "239:3:6",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:6"
																								},
																								"nativeSrc": "239:11:6",
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:6"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "252:1:6",
																								"nodeType": "YulLiteral",
																								"src": "252:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "235:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:6"
																						},
																						"nativeSrc": "235:19:6",
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "224:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:6"
																				},
																				"nativeSrc": "224:31:6",
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "214:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:6"
																		},
																		"nativeSrc": "214:42:6",
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "207:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:6"
																},
																"nativeSrc": "207:50:6",
																"nodeType": "YulFunctionCall",
																"src": "207:50:6"
															},
															"nativeSrc": "204:70:6",
															"nodeType": "YulIf",
															"src": "204:70:6"
														},
														{
															"nativeSrc": "283:15:6",
															"nodeType": "YulAssignment",
															"src": "283:15:6",
															"value": {
																"name": "value",
																"nativeSrc": "293:5:6",
																"nodeType": "YulIdentifier",
																"src": "293:5:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "283:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "14:290:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "61:9:6",
														"nodeType": "YulTypedName",
														"src": "61:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "72:7:6",
														"nodeType": "YulTypedName",
														"src": "72:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "84:6:6",
														"nodeType": "YulTypedName",
														"src": "84:6:6",
														"type": ""
													}
												],
												"src": "14:290:6"
											},
											{
												"body": {
													"nativeSrc": "410:102:6",
													"nodeType": "YulBlock",
													"src": "410:102:6",
													"statements": [
														{
															"nativeSrc": "420:26:6",
															"nodeType": "YulAssignment",
															"src": "420:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "432:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "432:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "443:2:6",
																		"nodeType": "YulLiteral",
																		"src": "443:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "428:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "428:3:6"
																},
																"nativeSrc": "428:18:6",
																"nodeType": "YulFunctionCall",
																"src": "428:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "420:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "420:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "462:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "462:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "477:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "477:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "493:3:6",
																								"nodeType": "YulLiteral",
																								"src": "493:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "498:1:6",
																								"nodeType": "YulLiteral",
																								"src": "498:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "489:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "489:3:6"
																						},
																						"nativeSrc": "489:11:6",
																						"nodeType": "YulFunctionCall",
																						"src": "489:11:6"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "502:1:6",
																						"nodeType": "YulLiteral",
																						"src": "502:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "485:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "485:3:6"
																				},
																				"nativeSrc": "485:19:6",
																				"nodeType": "YulFunctionCall",
																				"src": "485:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "473:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "473:3:6"
																		},
																		"nativeSrc": "473:32:6",
																		"nodeType": "YulFunctionCall",
																		"src": "473:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "455:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "455:6:6"
																},
																"nativeSrc": "455:51:6",
																"nodeType": "YulFunctionCall",
																"src": "455:51:6"
															},
															"nativeSrc": "455:51:6",
															"nodeType": "YulExpressionStatement",
															"src": "455:51:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "309:203:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "379:9:6",
														"nodeType": "YulTypedName",
														"src": "379:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "390:6:6",
														"nodeType": "YulTypedName",
														"src": "390:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "401:4:6",
														"nodeType": "YulTypedName",
														"src": "401:4:6",
														"type": ""
													}
												],
												"src": "309:203:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50604051610a78380380610a7883398101604081905261002e9161011f565b338061005357604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61005c816100d0565b506001600160a01b0381166100845760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517fb3113c226e7a2d90bb0324c2c6af9fc8f012eb7a61f4004619548b54acf2eb04905f90a25061014c565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6020828403121561012f575f80fd5b81516001600160a01b0381168114610145575f80fd5b9392505050565b61091f806101595f395ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c80638a62bb1611610088578063c8b6a98311610063578063c8b6a983146101d7578063e2cc3d2f146101ff578063f247d2171461022c578063f2fde38b1461023f575f80fd5b80638a62bb16146101a15780638da5cb5b146101b4578063a6e7d83f146101c4575f80fd5b80635cf25981116100c35780635cf2598114610141578063715018a6146101695780637b9cf4f314610171578063820b3d5314610199575f80fd5b80630eb9af38146100e95780631c5765751461011957806335598a021461012e575b5f80fd5b6100fc6100f736600461088a565b610252565b6040516001600160a01b0390911681526020015b60405180910390f35b61012c6101273660046108aa565b61028f565b005b61012c61013c36600461088a565b61036e565b6100fc61014f36600461088a565b60026020525f90815260409020546001600160a01b031681565b61012c6103e6565b6100fc61017f3660046108aa565b5f908152600360205260409020546001600160a01b031690565b61012c6103f9565b6100fc6101af3660046108aa565b610482565b5f546001600160a01b03166100fc565b6001546100fc906001600160a01b031681565b6100fc6101e53660046108aa565b60036020525f90815260409020546001600160a01b031681565b61021e61020d36600461088a565b60046020525f908152604090205481565b604051908152602001610110565b6100fc61023a3660046108c1565b6104f7565b61012c61024d36600461088a565b610712565b6001600160a01b038082165f90815260026020526040902054168061028a5760405163dee790fb60e01b815260040160405180910390fd5b919050565b805f036102af57604051637a93adf760e11b815260040160405180910390fd5b5f818152600360205260409020546001600160a01b0316156102e457604051631f2c68c160e31b815260040160405180910390fd5b335f9081526004602052604090205415610311576040516334b3fb3760e21b815260040160405180910390fd5b5f81815260036020908152604080832080546001600160a01b03191633908117909155808452600490925280832084905551909183917f352813b8d042518a94ed321d9dc289e197f2c4808f289e723bb13e59559f16339190a350565b610376610754565b6001600160a01b03811661039d5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517fb3113c226e7a2d90bb0324c2c6af9fc8f012eb7a61f4004619548b54acf2eb04905f90a250565b6103ee610754565b6103f75f610780565b565b335f908152600460205260408120549081900361042957604051637a93adf760e11b815260040160405180910390fd5b5f81815260036020908152604080832080546001600160a01b031916905533808452600490925280832083905551909183917fafa425487c9afa00a971354b7196fe3cfcda1835bf4c2a1027b6f21f288897629190a350565b5f818152600360205260408120546001600160a01b0316806104b757604051637a93adf760e11b815260040160405180910390fd5b6001600160a01b038082165f90815260026020526040902054169150816104f15760405163dee790fb60e01b815260040160405180910390fd5b50919050565b6001545f906001600160a01b0316610522576040516340dde93560e01b815260040160405180910390fd5b6001600160a01b0383166105495760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038381165f90815260026020526040902054161561058157604051634f10987560e01b815260040160405180910390fd5b81158015906105a557505f828152600360205260409020546001600160a01b031615155b156105c357604051631f2c68c160e31b815260040160405180910390fd5b6001546105d8906001600160a01b03166107cf565b60405163189acdbd60e31b81526001600160a01b0385811660048301529192509082169063c4d66de8906024015f604051808303815f87803b15801561061c575f80fd5b505af115801561062e573d5f803e3d5ffd5b505050506001600160a01b038381165f90815260026020526040902080546001600160a01b03191691831691909117905581156106c9575f82815260036020908152604080832080546001600160a01b0319166001600160a01b038816908117909155808452600490925280832085905551909184917f352813b8d042518a94ed321d9dc289e197f2c4808f289e723bb13e59559f16339190a35b6040516001600160a01b0382811682528391908516907f4a3920ce64f1f4f94c7d183cc35de5df87c9b0b30de1c886f490b495cb8791c89060200160405180910390a392915050565b61071a610754565b6001600160a01b03811661074857604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61075181610780565b50565b5f546001600160a01b031633146103f75760405163118cdaa760e01b815233600482015260240161073f565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6107da825f6107e0565b92915050565b5f8147101561080b5760405163cf47918160e01b81524760048201526024810183905260440161073f565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b0381166107da5760405163b06ebf3d60e01b815260040160405180910390fd5b80356001600160a01b038116811461028a575f80fd5b5f6020828403121561089a575f80fd5b6108a382610874565b9392505050565b5f602082840312156108ba575f80fd5b5035919050565b5f80604083850312156108d2575f80fd5b6108db83610874565b94602093909301359350505056fea2646970667358221220c4de30a966445f6148cbce15e7ece1efae8ca525eebcfaf5ae5f4d32c0810f5564736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xA78 CODESIZE SUB DUP1 PUSH2 0xA78 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x11F JUMP JUMPDEST CALLER DUP1 PUSH2 0x53 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5C DUP2 PUSH2 0xD0 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x84 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB3113C226E7A2D90BB0324C2C6AF9FC8F012EB7A61F4004619548B54ACF2EB04 SWAP1 PUSH0 SWAP1 LOG2 POP PUSH2 0x14C JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12F JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x145 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x91F DUP1 PUSH2 0x159 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE5 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8A62BB16 GT PUSH2 0x88 JUMPI DUP1 PUSH4 0xC8B6A983 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0xC8B6A983 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xE2CC3D2F EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0xF247D217 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x23F JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8A62BB16 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0xA6E7D83F EQ PUSH2 0x1C4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5CF25981 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0x5CF25981 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x7B9CF4F3 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x820B3D53 EQ PUSH2 0x199 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xEB9AF38 EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x1C576575 EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0x35598A02 EQ PUSH2 0x12E JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFC PUSH2 0xF7 CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x252 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12C PUSH2 0x127 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12C PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST PUSH2 0xFC PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x12C PUSH2 0x3E6 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0x8AA JUMP JUMPDEST PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x12C PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x482 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFC JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xFC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x21E PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x110 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x23A CALLDATASIZE PUSH1 0x4 PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST PUSH2 0x12C PUSH2 0x24D CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND DUP1 PUSH2 0x28A JUMPI PUSH1 0x40 MLOAD PUSH4 0xDEE790FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH0 SUB PUSH2 0x2AF JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A93ADF7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1F2C68C1 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x311 JUMPI PUSH1 0x40 MLOAD PUSH4 0x34B3FB37 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE MLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x352813B8D042518A94ED321D9DC289E197F2C4808F289E723BB13E59559F1633 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x376 PUSH2 0x754 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB3113C226E7A2D90BB0324C2C6AF9FC8F012EB7A61F4004619548B54ACF2EB04 SWAP1 PUSH0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x3EE PUSH2 0x754 JUMP JUMPDEST PUSH2 0x3F7 PUSH0 PUSH2 0x780 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x429 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A93ADF7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE MLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0xAFA425487C9AFA00A971354B7196FE3CFCDA1835BF4C2A1027B6F21F28889762 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4B7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A93ADF7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP2 POP DUP2 PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xDEE790FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH4 0x40DDE935 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x549 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4F109875 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x5A5 JUMPI POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1F2C68C1 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x5D8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x189ACDBD PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP3 AND SWAP1 PUSH4 0xC4D66DE8 SWAP1 PUSH1 0x24 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x62E JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP2 ISZERO PUSH2 0x6C9 JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE MLOAD SWAP1 SWAP2 DUP5 SWAP2 PUSH32 0x352813B8D042518A94ED321D9DC289E197F2C4808F289E723BB13E59559F1633 SWAP2 SWAP1 LOG3 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP3 MSTORE DUP4 SWAP2 SWAP1 DUP6 AND SWAP1 PUSH32 0x4A3920CE64F1F4F94C7D183CC35DE5DF87C9B0B30DE1C886F490B495CB8791C8 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x71A PUSH2 0x754 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x748 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x751 DUP2 PUSH2 0x780 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3F7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x73F JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7DA DUP3 PUSH0 PUSH2 0x7E0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SELFBALANCE LT ISZERO PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF479181 PUSH1 0xE0 SHL DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x73F JUMP JUMPDEST PUSH23 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000 DUP4 PUSH1 0x60 SHL PUSH1 0xE8 SHR OR PUSH0 MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 DUP4 PUSH1 0x78 SHL OR PUSH1 0x20 MSTORE PUSH1 0x37 PUSH1 0x9 DUP4 CREATE SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7DA JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06EBF3D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x28A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x89A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x8A3 DUP3 PUSH2 0x874 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8BA JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8D2 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x8DB DUP4 PUSH2 0x874 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 0xDE ADDRESS 0xA9 PUSH7 0x445F6148CBCE15 0xE7 0xEC 0xE1 0xEF 0xAE DUP13 0xA5 0x25 0xEE 0xBC STATICCALL CREATE2 0xAE PUSH0 0x4D ORIGIN 0xC0 DUP2 0xF SSTORE PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "989:4921:5:-:0;;;2045:278;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2099:10;;1269:95:0;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;455:51:6;428:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;;;;;;2125:38:5;::::1;2121:64;;2172:13;;-1:-1:-1::0;;;2172:13:5::1;;;;;;;;;;;2121:64;2195:23;:50:::0;;-1:-1:-1;;;;;;2195:50:5::1;-1:-1:-1::0;;;;;2195:50:5;::::1;::::0;;::::1;::::0;;;2260:56:::1;::::0;::::1;::::0;-1:-1:-1;;2260:56:5::1;2045:278:::0;989:4921;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:290:6:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:6;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:6:o;309:203::-;989:4921:5;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_checkOwner_84": {
									"entryPoint": 1876,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_558": {
									"entryPoint": null,
									"id": 558,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_146": {
									"entryPoint": 1920,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@clone_170": {
									"entryPoint": 1999,
									"id": 170,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@clone_215": {
									"entryPoint": 2016,
									"id": 215,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@createWallet_944": {
									"entryPoint": 1271,
									"id": 944,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@fidToOwner_749": {
									"entryPoint": null,
									"id": 749,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@getOwnerByFid_1074": {
									"entryPoint": null,
									"id": 1074,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getVaultByFid_1115": {
									"entryPoint": 1154,
									"id": 1115,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getVault_1061": {
									"entryPoint": 594,
									"id": 1061,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@linkFarcasterId_1000": {
									"entryPoint": 655,
									"id": 1000,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@ownerToFid_754": {
									"entryPoint": null,
									"id": 754,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ownerToVault_744": {
									"entryPoint": null,
									"id": 744,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 998,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setUserVaultImplementation_837": {
									"entryPoint": 878,
									"id": 837,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transferOwnership_126": {
									"entryPoint": 1810,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@unlinkFarcasterId_1036": {
									"entryPoint": 1017,
									"id": 1036,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@userVaultImplementation_739": {
									"entryPoint": null,
									"id": 739,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 2164,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2186,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2241,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 2218,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:1559:6",
										"nodeType": "YulBlock",
										"src": "0:1559:6",
										"statements": [
											{
												"nativeSrc": "6:3:6",
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "63:124:6",
													"nodeType": "YulBlock",
													"src": "63:124:6",
													"statements": [
														{
															"nativeSrc": "73:29:6",
															"nodeType": "YulAssignment",
															"src": "73:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "95:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "82:12:6",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:6"
																},
																"nativeSrc": "82:20:6",
																"nodeType": "YulFunctionCall",
																"src": "82:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "73:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:6"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "165:16:6",
																"nodeType": "YulBlock",
																"src": "165:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "174:1:6",
																					"nodeType": "YulLiteral",
																					"src": "174:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "177:1:6",
																					"nodeType": "YulLiteral",
																					"src": "177:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "167:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:6"
																			},
																			"nativeSrc": "167:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:6"
																		},
																		"nativeSrc": "167:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "124:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "135:5:6",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "150:3:6",
																										"nodeType": "YulLiteral",
																										"src": "150:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "155:1:6",
																										"nodeType": "YulLiteral",
																										"src": "155:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "146:3:6",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:6"
																								},
																								"nativeSrc": "146:11:6",
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:6"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "159:1:6",
																								"nodeType": "YulLiteral",
																								"src": "159:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "142:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:6"
																						},
																						"nativeSrc": "142:19:6",
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "131:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:6"
																				},
																				"nativeSrc": "131:31:6",
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "121:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:6"
																		},
																		"nativeSrc": "121:42:6",
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "114:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:6"
																},
																"nativeSrc": "114:50:6",
																"nodeType": "YulFunctionCall",
																"src": "114:50:6"
															},
															"nativeSrc": "111:70:6",
															"nodeType": "YulIf",
															"src": "111:70:6"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "14:173:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "42:6:6",
														"nodeType": "YulTypedName",
														"src": "42:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "53:5:6",
														"nodeType": "YulTypedName",
														"src": "53:5:6",
														"type": ""
													}
												],
												"src": "14:173:6"
											},
											{
												"body": {
													"nativeSrc": "262:116:6",
													"nodeType": "YulBlock",
													"src": "262:116:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "308:16:6",
																"nodeType": "YulBlock",
																"src": "308:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "317:1:6",
																					"nodeType": "YulLiteral",
																					"src": "317:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "320:1:6",
																					"nodeType": "YulLiteral",
																					"src": "320:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "310:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:6"
																			},
																			"nativeSrc": "310:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "310:12:6"
																		},
																		"nativeSrc": "310:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "310:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "283:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "292:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "279:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:6"
																		},
																		"nativeSrc": "279:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "304:2:6",
																		"nodeType": "YulLiteral",
																		"src": "304:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "275:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:6"
																},
																"nativeSrc": "275:32:6",
																"nodeType": "YulFunctionCall",
																"src": "275:32:6"
															},
															"nativeSrc": "272:52:6",
															"nodeType": "YulIf",
															"src": "272:52:6"
														},
														{
															"nativeSrc": "333:39:6",
															"nodeType": "YulAssignment",
															"src": "333:39:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "362:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "362:9:6"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "343:18:6",
																	"nodeType": "YulIdentifier",
																	"src": "343:18:6"
																},
																"nativeSrc": "343:29:6",
																"nodeType": "YulFunctionCall",
																"src": "343:29:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "333:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "333:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "192:186:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "228:9:6",
														"nodeType": "YulTypedName",
														"src": "228:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "239:7:6",
														"nodeType": "YulTypedName",
														"src": "239:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "251:6:6",
														"nodeType": "YulTypedName",
														"src": "251:6:6",
														"type": ""
													}
												],
												"src": "192:186:6"
											},
											{
												"body": {
													"nativeSrc": "484:102:6",
													"nodeType": "YulBlock",
													"src": "484:102:6",
													"statements": [
														{
															"nativeSrc": "494:26:6",
															"nodeType": "YulAssignment",
															"src": "494:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "506:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "506:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "517:2:6",
																		"nodeType": "YulLiteral",
																		"src": "517:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "502:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:6"
																},
																"nativeSrc": "502:18:6",
																"nodeType": "YulFunctionCall",
																"src": "502:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "494:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "536:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "536:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "551:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "551:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "567:3:6",
																								"nodeType": "YulLiteral",
																								"src": "567:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "572:1:6",
																								"nodeType": "YulLiteral",
																								"src": "572:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "563:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "563:3:6"
																						},
																						"nativeSrc": "563:11:6",
																						"nodeType": "YulFunctionCall",
																						"src": "563:11:6"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "576:1:6",
																						"nodeType": "YulLiteral",
																						"src": "576:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "559:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "559:3:6"
																				},
																				"nativeSrc": "559:19:6",
																				"nodeType": "YulFunctionCall",
																				"src": "559:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "547:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "547:3:6"
																		},
																		"nativeSrc": "547:32:6",
																		"nodeType": "YulFunctionCall",
																		"src": "547:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "529:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "529:6:6"
																},
																"nativeSrc": "529:51:6",
																"nodeType": "YulFunctionCall",
																"src": "529:51:6"
															},
															"nativeSrc": "529:51:6",
															"nodeType": "YulExpressionStatement",
															"src": "529:51:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "383:203:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "453:9:6",
														"nodeType": "YulTypedName",
														"src": "453:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "464:6:6",
														"nodeType": "YulTypedName",
														"src": "464:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "475:4:6",
														"nodeType": "YulTypedName",
														"src": "475:4:6",
														"type": ""
													}
												],
												"src": "383:203:6"
											},
											{
												"body": {
													"nativeSrc": "661:156:6",
													"nodeType": "YulBlock",
													"src": "661:156:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "707:16:6",
																"nodeType": "YulBlock",
																"src": "707:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "716:1:6",
																					"nodeType": "YulLiteral",
																					"src": "716:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "719:1:6",
																					"nodeType": "YulLiteral",
																					"src": "719:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "709:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "709:6:6"
																			},
																			"nativeSrc": "709:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "709:12:6"
																		},
																		"nativeSrc": "709:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "709:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "682:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "682:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "691:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "691:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "678:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "678:3:6"
																		},
																		"nativeSrc": "678:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "678:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "703:2:6",
																		"nodeType": "YulLiteral",
																		"src": "703:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "674:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "674:3:6"
																},
																"nativeSrc": "674:32:6",
																"nodeType": "YulFunctionCall",
																"src": "674:32:6"
															},
															"nativeSrc": "671:52:6",
															"nodeType": "YulIf",
															"src": "671:52:6"
														},
														{
															"nativeSrc": "732:14:6",
															"nodeType": "YulVariableDeclaration",
															"src": "732:14:6",
															"value": {
																"kind": "number",
																"nativeSrc": "745:1:6",
																"nodeType": "YulLiteral",
																"src": "745:1:6",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "736:5:6",
																	"nodeType": "YulTypedName",
																	"src": "736:5:6",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "755:32:6",
															"nodeType": "YulAssignment",
															"src": "755:32:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "777:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "777:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "764:12:6",
																	"nodeType": "YulIdentifier",
																	"src": "764:12:6"
																},
																"nativeSrc": "764:23:6",
																"nodeType": "YulFunctionCall",
																"src": "764:23:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "755:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "755:5:6"
																}
															]
														},
														{
															"nativeSrc": "796:15:6",
															"nodeType": "YulAssignment",
															"src": "796:15:6",
															"value": {
																"name": "value",
																"nativeSrc": "806:5:6",
																"nodeType": "YulIdentifier",
																"src": "806:5:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "796:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "796:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "591:226:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "627:9:6",
														"nodeType": "YulTypedName",
														"src": "627:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "638:7:6",
														"nodeType": "YulTypedName",
														"src": "638:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "650:6:6",
														"nodeType": "YulTypedName",
														"src": "650:6:6",
														"type": ""
													}
												],
												"src": "591:226:6"
											},
											{
												"body": {
													"nativeSrc": "923:76:6",
													"nodeType": "YulBlock",
													"src": "923:76:6",
													"statements": [
														{
															"nativeSrc": "933:26:6",
															"nodeType": "YulAssignment",
															"src": "933:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "945:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "945:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "956:2:6",
																		"nodeType": "YulLiteral",
																		"src": "956:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "941:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "941:3:6"
																},
																"nativeSrc": "941:18:6",
																"nodeType": "YulFunctionCall",
																"src": "941:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "933:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "933:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "975:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "975:9:6"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "986:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "986:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "968:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "968:6:6"
																},
																"nativeSrc": "968:25:6",
																"nodeType": "YulFunctionCall",
																"src": "968:25:6"
															},
															"nativeSrc": "968:25:6",
															"nodeType": "YulExpressionStatement",
															"src": "968:25:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "822:177:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "892:9:6",
														"nodeType": "YulTypedName",
														"src": "892:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "903:6:6",
														"nodeType": "YulTypedName",
														"src": "903:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "914:4:6",
														"nodeType": "YulTypedName",
														"src": "914:4:6",
														"type": ""
													}
												],
												"src": "822:177:6"
											},
											{
												"body": {
													"nativeSrc": "1091:213:6",
													"nodeType": "YulBlock",
													"src": "1091:213:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "1137:16:6",
																"nodeType": "YulBlock",
																"src": "1137:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1146:1:6",
																					"nodeType": "YulLiteral",
																					"src": "1146:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1149:1:6",
																					"nodeType": "YulLiteral",
																					"src": "1149:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1139:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "1139:6:6"
																			},
																			"nativeSrc": "1139:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "1139:12:6"
																		},
																		"nativeSrc": "1139:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "1139:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1112:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "1112:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1121:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1121:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1108:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1108:3:6"
																		},
																		"nativeSrc": "1108:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1108:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1133:2:6",
																		"nodeType": "YulLiteral",
																		"src": "1133:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1104:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "1104:3:6"
																},
																"nativeSrc": "1104:32:6",
																"nodeType": "YulFunctionCall",
																"src": "1104:32:6"
															},
															"nativeSrc": "1101:52:6",
															"nodeType": "YulIf",
															"src": "1101:52:6"
														},
														{
															"nativeSrc": "1162:39:6",
															"nodeType": "YulAssignment",
															"src": "1162:39:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1191:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1191:9:6"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1172:18:6",
																	"nodeType": "YulIdentifier",
																	"src": "1172:18:6"
																},
																"nativeSrc": "1172:29:6",
																"nodeType": "YulFunctionCall",
																"src": "1172:29:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1162:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1162:6:6"
																}
															]
														},
														{
															"nativeSrc": "1210:14:6",
															"nodeType": "YulVariableDeclaration",
															"src": "1210:14:6",
															"value": {
																"kind": "number",
																"nativeSrc": "1223:1:6",
																"nodeType": "YulLiteral",
																"src": "1223:1:6",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1214:5:6",
																	"nodeType": "YulTypedName",
																	"src": "1214:5:6",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1233:41:6",
															"nodeType": "YulAssignment",
															"src": "1233:41:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1259:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1259:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1270:2:6",
																				"nodeType": "YulLiteral",
																				"src": "1270:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1255:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1255:3:6"
																		},
																		"nativeSrc": "1255:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1255:18:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1242:12:6",
																	"nodeType": "YulIdentifier",
																	"src": "1242:12:6"
																},
																"nativeSrc": "1242:32:6",
																"nodeType": "YulFunctionCall",
																"src": "1242:32:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1233:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "1233:5:6"
																}
															]
														},
														{
															"nativeSrc": "1283:15:6",
															"nodeType": "YulAssignment",
															"src": "1283:15:6",
															"value": {
																"name": "value",
																"nativeSrc": "1293:5:6",
																"nodeType": "YulIdentifier",
																"src": "1293:5:6"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1283:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1283:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "1004:300:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1049:9:6",
														"nodeType": "YulTypedName",
														"src": "1049:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1060:7:6",
														"nodeType": "YulTypedName",
														"src": "1060:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1072:6:6",
														"nodeType": "YulTypedName",
														"src": "1072:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1080:6:6",
														"nodeType": "YulTypedName",
														"src": "1080:6:6",
														"type": ""
													}
												],
												"src": "1004:300:6"
											},
											{
												"body": {
													"nativeSrc": "1438:119:6",
													"nodeType": "YulBlock",
													"src": "1438:119:6",
													"statements": [
														{
															"nativeSrc": "1448:26:6",
															"nodeType": "YulAssignment",
															"src": "1448:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1460:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1460:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1471:2:6",
																		"nodeType": "YulLiteral",
																		"src": "1471:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1456:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "1456:3:6"
																},
																"nativeSrc": "1456:18:6",
																"nodeType": "YulFunctionCall",
																"src": "1456:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1448:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "1448:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1490:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1490:9:6"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1501:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "1501:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1483:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1483:6:6"
																},
																"nativeSrc": "1483:25:6",
																"nodeType": "YulFunctionCall",
																"src": "1483:25:6"
															},
															"nativeSrc": "1483:25:6",
															"nodeType": "YulExpressionStatement",
															"src": "1483:25:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1528:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1528:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1539:2:6",
																				"nodeType": "YulLiteral",
																				"src": "1539:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1524:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1524:3:6"
																		},
																		"nativeSrc": "1524:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1524:18:6"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "1544:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "1544:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1517:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1517:6:6"
																},
																"nativeSrc": "1517:34:6",
																"nodeType": "YulFunctionCall",
																"src": "1517:34:6"
															},
															"nativeSrc": "1517:34:6",
															"nodeType": "YulExpressionStatement",
															"src": "1517:34:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "1309:248:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1399:9:6",
														"nodeType": "YulTypedName",
														"src": "1399:9:6",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1410:6:6",
														"nodeType": "YulTypedName",
														"src": "1410:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1418:6:6",
														"nodeType": "YulTypedName",
														"src": "1418:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1429:4:6",
														"nodeType": "YulTypedName",
														"src": "1429:4:6",
														"type": ""
													}
												],
												"src": "1309:248:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50600436106100e5575f3560e01c80638a62bb1611610088578063c8b6a98311610063578063c8b6a983146101d7578063e2cc3d2f146101ff578063f247d2171461022c578063f2fde38b1461023f575f80fd5b80638a62bb16146101a15780638da5cb5b146101b4578063a6e7d83f146101c4575f80fd5b80635cf25981116100c35780635cf2598114610141578063715018a6146101695780637b9cf4f314610171578063820b3d5314610199575f80fd5b80630eb9af38146100e95780631c5765751461011957806335598a021461012e575b5f80fd5b6100fc6100f736600461088a565b610252565b6040516001600160a01b0390911681526020015b60405180910390f35b61012c6101273660046108aa565b61028f565b005b61012c61013c36600461088a565b61036e565b6100fc61014f36600461088a565b60026020525f90815260409020546001600160a01b031681565b61012c6103e6565b6100fc61017f3660046108aa565b5f908152600360205260409020546001600160a01b031690565b61012c6103f9565b6100fc6101af3660046108aa565b610482565b5f546001600160a01b03166100fc565b6001546100fc906001600160a01b031681565b6100fc6101e53660046108aa565b60036020525f90815260409020546001600160a01b031681565b61021e61020d36600461088a565b60046020525f908152604090205481565b604051908152602001610110565b6100fc61023a3660046108c1565b6104f7565b61012c61024d36600461088a565b610712565b6001600160a01b038082165f90815260026020526040902054168061028a5760405163dee790fb60e01b815260040160405180910390fd5b919050565b805f036102af57604051637a93adf760e11b815260040160405180910390fd5b5f818152600360205260409020546001600160a01b0316156102e457604051631f2c68c160e31b815260040160405180910390fd5b335f9081526004602052604090205415610311576040516334b3fb3760e21b815260040160405180910390fd5b5f81815260036020908152604080832080546001600160a01b03191633908117909155808452600490925280832084905551909183917f352813b8d042518a94ed321d9dc289e197f2c4808f289e723bb13e59559f16339190a350565b610376610754565b6001600160a01b03811661039d5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517fb3113c226e7a2d90bb0324c2c6af9fc8f012eb7a61f4004619548b54acf2eb04905f90a250565b6103ee610754565b6103f75f610780565b565b335f908152600460205260408120549081900361042957604051637a93adf760e11b815260040160405180910390fd5b5f81815260036020908152604080832080546001600160a01b031916905533808452600490925280832083905551909183917fafa425487c9afa00a971354b7196fe3cfcda1835bf4c2a1027b6f21f288897629190a350565b5f818152600360205260408120546001600160a01b0316806104b757604051637a93adf760e11b815260040160405180910390fd5b6001600160a01b038082165f90815260026020526040902054169150816104f15760405163dee790fb60e01b815260040160405180910390fd5b50919050565b6001545f906001600160a01b0316610522576040516340dde93560e01b815260040160405180910390fd5b6001600160a01b0383166105495760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038381165f90815260026020526040902054161561058157604051634f10987560e01b815260040160405180910390fd5b81158015906105a557505f828152600360205260409020546001600160a01b031615155b156105c357604051631f2c68c160e31b815260040160405180910390fd5b6001546105d8906001600160a01b03166107cf565b60405163189acdbd60e31b81526001600160a01b0385811660048301529192509082169063c4d66de8906024015f604051808303815f87803b15801561061c575f80fd5b505af115801561062e573d5f803e3d5ffd5b505050506001600160a01b038381165f90815260026020526040902080546001600160a01b03191691831691909117905581156106c9575f82815260036020908152604080832080546001600160a01b0319166001600160a01b038816908117909155808452600490925280832085905551909184917f352813b8d042518a94ed321d9dc289e197f2c4808f289e723bb13e59559f16339190a35b6040516001600160a01b0382811682528391908516907f4a3920ce64f1f4f94c7d183cc35de5df87c9b0b30de1c886f490b495cb8791c89060200160405180910390a392915050565b61071a610754565b6001600160a01b03811661074857604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61075181610780565b50565b5f546001600160a01b031633146103f75760405163118cdaa760e01b815233600482015260240161073f565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6107da825f6107e0565b92915050565b5f8147101561080b5760405163cf47918160e01b81524760048201526024810183905260440161073f565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b0381166107da5760405163b06ebf3d60e01b815260040160405180910390fd5b80356001600160a01b038116811461028a575f80fd5b5f6020828403121561089a575f80fd5b6108a382610874565b9392505050565b5f602082840312156108ba575f80fd5b5035919050565b5f80604083850312156108d2575f80fd5b6108db83610874565b94602093909301359350505056fea2646970667358221220c4de30a966445f6148cbce15e7ece1efae8ca525eebcfaf5ae5f4d32c0810f5564736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE5 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8A62BB16 GT PUSH2 0x88 JUMPI DUP1 PUSH4 0xC8B6A983 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0xC8B6A983 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xE2CC3D2F EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0xF247D217 EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x23F JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8A62BB16 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0xA6E7D83F EQ PUSH2 0x1C4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5CF25981 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0x5CF25981 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x7B9CF4F3 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x820B3D53 EQ PUSH2 0x199 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xEB9AF38 EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x1C576575 EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0x35598A02 EQ PUSH2 0x12E JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFC PUSH2 0xF7 CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x252 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12C PUSH2 0x127 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12C PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST PUSH2 0xFC PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x12C PUSH2 0x3E6 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0x8AA JUMP JUMPDEST PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x12C PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x482 JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFC JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xFC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AA JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x21E PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x110 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x23A CALLDATASIZE PUSH1 0x4 PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST PUSH2 0x12C PUSH2 0x24D CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND DUP1 PUSH2 0x28A JUMPI PUSH1 0x40 MLOAD PUSH4 0xDEE790FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH0 SUB PUSH2 0x2AF JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A93ADF7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1F2C68C1 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x311 JUMPI PUSH1 0x40 MLOAD PUSH4 0x34B3FB37 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE MLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x352813B8D042518A94ED321D9DC289E197F2C4808F289E723BB13E59559F1633 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x376 PUSH2 0x754 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xB3113C226E7A2D90BB0324C2C6AF9FC8F012EB7A61F4004619548B54ACF2EB04 SWAP1 PUSH0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x3EE PUSH2 0x754 JUMP JUMPDEST PUSH2 0x3F7 PUSH0 PUSH2 0x780 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 0x429 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A93ADF7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE MLOAD SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0xAFA425487C9AFA00A971354B7196FE3CFCDA1835BF4C2A1027B6F21F28889762 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4B7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A93ADF7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP2 POP DUP2 PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xDEE790FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH4 0x40DDE935 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x549 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4F109875 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x5A5 JUMPI POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1F2C68C1 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x5D8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7CF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x189ACDBD PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP3 AND SWAP1 PUSH4 0xC4D66DE8 SWAP1 PUSH1 0x24 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x61C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x62E JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 DUP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP2 ISZERO PUSH2 0x6C9 JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE MLOAD SWAP1 SWAP2 DUP5 SWAP2 PUSH32 0x352813B8D042518A94ED321D9DC289E197F2C4808F289E723BB13E59559F1633 SWAP2 SWAP1 LOG3 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP3 MSTORE DUP4 SWAP2 SWAP1 DUP6 AND SWAP1 PUSH32 0x4A3920CE64F1F4F94C7D183CC35DE5DF87C9B0B30DE1C886F490B495CB8791C8 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x71A PUSH2 0x754 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x748 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x751 DUP2 PUSH2 0x780 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3F7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x73F JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7DA DUP3 PUSH0 PUSH2 0x7E0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SELFBALANCE LT ISZERO PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF479181 PUSH1 0xE0 SHL DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x73F JUMP JUMPDEST PUSH23 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000 DUP4 PUSH1 0x60 SHL PUSH1 0xE8 SHR OR PUSH0 MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 DUP4 PUSH1 0x78 SHL OR PUSH1 0x20 MSTORE PUSH1 0x37 PUSH1 0x9 DUP4 CREATE SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7DA JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06EBF3D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x28A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x89A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x8A3 DUP3 PUSH2 0x874 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8BA JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8D2 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x8DB DUP4 PUSH2 0x874 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 0xDE ADDRESS 0xA9 PUSH7 0x445F6148CBCE15 0xE7 0xEC 0xE1 0xEF 0xAE DUP13 0xA5 0x25 0xEE 0xBC STATICCALL CREATE2 0xAE PUSH0 0x4D ORIGIN 0xC0 DUP2 0xF SSTORE PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "989:4921:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5183:174;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;547:32:6;;;529:51;;517:2;502:18;5183:174:5;;;;;;;;4333:363;;;;;;:::i;:::-;;:::i;:::-;;2512:265;;;;;;:::i;:::-;;:::i;1224:47::-;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1224:47:5;;;2293:101:0;;;:::i;5435:109:5:-;;;;;;:::i;:::-;5495:7;5521:16;;;:10;:16;;;;;;-1:-1:-1;;;;;5521:16:5;;5435:109;4778:303;;;:::i;5631:277::-;;;;;;:::i;:::-;;:::i;1638:85:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;1638:85;;1133:38:5;;;;;-1:-1:-1;;;;;1133:38:5;;;1332:45;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1332:45:5;;;1434;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;968:25:6;;;956:2;941:18;1434:45:5;822:177:6;3234:887:5;;;;;;:::i;:::-;;:::i;2543:215:0:-;;;;;;:::i;:::-;;:::i;5183:174:5:-;-1:-1:-1;;;;;5273:20:5;;;5240:13;5273:20;;;:12;:20;;;;;;;;5303:47;;5335:15;;-1:-1:-1;;;5335:15:5;;;;;;;;;;;5303:47;5183:174;;;:::o;4333:363::-;4395:4;4403:1;4395:9;4391:36;;4413:14;;-1:-1:-1;;;4413:14:5;;;;;;;;;;;4391:36;4469:1;4441:16;;;:10;:16;;;;;;-1:-1:-1;;;;;4441:16:5;:30;4437:61;;4480:18;;-1:-1:-1;;;4480:18:5;;;;;;;;;;;4437:61;4523:10;4512:22;;;;:10;:22;;;;;;:27;4508:60;;4548:20;;-1:-1:-1;;;4548:20:5;;;;;;;;;;;4508:60;4579:16;;;;:10;:16;;;;;;;;:29;;-1:-1:-1;;;;;;4579:29:5;4598:10;4579:29;;;;;;4618:22;;;:10;:22;;;;;;:29;;;4662:27;4598:10;;4590:4;;4662:27;;4579:16;4662:27;4333:363;:::o;2512:265::-;1531:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;2606:29:5;::::1;2602:55;;2644:13;;-1:-1:-1::0;;;2644:13:5::1;;;;;;;;;;;2602:55;2667:23;:41:::0;;-1:-1:-1;;;;;;2667:41:5::1;-1:-1:-1::0;;;;;2667:41:5;::::1;::::0;;::::1;::::0;;;2723:47:::1;::::0;::::1;::::0;-1:-1:-1;;2723:47:5::1;2512:265:::0;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;4778:303:5:-;4856:10;4826:16;4845:22;;;:10;:22;;;;;;;4881:13;;;4877:40;;4903:14;;-1:-1:-1;;;4903:14:5;;;;;;;;;;;4877:40;4966:20;;;;:10;:20;;;;;;;;4959:27;;-1:-1:-1;;;;;;4959:27:5;;;5014:10;5003:22;;;:10;:22;;;;;;4996:29;;;5041:33;5014:10;;4977:8;;5041:33;;4966:20;5041:33;4816:265;4778:303::o;5631:277::-;5691:13;5733:16;;;:10;:16;;;;;;-1:-1:-1;;;;;5733:16:5;;5759:47;;5792:14;;-1:-1:-1;;;5792:14:5;;;;;;;;;;;5759:47;-1:-1:-1;;;;;5824:20:5;;;;;;;:12;:20;;;;;;;;-1:-1:-1;5824:20:5;5854:47;;5886:15;;-1:-1:-1;;;5886:15:5;;;;;;;;;;;5854:47;5706:202;5631:277;;;:::o;3234:887::-;3333:23;;3304:13;;-1:-1:-1;;;;;3333:23:5;3329:72;;3379:22;;-1:-1:-1;;;3379:22:5;;;;;;;;;;;3329:72;-1:-1:-1;;;;;3415:20:5;;3411:46;;3444:13;;-1:-1:-1;;;3444:13:5;;;;;;;;;;;3411:46;-1:-1:-1;;;;;3471:20:5;;;3503:1;3471:20;;;:12;:20;;;;;;;:34;3467:64;;3514:17;;-1:-1:-1;;;3514:17:5;;;;;;;;;;;3467:64;3545:9;;;;;:43;;-1:-1:-1;3586:1:5;3558:16;;;:10;:16;;;;;;-1:-1:-1;;;;;3558:16:5;:30;;3545:43;3541:74;;;3597:18;;-1:-1:-1;;;3597:18:5;;;;;;;;;;;3541:74;3685:23;;3672:37;;-1:-1:-1;;;;;3685:23:5;3672:12;:37::i;:::-;3769:36;;-1:-1:-1;;;3769:36:5;;-1:-1:-1;;;;;547:32:6;;;3769:36:5;;;529:51:6;3664:45:5;;-1:-1:-1;3769:28:5;;;;;;502:18:6;;3769:36:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;3849:20:5;;;;;;;:12;:20;;;;;:28;;-1:-1:-1;;;;;;3849:28:5;;;;;;;;;;3923:9;;3919:146;;3948:16;;;;:10;:16;;;;;;;;:25;;-1:-1:-1;;;;;;3948:25:5;-1:-1:-1;;;;;3948:25:5;;;;;;;;3987:18;;;:10;:18;;;;;;:25;;;4031:23;3948:25;;:16;;4031:23;;3948:16;4031:23;3919:146;4080:34;;-1:-1:-1;;;;;547:32:6;;;529:51;;4102:4:5;;4080:34;;;;;;517:2:6;502:18;4080:34:5;;;;;;;3234:887;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;529:51:6::0;502:18;;2672:31:0::1;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:2;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:2;1901:40:0;;;529:51:6;502:18;;1901:40:0;383:203:6;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;1405:123:1:-;1462:16;1497:24;1503:14;1519:1;1497:5;:24::i;:::-;1490:31;1405:123;-1:-1:-1;;1405:123:1:o;2255:910::-;2327:16;2383:5;2359:21;:29;2355:123;;;2411:56;;-1:-1:-1;;;2411:56:1;;2438:21;2411:56;;;1483:25:6;1524:18;;;1517:34;;;1456:18;;2411:56:1;1309:248:6;2355:123:1;2764:48;2746:14;2740:4;2736:25;2730:4;2726:36;2723:90;2717:4;2710:104;2971:32;2954:14;2948:4;2944:25;2941:63;2935:4;2928:77;3050:4;3044;3037:5;3030:25;3018:37;-1:-1:-1;;;;;;3078:22:1;;3074:85;;3123:25;;-1:-1:-1;;;3123:25:1;;;;;;;;;;;14:173:6;82:20;;-1:-1:-1;;;;;131:31:6;;121:42;;111:70;;177:1;174;167:12;192:186;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:6:o;591:226::-;650:6;703:2;691:9;682:7;678:23;674:32;671:52;;;719:1;716;709:12;671:52;-1:-1:-1;764:23:6;;591:226;-1:-1:-1;591:226:6:o;1004:300::-;1072:6;1080;1133:2;1121:9;1112:7;1108:23;1104:32;1101:52;;;1149:1;1146;1139:12;1101:52;1172:29;1191:9;1172:29;:::i;:::-;1162:39;1270:2;1255:18;;;;1242:32;;-1:-1:-1;;;1004:300:6:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "467000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"createWallet(address,uint256)": "infinite",
								"fidToOwner(uint256)": "2485",
								"getOwnerByFid(uint256)": "2530",
								"getVault(address)": "infinite",
								"getVaultByFid(uint256)": "4739",
								"linkFarcasterId(uint256)": "52696",
								"owner()": "2363",
								"ownerToFid(address)": "2560",
								"ownerToVault(address)": "2567",
								"renounceOwnership()": "infinite",
								"setUserVaultImplementation(address)": "27973",
								"transferOwnership(address)": "28417",
								"unlinkFarcasterId()": "33335",
								"userVaultImplementation()": "2392"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 989,
									"end": 5910,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "CODESIZE",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 2045,
									"end": 2323,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "tag",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2099,
									"end": 2109,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 2099,
									"end": 2109,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 455,
									"end": 506,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 428,
									"end": 446,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 428,
									"end": 446,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2125,
									"end": 2163,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2125,
									"end": 2163,
									"modifierDepth": 1,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 2121,
									"end": 2185,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 2121,
									"end": 2185,
									"modifierDepth": 1,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "D92E233D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2172,
									"end": 2185,
									"modifierDepth": 1,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 2121,
									"end": 2185,
									"modifierDepth": 1,
									"name": "tag",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 2121,
									"end": 2185,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2218,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 2195,
									"end": 2245,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2245,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2195,
									"end": 2245,
									"modifierDepth": 1,
									"name": "AND",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2195,
									"end": 2245,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2245,
									"modifierDepth": 1,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2245,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2245,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2245,
									"modifierDepth": 1,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2245,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2245,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 2195,
									"end": 2245,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 2260,
									"end": 2316,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 2260,
									"end": 2316,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 2260,
									"end": 2316,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 5,
									"value": "B3113C226E7A2D90BB0324C2C6AF9FC8F012EB7A61F4004619548B54ACF2EB04"
								},
								{
									"begin": 2260,
									"end": 2316,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": 2260,
									"end": 2316,
									"modifierDepth": 1,
									"name": "LOG2",
									"source": 5
								},
								{
									"begin": 2045,
									"end": 2323,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 6
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "19"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 6,
									"value": "19"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 309,
									"end": 512,
									"name": "tag",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 309,
									"end": 512,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 989,
									"end": 5910,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c4de30a966445f6148cbce15e7ece1efae8ca525eebcfaf5ae5f4d32c0810f5564736f6c634300081a0033",
									".code": [
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "8A62BB16"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "C8B6A983"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "C8B6A983"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "E2CC3D2F"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "F247D217"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "F2FDE38B"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "tag",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "8A62BB16"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "8DA5CB5B"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "A6E7D83F"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "tag",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "5CF25981"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "5CF25981"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "715018A6"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "7B9CF4F3"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "820B3D53"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "EB9AF38"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "1C576575"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "35598A02"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 989,
											"end": 5910,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 5183,
											"end": 5357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "tag",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 5183,
											"end": 5357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "tag",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 547,
											"end": 579,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 547,
											"end": 579,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 529,
											"end": 580,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 4333,
											"end": 4696,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "tag",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 4333,
											"end": 4696,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "tag",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 2512,
											"end": 2777,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "tag",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 2512,
											"end": 2777,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 1224,
											"end": 1271,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "tag",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1224,
											"end": 1271,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 5435,
											"end": 5544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "tag",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5495,
											"end": 5502,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5521,
											"end": 5531,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5521,
											"end": 5537,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5435,
											"end": 5544,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4778,
											"end": 5081,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 4778,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4778,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 4778,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 4778,
											"end": 5081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 5631,
											"end": 5908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "tag",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 5631,
											"end": 5908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1133,
											"end": 1171,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 1332,
											"end": 1377,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "tag",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1332,
											"end": 1377,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 1434,
											"end": 1479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "tag",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 968,
											"end": 993,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 968,
											"end": 993,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 968,
											"end": 993,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 956,
											"end": 958,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 941,
											"end": 959,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1434,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 822,
											"end": 999,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 3234,
											"end": 4121,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "tag",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 3234,
											"end": 4121,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5240,
											"end": 5253,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5285,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5273,
											"end": 5293,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5303,
											"end": 5350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 5303,
											"end": 5350,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DEE790FB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5335,
											"end": 5350,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5303,
											"end": 5350,
											"name": "tag",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 5303,
											"end": 5350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5183,
											"end": 5357,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "tag",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4395,
											"end": 4399,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4403,
											"end": 4404,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4395,
											"end": 4404,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4391,
											"end": 4427,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 4391,
											"end": 4427,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7A93ADF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4413,
											"end": 4427,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4391,
											"end": 4427,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 4391,
											"end": 4427,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4469,
											"end": 4470,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4441,
											"end": 4451,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 4441,
											"end": 4471,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4437,
											"end": 4498,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 4437,
											"end": 4498,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F2C68C1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4480,
											"end": 4498,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4437,
											"end": 4498,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 4437,
											"end": 4498,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4523,
											"end": 4533,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4512,
											"end": 4522,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4512,
											"end": 4534,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4512,
											"end": 4539,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4508,
											"end": 4568,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 4508,
											"end": 4568,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "34B3FB37"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4548,
											"end": 4568,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4508,
											"end": 4568,
											"name": "tag",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 4508,
											"end": 4568,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4589,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 4598,
											"end": 4608,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4608,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4628,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4640,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4647,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4647,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4618,
											"end": 4647,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 4662,
											"end": 4689,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4598,
											"end": 4608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4598,
											"end": 4608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4590,
											"end": 4594,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4590,
											"end": 4594,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4662,
											"end": 4689,
											"name": "PUSH",
											"source": 5,
											"value": "352813B8D042518A94ED321D9DC289E197F2C4808F289E723BB13E59559F1633"
										},
										{
											"begin": 4662,
											"end": 4689,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4579,
											"end": 4595,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4662,
											"end": 4689,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4333,
											"end": 4696,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "tag",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2606,
											"end": 2635,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2606,
											"end": 2635,
											"modifierDepth": 1,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2602,
											"end": 2657,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 2602,
											"end": 2657,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D92E233D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2644,
											"end": 2657,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2602,
											"end": 2657,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 2602,
											"end": 2657,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2690,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2667,
											"end": 2708,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2708,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2667,
											"end": 2708,
											"modifierDepth": 1,
											"name": "AND",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2667,
											"end": 2708,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2708,
											"modifierDepth": 1,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2708,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2708,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2708,
											"modifierDepth": 1,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2708,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2708,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2667,
											"end": 2708,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2723,
											"end": 2770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2723,
											"end": 2770,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2723,
											"end": 2770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "B3113C226E7A2D90BB0324C2C6AF9FC8F012EB7A61F4004619548B54ACF2EB04"
										},
										{
											"begin": 2723,
											"end": 2770,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 2723,
											"end": 2770,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 5
										},
										{
											"begin": 2512,
											"end": 2777,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2512,
											"end": 2777,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4778,
											"end": 5081,
											"name": "tag",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 4778,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4856,
											"end": 4866,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4826,
											"end": 4842,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4845,
											"end": 4855,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4845,
											"end": 4867,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4881,
											"end": 4894,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4881,
											"end": 4894,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4881,
											"end": 4894,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4877,
											"end": 4917,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 4877,
											"end": 4917,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7A93ADF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4903,
											"end": 4917,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4877,
											"end": 4917,
											"name": "tag",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 4877,
											"end": 4917,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4976,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 4986,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 4986,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4959,
											"end": 4986,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 4986,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 4986,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 5014,
											"end": 5024,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5013,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5025,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4996,
											"end": 5025,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4996,
											"end": 5025,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4996,
											"end": 5025,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 5041,
											"end": 5074,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5014,
											"end": 5024,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5014,
											"end": 5024,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4977,
											"end": 4985,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4977,
											"end": 4985,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5041,
											"end": 5074,
											"name": "PUSH",
											"source": 5,
											"value": "AFA425487C9AFA00A971354B7196FE3CFCDA1835BF4C2A1027B6F21F28889762"
										},
										{
											"begin": 5041,
											"end": 5074,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4966,
											"end": 4986,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5041,
											"end": 5074,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 4816,
											"end": 5081,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4778,
											"end": 5081,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "tag",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5691,
											"end": 5704,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5733,
											"end": 5743,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5733,
											"end": 5749,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5759,
											"end": 5806,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "92"
										},
										{
											"begin": 5759,
											"end": 5806,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7A93ADF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5792,
											"end": 5806,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5759,
											"end": 5806,
											"name": "tag",
											"source": 5,
											"value": "92"
										},
										{
											"begin": 5759,
											"end": 5806,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5836,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5824,
											"end": 5844,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5854,
											"end": 5901,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 5854,
											"end": 5901,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DEE790FB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5886,
											"end": 5901,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5854,
											"end": 5901,
											"name": "tag",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 5854,
											"end": 5901,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5706,
											"end": 5908,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5631,
											"end": 5908,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "tag",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3333,
											"end": 3356,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3333,
											"end": 3356,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3304,
											"end": 3317,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3304,
											"end": 3317,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3333,
											"end": 3356,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3329,
											"end": 3401,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 3329,
											"end": 3401,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40DDE935"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3329,
											"end": 3401,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 3329,
											"end": 3401,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3415,
											"end": 3435,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3415,
											"end": 3435,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3411,
											"end": 3457,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 3411,
											"end": 3457,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D92E233D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3444,
											"end": 3457,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3411,
											"end": 3457,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 3411,
											"end": 3457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3503,
											"end": 3504,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3483,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3491,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3471,
											"end": 3505,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3467,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 3467,
											"end": 3531,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F109875"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3514,
											"end": 3531,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3467,
											"end": 3531,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 3467,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3545,
											"end": 3554,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3545,
											"end": 3554,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3545,
											"end": 3554,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3545,
											"end": 3554,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3545,
											"end": 3554,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3545,
											"end": 3588,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 3545,
											"end": 3588,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3586,
											"end": 3587,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3568,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3558,
											"end": 3574,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3588,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3588,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3545,
											"end": 3588,
											"name": "tag",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 3545,
											"end": 3588,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3541,
											"end": 3615,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3541,
											"end": 3615,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 3541,
											"end": 3615,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F2C68C1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3597,
											"end": 3615,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3541,
											"end": 3615,
											"name": "tag",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 3541,
											"end": 3615,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3685,
											"end": 3708,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3685,
											"end": 3708,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3672,
											"end": 3709,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 3672,
											"end": 3709,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3685,
											"end": 3708,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3672,
											"end": 3684,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 3672,
											"end": 3709,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3672,
											"end": 3709,
											"name": "tag",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 3672,
											"end": 3709,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "189ACDBD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 547,
											"end": 579,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 547,
											"end": 579,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3664,
											"end": 3709,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3664,
											"end": 3709,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3769,
											"end": 3797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3797,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3797,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3797,
											"name": "PUSH",
											"source": 5,
											"value": "C4D66DE8"
										},
										{
											"begin": 3769,
											"end": 3797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 502,
											"end": 520,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "tag",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "tag",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 3769,
											"end": 3805,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3861,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3869,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3849,
											"end": 3877,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 3923,
											"end": 3932,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3923,
											"end": 3932,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3919,
											"end": 4065,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 3919,
											"end": 4065,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3958,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "AND",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 3997,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4005,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4012,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4012,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3987,
											"end": 4012,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 4031,
											"end": 4054,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3973,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4031,
											"end": 4054,
											"name": "PUSH",
											"source": 5,
											"value": "352813B8D042518A94ED321D9DC289E197F2C4808F289E723BB13E59559F1633"
										},
										{
											"begin": 4031,
											"end": 4054,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3948,
											"end": 3964,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4031,
											"end": 4054,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 3919,
											"end": 4065,
											"name": "tag",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 3919,
											"end": 4065,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 547,
											"end": 579,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 547,
											"end": 579,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 529,
											"end": 580,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4102,
											"end": 4106,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4102,
											"end": 4106,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "PUSH",
											"source": 5,
											"value": "4A3920CE64F1F4F94C7D183CC35DE5DF87C9B0B30DE1C886F490B495CB8791C8"
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4080,
											"end": 4114,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3234,
											"end": 4121,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 502,
											"end": 520,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 502,
											"end": 520,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 383,
											"end": 586,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1405,
											"end": 1528,
											"name": "tag",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 1405,
											"end": 1528,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1462,
											"end": 1478,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1497,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 1503,
											"end": 1517,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1519,
											"end": 1520,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1497,
											"end": 1502,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 1497,
											"end": 1521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1497,
											"end": 1521,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 1497,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1490,
											"end": 1521,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1405,
											"end": 1528,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1405,
											"end": 1528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2255,
											"end": 3165,
											"name": "tag",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 2255,
											"end": 3165,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2327,
											"end": 2343,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2388,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2359,
											"end": 2380,
											"name": "SELFBALANCE",
											"source": 1
										},
										{
											"begin": 2359,
											"end": 2388,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2355,
											"end": 2478,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2355,
											"end": 2478,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 2355,
											"end": 2478,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2411,
											"end": 2467,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2411,
											"end": 2467,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "CF479181"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2411,
											"end": 2467,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2411,
											"end": 2467,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2438,
											"end": 2459,
											"name": "SELFBALANCE",
											"source": 1
										},
										{
											"begin": 2411,
											"end": 2467,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2411,
											"end": 2467,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2411,
											"end": 2467,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1483,
											"end": 1508,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1524,
											"end": 1542,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1524,
											"end": 1542,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1524,
											"end": 1542,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1517,
											"end": 1551,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1517,
											"end": 1551,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1517,
											"end": 1551,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1474,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 1456,
											"end": 1474,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2411,
											"end": 2467,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 1309,
											"end": 1557,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2355,
											"end": 2478,
											"name": "tag",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 2355,
											"end": 2478,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2764,
											"end": 2812,
											"name": "PUSH",
											"source": 1,
											"value": "3D602D80600A3D3981F3363D3D373D3D3D363D73000000"
										},
										{
											"begin": 2746,
											"end": 2760,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2740,
											"end": 2744,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2736,
											"end": 2761,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": 2730,
											"end": 2734,
											"name": "PUSH",
											"source": 1,
											"value": "E8"
										},
										{
											"begin": 2726,
											"end": 2762,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 2723,
											"end": 2813,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2717,
											"end": 2721,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2710,
											"end": 2814,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2971,
											"end": 3003,
											"name": "PUSH",
											"source": 1,
											"value": "5AF43D82803E903D91602B57FD5BF3"
										},
										{
											"begin": 2954,
											"end": 2968,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2948,
											"end": 2952,
											"name": "PUSH",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 2944,
											"end": 2969,
											"name": "SHL",
											"source": 1
										},
										{
											"begin": 2941,
											"end": 3004,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2935,
											"end": 2939,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2928,
											"end": 3005,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3050,
											"end": 3054,
											"name": "PUSH",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 3044,
											"end": 3048,
											"name": "PUSH",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 3037,
											"end": 3042,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3030,
											"end": 3055,
											"name": "CREATE",
											"source": 1
										},
										{
											"begin": 3018,
											"end": 3055,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3078,
											"end": 3100,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3078,
											"end": 3100,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3074,
											"end": 3159,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 3074,
											"end": 3159,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B06EBF3D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3123,
											"end": 3148,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 111,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 192,
											"end": 378,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 272,
											"end": 324,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 272,
											"end": 324,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 272,
											"end": 324,
											"name": "tag",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 362,
											"end": 371,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 343,
											"end": 372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 343,
											"end": 372,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 333,
											"end": 372,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 192,
											"end": 378,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 192,
											"end": 378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 591,
											"end": 817,
											"name": "tag",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 591,
											"end": 817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 650,
											"end": 656,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 703,
											"end": 705,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 691,
											"end": 700,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 682,
											"end": 689,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 678,
											"end": 701,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 674,
											"end": 706,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 671,
											"end": 723,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 671,
											"end": 723,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 671,
											"end": 723,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 719,
											"end": 720,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 716,
											"end": 717,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 709,
											"end": 721,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 671,
											"end": 723,
											"name": "tag",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 671,
											"end": 723,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 764,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 764,
											"end": 787,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 591,
											"end": 817,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 591,
											"end": 817,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1004,
											"end": 1304,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 1004,
											"end": 1304,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1072,
											"end": 1078,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1080,
											"end": 1086,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1133,
											"end": 1135,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1121,
											"end": 1130,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1119,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1131,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1104,
											"end": 1136,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1101,
											"end": 1153,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1101,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 1101,
											"end": 1153,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1149,
											"end": 1150,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1146,
											"end": 1147,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1139,
											"end": 1151,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1101,
											"end": 1153,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 1101,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1172,
											"end": 1201,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 1191,
											"end": 1200,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1172,
											"end": 1201,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 1172,
											"end": 1201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1172,
											"end": 1201,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 1172,
											"end": 1201,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1162,
											"end": 1201,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1270,
											"end": 1272,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1255,
											"end": 1273,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1255,
											"end": 1273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1255,
											"end": 1273,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1255,
											"end": 1273,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1242,
											"end": 1274,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 1242,
											"end": 1274,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1004,
											"end": 1304,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/proxy/Clones.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Create2.sol",
								"@openzeppelin/contracts/utils/Errors.sol",
								"src/Contract Architecture/Core Infrastructure/WalletManager.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"createWallet(address,uint256)": "f247d217",
							"fidToOwner(uint256)": "c8b6a983",
							"getOwnerByFid(uint256)": "7b9cf4f3",
							"getVault(address)": "0eb9af38",
							"getVaultByFid(uint256)": "8a62bb16",
							"linkFarcasterId(uint256)": "1c576575",
							"owner()": "8da5cb5b",
							"ownerToFid(address)": "e2cc3d2f",
							"ownerToVault(address)": "5cf25981",
							"renounceOwnership()": "715018a6",
							"setUserVaultImplementation(address)": "35598a02",
							"transferOwnership(address)": "f2fde38b",
							"unlinkFarcasterId()": "820b3d53",
							"userVaultImplementation()": "a6e7d83f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userVaultImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyHasVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FidAlreadyLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FidNotLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImplementationNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerAlreadyLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FidLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"FidUnlinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UserVaultImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fid_\",\"type\":\"uint256\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fidToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid_\",\"type\":\"uint256\"}],\"name\":\"getOwnerByFid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid_\",\"type\":\"uint256\"}],\"name\":\"getVaultByFid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid_\",\"type\":\"uint256\"}],\"name\":\"linkFarcasterId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToFid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setUserVaultImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlinkFarcasterId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ZeroAddress()\":[{\"details\":\"Basic errors to keep bytecode lean.\"}]},\"kind\":\"dev\",\"methods\":{\"createWallet(address,uint256)\":{\"details\":\"Reverts if owner already has a vault. If fid_ > 0, also links the FID.\",\"params\":{\"fid_\":\"Farcaster ID to link (use 0 to skip linking).\",\"owner_\":\"The EOA or smart account that will control the new vault.\"},\"returns\":{\"vault\":\" The address of the newly created vault clone.\"}},\"linkFarcasterId(uint256)\":{\"details\":\"If msg.sender already has a different FID, unlink first by calling `unlinkFid`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setUserVaultImplementation(address)\":{\"details\":\"Only affects *new* vaults; existing vaults remain unchanged.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"FidLinked(uint256,address)\":{\"notice\":\"Emitted when a FID is linked to an owner.\"},\"FidUnlinked(uint256,address)\":{\"notice\":\"Emitted when a FID is unlinked from its owner.\"},\"UserVaultImplementationUpdated(address)\":{\"notice\":\"Emitted when the UserVault implementation is updated.\"},\"WalletCreated(address,uint256,address)\":{\"notice\":\"Emitted when a new vault is created for an owner.\"}},\"kind\":\"user\",\"methods\":{\"createWallet(address,uint256)\":{\"notice\":\"Create a vault for `owner_` and (optionally) link a Farcaster FID.\"},\"fidToOwner(uint256)\":{\"notice\":\"Farcaster FID -> Owner address (1:1).\"},\"getOwnerByFid(uint256)\":{\"notice\":\"Get an owner by FID (returns address(0) if not linked).\"},\"getVault(address)\":{\"notice\":\"Get a vault by owner. Reverts if none exists.\"},\"getVaultByFid(uint256)\":{\"notice\":\"Get a vault by FID (reverts if FID not linked or vault missing).\"},\"linkFarcasterId(uint256)\":{\"notice\":\"Link a Farcaster FID to msg.sender. Each FID and owner can be linked only once.\"},\"ownerToFid(address)\":{\"notice\":\"Owner -> FID (0 when not linked).\"},\"ownerToVault(address)\":{\"notice\":\"Owner -> Vault address (1:1).\"},\"setUserVaultImplementation(address)\":{\"notice\":\"Update the UserVault implementation used by future clones.\"},\"unlinkFarcasterId()\":{\"notice\":\"Unlink the FID currently tied to msg.sender.\"},\"userVaultImplementation()\":{\"notice\":\"UserVault implementation to be cloned for each new user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":\"WalletManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"keccak256\":\"0x7e918671c04972845975935ea13c9ce0be1228031ba0e929d0f1f68fd1f17214\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3027ebaeef3e678ad9bae26f0556469878e992bf7dec94bede328a92be529419\",\"dweb:/ipfs/Qmdu4RfMYv9Q7iHWuYfyUL6fZKc73nM4YWizNP8w1xay56\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Create2.sol\":{\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866a11ad89c93ee918078f7a46ae31e17d89216ce64603f0d34be7ed0a5c520e\",\"dweb:/ipfs/QmW3ckLEJg2v2NzuVLNJFmRuerGSipw6Dzg6ntbmqbAGoC\"]},\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"src/Contract Architecture/Core Infrastructure/WalletManager.sol\":{\"keccak256\":\"0x65be71d63bbe1632c4cc318ced096d0e00771f90220b5f2c2a11a58a90761dd3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6cb7c9e107605fc889d8ded7c1fe75eaf7ac1c7e2f830fcc8b77e5adc79bcfd4\",\"dweb:/ipfs/QmWYUrLeAdU4YmoM4Zf8Gn1n585hEm44KHJG347tNtdrA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "src/Contract Architecture/Core Infrastructure/WalletManager.sol:WalletManager",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 739,
								"contract": "src/Contract Architecture/Core Infrastructure/WalletManager.sol:WalletManager",
								"label": "userVaultImplementation",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 744,
								"contract": "src/Contract Architecture/Core Infrastructure/WalletManager.sol:WalletManager",
								"label": "ownerToVault",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_address)"
							},
							{
								"astId": 749,
								"contract": "src/Contract Architecture/Core Infrastructure/WalletManager.sol:WalletManager",
								"label": "fidToOwner",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 754,
								"contract": "src/Contract Architecture/Core Infrastructure/WalletManager.sol:WalletManager",
								"label": "ownerToFid",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_address)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"FidLinked(uint256,address)": {
								"notice": "Emitted when a FID is linked to an owner."
							},
							"FidUnlinked(uint256,address)": {
								"notice": "Emitted when a FID is unlinked from its owner."
							},
							"UserVaultImplementationUpdated(address)": {
								"notice": "Emitted when the UserVault implementation is updated."
							},
							"WalletCreated(address,uint256,address)": {
								"notice": "Emitted when a new vault is created for an owner."
							}
						},
						"kind": "user",
						"methods": {
							"createWallet(address,uint256)": {
								"notice": "Create a vault for `owner_` and (optionally) link a Farcaster FID."
							},
							"fidToOwner(uint256)": {
								"notice": "Farcaster FID -> Owner address (1:1)."
							},
							"getOwnerByFid(uint256)": {
								"notice": "Get an owner by FID (returns address(0) if not linked)."
							},
							"getVault(address)": {
								"notice": "Get a vault by owner. Reverts if none exists."
							},
							"getVaultByFid(uint256)": {
								"notice": "Get a vault by FID (reverts if FID not linked or vault missing)."
							},
							"linkFarcasterId(uint256)": {
								"notice": "Link a Farcaster FID to msg.sender. Each FID and owner can be linked only once."
							},
							"ownerToFid(address)": {
								"notice": "Owner -> FID (0 when not linked)."
							},
							"ownerToVault(address)": {
								"notice": "Owner -> Vault address (1:1)."
							},
							"setUserVaultImplementation(address)": {
								"notice": "Update the UserVault implementation used by future clones."
							},
							"unlinkFarcasterId()": {
								"notice": "Unlink the FID currently tied to msg.sender."
							},
							"userVaultImplementation()": {
								"notice": "UserVault implementation to be cloned for each new user."
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							576
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 577,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 576,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 576,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								576
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 558,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/proxy/Clones.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/proxy/Clones.sol",
					"exportedSymbols": {
						"Clones": [
							546
						],
						"Create2": [
							675
						],
						"Errors": [
							697
						]
					},
					"id": 547,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "100:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Create2.sol",
							"file": "../utils/Create2.sol",
							"id": 151,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 547,
							"sourceUnit": 676,
							"src": "126:45:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 150,
										"name": "Create2",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 675,
										"src": "134:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Errors.sol",
							"file": "../utils/Errors.sol",
							"id": 153,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 547,
							"sourceUnit": 698,
							"src": "172:43:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 152,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 697,
										"src": "180:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Clones",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 154,
								"nodeType": "StructuredDocumentation",
								"src": "217:599:1",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n deploying minimal proxy contracts, also known as \"clones\".\n > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n deterministic method."
							},
							"fullyImplemented": true,
							"id": 546,
							"linearizedBaseContracts": [
								546
							],
							"name": "Clones",
							"nameLocation": "825:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "94289054",
									"id": 156,
									"name": "CloneArgumentsTooLong",
									"nameLocation": "844:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:2:1"
									},
									"src": "838:30:1"
								},
								{
									"body": {
										"id": 169,
										"nodeType": "Block",
										"src": "1480:48:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 165,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 159,
															"src": "1503:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "30",
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1519:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 164,
														"name": "clone",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															170,
															215
														],
														"referencedDeclaration": 215,
														"src": "1497:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,uint256) returns (address)"
														}
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1497:24:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 163,
												"id": 168,
												"nodeType": "Return",
												"src": "1490:31:1"
											}
										]
									},
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "874:526:1",
										"text": " @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n This function uses the create opcode, which should never revert.\n WARNING: This function does not check if `implementation` has code. A clone that points to an address\n without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n have no effect and leave the clone uninitialized, allowing a third party to initialize it later."
									},
									"id": 170,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "clone",
									"nameLocation": "1414:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "1428:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "1420:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1420:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1419:24:1"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "1470:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "1462:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1462:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:18:1"
									},
									"scope": 546,
									"src": "1405:123:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "2345:820:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 182,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2367:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																],
																"id": 181,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2359:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 180,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2359:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2359:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 184,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2373:7:1",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "2359:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 185,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 175,
														"src": "2383:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2359:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 199,
												"nodeType": "IfStatement",
												"src": "2355:123:1",
												"trueBody": {
													"id": 198,
													"nodeType": "Block",
													"src": "2390:88:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 192,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "2446:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Clones_$546",
																						"typeString": "library Clones"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Clones_$546",
																						"typeString": "library Clones"
																					}
																				],
																				"id": 191,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2438:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 190,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "2438:7:1",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 193,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2438:13:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 194,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2452:7:1",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "2438:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 195,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 175,
																		"src": "2461:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 187,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "2411:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$697_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2418:19:1",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 685,
																	"src": "2411:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2411:56:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 197,
															"nodeType": "RevertStatement",
															"src": "2404:63:1"
														}
													]
												}
											},
											{
												"AST": {
													"nativeSrc": "2512:553:1",
													"nodeType": "YulBlock",
													"src": "2512:553:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2717:4:1",
																		"nodeType": "YulLiteral",
																		"src": "2717:4:1",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2730:4:1",
																						"nodeType": "YulLiteral",
																						"src": "2730:4:1",
																						"type": "",
																						"value": "0xe8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2740:4:1",
																								"nodeType": "YulLiteral",
																								"src": "2740:4:1",
																								"type": "",
																								"value": "0x60"
																							},
																							{
																								"name": "implementation",
																								"nativeSrc": "2746:14:1",
																								"nodeType": "YulIdentifier",
																								"src": "2746:14:1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2736:3:1",
																							"nodeType": "YulIdentifier",
																							"src": "2736:3:1"
																						},
																						"nativeSrc": "2736:25:1",
																						"nodeType": "YulFunctionCall",
																						"src": "2736:25:1"
																					}
																				],
																				"functionName": {
																					"name": "shr",
																					"nativeSrc": "2726:3:1",
																					"nodeType": "YulIdentifier",
																					"src": "2726:3:1"
																				},
																				"nativeSrc": "2726:36:1",
																				"nodeType": "YulFunctionCall",
																				"src": "2726:36:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2764:48:1",
																				"nodeType": "YulLiteral",
																				"src": "2764:48:1",
																				"type": "",
																				"value": "0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "2723:2:1",
																			"nodeType": "YulIdentifier",
																			"src": "2723:2:1"
																		},
																		"nativeSrc": "2723:90:1",
																		"nodeType": "YulFunctionCall",
																		"src": "2723:90:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2710:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "2710:6:1"
																},
																"nativeSrc": "2710:104:1",
																"nodeType": "YulFunctionCall",
																"src": "2710:104:1"
															},
															"nativeSrc": "2710:104:1",
															"nodeType": "YulExpressionStatement",
															"src": "2710:104:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2935:4:1",
																		"nodeType": "YulLiteral",
																		"src": "2935:4:1",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2948:4:1",
																						"nodeType": "YulLiteral",
																						"src": "2948:4:1",
																						"type": "",
																						"value": "0x78"
																					},
																					{
																						"name": "implementation",
																						"nativeSrc": "2954:14:1",
																						"nodeType": "YulIdentifier",
																						"src": "2954:14:1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2944:3:1",
																					"nodeType": "YulIdentifier",
																					"src": "2944:3:1"
																				},
																				"nativeSrc": "2944:25:1",
																				"nodeType": "YulFunctionCall",
																				"src": "2944:25:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2971:32:1",
																				"nodeType": "YulLiteral",
																				"src": "2971:32:1",
																				"type": "",
																				"value": "0x5af43d82803e903d91602b57fd5bf3"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "2941:2:1",
																			"nodeType": "YulIdentifier",
																			"src": "2941:2:1"
																		},
																		"nativeSrc": "2941:63:1",
																		"nodeType": "YulFunctionCall",
																		"src": "2941:63:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2928:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "2928:6:1"
																},
																"nativeSrc": "2928:77:1",
																"nodeType": "YulFunctionCall",
																"src": "2928:77:1"
															},
															"nativeSrc": "2928:77:1",
															"nodeType": "YulExpressionStatement",
															"src": "2928:77:1"
														},
														{
															"nativeSrc": "3018:37:1",
															"nodeType": "YulAssignment",
															"src": "3018:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3037:5:1",
																		"nodeType": "YulIdentifier",
																		"src": "3037:5:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3044:4:1",
																		"nodeType": "YulLiteral",
																		"src": "3044:4:1",
																		"type": "",
																		"value": "0x09"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3050:4:1",
																		"nodeType": "YulLiteral",
																		"src": "3050:4:1",
																		"type": "",
																		"value": "0x37"
																	}
																],
																"functionName": {
																	"name": "create",
																	"nativeSrc": "3030:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "3030:6:1"
																},
																"nativeSrc": "3030:25:1",
																"nodeType": "YulFunctionCall",
																"src": "3030:25:1"
															},
															"variableNames": [
																{
																	"name": "instance",
																	"nativeSrc": "3018:8:1",
																	"nodeType": "YulIdentifier",
																	"src": "3018:8:1"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 173,
														"isOffset": false,
														"isSlot": false,
														"src": "2746:14:1",
														"valueSize": 1
													},
													{
														"declaration": 173,
														"isOffset": false,
														"isSlot": false,
														"src": "2954:14:1",
														"valueSize": 1
													},
													{
														"declaration": 178,
														"isOffset": false,
														"isSlot": false,
														"src": "3018:8:1",
														"valueSize": 1
													},
													{
														"declaration": 175,
														"isOffset": false,
														"isSlot": false,
														"src": "3037:5:1",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 200,
												"nodeType": "InlineAssembly",
												"src": "2487:578:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 201,
														"name": "instance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 178,
														"src": "3078:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 204,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3098:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3090:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 202,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3090:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 205,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3090:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3078:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 213,
												"nodeType": "IfStatement",
												"src": "3074:85:1",
												"trueBody": {
													"id": 212,
													"nodeType": "Block",
													"src": "3102:57:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 207,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "3123:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$697_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 209,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3130:16:1",
																	"memberName": "FailedDeployment",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 691,
																	"src": "3123:23:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3123:25:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 211,
															"nodeType": "RevertStatement",
															"src": "3116:32:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "1534:716:1",
										"text": " @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n to the new contract.\n WARNING: This function does not check if `implementation` has code. A clone that points to an address\n without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n to always have enough balance for new deployments. Consider exposing this function under a payable method."
									},
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "clone",
									"nameLocation": "2264:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "2278:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2270:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2270:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2302:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2294:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2294:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2269:39:1"
									},
									"returnParameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "2335:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2327:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2327:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2326:18:1"
									},
									"scope": 546,
									"src": "2255:910:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 231,
										"nodeType": "Block",
										"src": "3977:67:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 226,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "4013:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 227,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 220,
															"src": "4029:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"hexValue": "30",
															"id": 228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4035:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 225,
														"name": "cloneDeterministic",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															232,
															279
														],
														"referencedDeclaration": 279,
														"src": "3994:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,bytes32,uint256) returns (address)"
														}
													},
													"id": 229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3994:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 224,
												"id": 230,
												"nodeType": "Return",
												"src": "3987:50:1"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "3171:699:1",
										"text": " @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n This function uses the create2 opcode and a `salt` to deterministically deploy\n the clone. Using the same `implementation` and `salt` multiple times will revert, since\n the clones cannot be deployed twice at the same address.\n WARNING: This function does not check if `implementation` has code. A clone that points to an address\n without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n have no effect and leave the clone uninitialized, allowing a third party to initialize it later."
									},
									"id": 232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneDeterministic",
									"nameLocation": "3884:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "3911:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 232,
												"src": "3903:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3903:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "3935:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 232,
												"src": "3927:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 219,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3927:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3902:38:1"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "3967:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 232,
												"src": "3959:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3959:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3958:18:1"
									},
									"scope": 546,
									"src": "3875:169:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "4952:827:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 246,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4974:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																],
																"id": 245,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4966:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 244,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4966:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4966:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 248,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4980:7:1",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "4966:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 249,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 239,
														"src": "4990:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4966:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 263,
												"nodeType": "IfStatement",
												"src": "4962:123:1",
												"trueBody": {
													"id": 262,
													"nodeType": "Block",
													"src": "4997:88:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 256,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "5053:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Clones_$546",
																						"typeString": "library Clones"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Clones_$546",
																						"typeString": "library Clones"
																					}
																				],
																				"id": 255,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5045:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 254,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "5045:7:1",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 257,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5045:13:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5059:7:1",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "5045:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 259,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 239,
																		"src": "5068:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 251,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "5018:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$697_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5025:19:1",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 685,
																	"src": "5018:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 260,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5018:56:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 261,
															"nodeType": "RevertStatement",
															"src": "5011:63:1"
														}
													]
												}
											},
											{
												"AST": {
													"nativeSrc": "5119:560:1",
													"nodeType": "YulBlock",
													"src": "5119:560:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5324:4:1",
																		"nodeType": "YulLiteral",
																		"src": "5324:4:1",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "5337:4:1",
																						"nodeType": "YulLiteral",
																						"src": "5337:4:1",
																						"type": "",
																						"value": "0xe8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5347:4:1",
																								"nodeType": "YulLiteral",
																								"src": "5347:4:1",
																								"type": "",
																								"value": "0x60"
																							},
																							{
																								"name": "implementation",
																								"nativeSrc": "5353:14:1",
																								"nodeType": "YulIdentifier",
																								"src": "5353:14:1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5343:3:1",
																							"nodeType": "YulIdentifier",
																							"src": "5343:3:1"
																						},
																						"nativeSrc": "5343:25:1",
																						"nodeType": "YulFunctionCall",
																						"src": "5343:25:1"
																					}
																				],
																				"functionName": {
																					"name": "shr",
																					"nativeSrc": "5333:3:1",
																					"nodeType": "YulIdentifier",
																					"src": "5333:3:1"
																				},
																				"nativeSrc": "5333:36:1",
																				"nodeType": "YulFunctionCall",
																				"src": "5333:36:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5371:48:1",
																				"nodeType": "YulLiteral",
																				"src": "5371:48:1",
																				"type": "",
																				"value": "0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "5330:2:1",
																			"nodeType": "YulIdentifier",
																			"src": "5330:2:1"
																		},
																		"nativeSrc": "5330:90:1",
																		"nodeType": "YulFunctionCall",
																		"src": "5330:90:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5317:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "5317:6:1"
																},
																"nativeSrc": "5317:104:1",
																"nodeType": "YulFunctionCall",
																"src": "5317:104:1"
															},
															"nativeSrc": "5317:104:1",
															"nodeType": "YulExpressionStatement",
															"src": "5317:104:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5542:4:1",
																		"nodeType": "YulLiteral",
																		"src": "5542:4:1",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "5555:4:1",
																						"nodeType": "YulLiteral",
																						"src": "5555:4:1",
																						"type": "",
																						"value": "0x78"
																					},
																					{
																						"name": "implementation",
																						"nativeSrc": "5561:14:1",
																						"nodeType": "YulIdentifier",
																						"src": "5561:14:1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "5551:3:1",
																					"nodeType": "YulIdentifier",
																					"src": "5551:3:1"
																				},
																				"nativeSrc": "5551:25:1",
																				"nodeType": "YulFunctionCall",
																				"src": "5551:25:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5578:32:1",
																				"nodeType": "YulLiteral",
																				"src": "5578:32:1",
																				"type": "",
																				"value": "0x5af43d82803e903d91602b57fd5bf3"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "5548:2:1",
																			"nodeType": "YulIdentifier",
																			"src": "5548:2:1"
																		},
																		"nativeSrc": "5548:63:1",
																		"nodeType": "YulFunctionCall",
																		"src": "5548:63:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5535:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "5535:6:1"
																},
																"nativeSrc": "5535:77:1",
																"nodeType": "YulFunctionCall",
																"src": "5535:77:1"
															},
															"nativeSrc": "5535:77:1",
															"nodeType": "YulExpressionStatement",
															"src": "5535:77:1"
														},
														{
															"nativeSrc": "5625:44:1",
															"nodeType": "YulAssignment",
															"src": "5625:44:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "5645:5:1",
																		"nodeType": "YulIdentifier",
																		"src": "5645:5:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5652:4:1",
																		"nodeType": "YulLiteral",
																		"src": "5652:4:1",
																		"type": "",
																		"value": "0x09"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5658:4:1",
																		"nodeType": "YulLiteral",
																		"src": "5658:4:1",
																		"type": "",
																		"value": "0x37"
																	},
																	{
																		"name": "salt",
																		"nativeSrc": "5664:4:1",
																		"nodeType": "YulIdentifier",
																		"src": "5664:4:1"
																	}
																],
																"functionName": {
																	"name": "create2",
																	"nativeSrc": "5637:7:1",
																	"nodeType": "YulIdentifier",
																	"src": "5637:7:1"
																},
																"nativeSrc": "5637:32:1",
																"nodeType": "YulFunctionCall",
																"src": "5637:32:1"
															},
															"variableNames": [
																{
																	"name": "instance",
																	"nativeSrc": "5625:8:1",
																	"nodeType": "YulIdentifier",
																	"src": "5625:8:1"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 235,
														"isOffset": false,
														"isSlot": false,
														"src": "5353:14:1",
														"valueSize": 1
													},
													{
														"declaration": 235,
														"isOffset": false,
														"isSlot": false,
														"src": "5561:14:1",
														"valueSize": 1
													},
													{
														"declaration": 242,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:8:1",
														"valueSize": 1
													},
													{
														"declaration": 237,
														"isOffset": false,
														"isSlot": false,
														"src": "5664:4:1",
														"valueSize": 1
													},
													{
														"declaration": 239,
														"isOffset": false,
														"isSlot": false,
														"src": "5645:5:1",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 264,
												"nodeType": "InlineAssembly",
												"src": "5094:585:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 265,
														"name": "instance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 242,
														"src": "5692:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5712:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 267,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5704:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 266,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5704:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 269,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5704:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5692:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 277,
												"nodeType": "IfStatement",
												"src": "5688:85:1",
												"trueBody": {
													"id": 276,
													"nodeType": "Block",
													"src": "5716:57:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 271,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "5737:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$697_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5744:16:1",
																	"memberName": "FailedDeployment",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 691,
																	"src": "5737:23:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 274,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5737:25:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 275,
															"nodeType": "RevertStatement",
															"src": "5730:32:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 233,
										"nodeType": "StructuredDocumentation",
										"src": "4050:750:1",
										"text": " @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n a `value` parameter to send native currency to the new contract.\n WARNING: This function does not check if `implementation` has code. A clone that points to an address\n without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n to always have enough balance for new deployments. Consider exposing this function under a payable method."
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneDeterministic",
									"nameLocation": "4814:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "4850:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4842:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4842:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "4882:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4874:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 236,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4874:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4904:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4896:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4896:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4832:83:1"
									},
									"returnParameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "4942:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4934:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4934:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4933:18:1"
									},
									"scope": 546,
									"src": "4805:974:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 292,
										"nodeType": "Block",
										"src": "6054:537:1",
										"statements": [
											{
												"AST": {
													"nativeSrc": "6089:496:1",
													"nodeType": "YulBlock",
													"src": "6089:496:1",
													"statements": [
														{
															"nativeSrc": "6103:22:1",
															"nodeType": "YulVariableDeclaration",
															"src": "6103:22:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6120:4:1",
																		"nodeType": "YulLiteral",
																		"src": "6120:4:1",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "6114:5:1",
																	"nodeType": "YulIdentifier",
																	"src": "6114:5:1"
																},
																"nativeSrc": "6114:11:1",
																"nodeType": "YulFunctionCall",
																"src": "6114:11:1"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "6107:3:1",
																	"nodeType": "YulTypedName",
																	"src": "6107:3:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "6149:3:1",
																				"nodeType": "YulIdentifier",
																				"src": "6149:3:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6154:4:1",
																				"nodeType": "YulLiteral",
																				"src": "6154:4:1",
																				"type": "",
																				"value": "0x38"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6145:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "6145:3:1"
																		},
																		"nativeSrc": "6145:14:1",
																		"nodeType": "YulFunctionCall",
																		"src": "6145:14:1"
																	},
																	{
																		"name": "deployer",
																		"nativeSrc": "6161:8:1",
																		"nodeType": "YulIdentifier",
																		"src": "6161:8:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6138:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "6138:6:1"
																},
																"nativeSrc": "6138:32:1",
																"nodeType": "YulFunctionCall",
																"src": "6138:32:1"
															},
															"nativeSrc": "6138:32:1",
															"nodeType": "YulExpressionStatement",
															"src": "6138:32:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "6194:3:1",
																				"nodeType": "YulIdentifier",
																				"src": "6194:3:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6199:4:1",
																				"nodeType": "YulLiteral",
																				"src": "6199:4:1",
																				"type": "",
																				"value": "0x24"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6190:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "6190:3:1"
																		},
																		"nativeSrc": "6190:14:1",
																		"nodeType": "YulFunctionCall",
																		"src": "6190:14:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6206:34:1",
																		"nodeType": "YulLiteral",
																		"src": "6206:34:1",
																		"type": "",
																		"value": "0x5af43d82803e903d91602b57fd5bf3ff"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6183:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "6183:6:1"
																},
																"nativeSrc": "6183:58:1",
																"nodeType": "YulFunctionCall",
																"src": "6183:58:1"
															},
															"nativeSrc": "6183:58:1",
															"nodeType": "YulExpressionStatement",
															"src": "6183:58:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "6265:3:1",
																				"nodeType": "YulIdentifier",
																				"src": "6265:3:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6270:4:1",
																				"nodeType": "YulLiteral",
																				"src": "6270:4:1",
																				"type": "",
																				"value": "0x14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6261:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "6261:3:1"
																		},
																		"nativeSrc": "6261:14:1",
																		"nodeType": "YulFunctionCall",
																		"src": "6261:14:1"
																	},
																	{
																		"name": "implementation",
																		"nativeSrc": "6277:14:1",
																		"nodeType": "YulIdentifier",
																		"src": "6277:14:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6254:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "6254:6:1"
																},
																"nativeSrc": "6254:38:1",
																"nodeType": "YulFunctionCall",
																"src": "6254:38:1"
															},
															"nativeSrc": "6254:38:1",
															"nodeType": "YulExpressionStatement",
															"src": "6254:38:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "6312:3:1",
																		"nodeType": "YulIdentifier",
																		"src": "6312:3:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6317:42:1",
																		"nodeType": "YulLiteral",
																		"src": "6317:42:1",
																		"type": "",
																		"value": "0x3d602d80600a3d3981f3363d3d373d3d3d363d73"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6305:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "6305:6:1"
																},
																"nativeSrc": "6305:55:1",
																"nodeType": "YulFunctionCall",
																"src": "6305:55:1"
															},
															"nativeSrc": "6305:55:1",
															"nodeType": "YulExpressionStatement",
															"src": "6305:55:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "6384:3:1",
																				"nodeType": "YulIdentifier",
																				"src": "6384:3:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6389:4:1",
																				"nodeType": "YulLiteral",
																				"src": "6389:4:1",
																				"type": "",
																				"value": "0x58"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6380:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "6380:3:1"
																		},
																		"nativeSrc": "6380:14:1",
																		"nodeType": "YulFunctionCall",
																		"src": "6380:14:1"
																	},
																	{
																		"name": "salt",
																		"nativeSrc": "6396:4:1",
																		"nodeType": "YulIdentifier",
																		"src": "6396:4:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6373:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "6373:6:1"
																},
																"nativeSrc": "6373:28:1",
																"nodeType": "YulFunctionCall",
																"src": "6373:28:1"
															},
															"nativeSrc": "6373:28:1",
															"nodeType": "YulExpressionStatement",
															"src": "6373:28:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "6425:3:1",
																				"nodeType": "YulIdentifier",
																				"src": "6425:3:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6430:4:1",
																				"nodeType": "YulLiteral",
																				"src": "6430:4:1",
																				"type": "",
																				"value": "0x78"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6421:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "6421:3:1"
																		},
																		"nativeSrc": "6421:14:1",
																		"nodeType": "YulFunctionCall",
																		"src": "6421:14:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "ptr",
																						"nativeSrc": "6451:3:1",
																						"nodeType": "YulIdentifier",
																						"src": "6451:3:1"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6456:4:1",
																						"nodeType": "YulLiteral",
																						"src": "6456:4:1",
																						"type": "",
																						"value": "0x0c"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6447:3:1",
																					"nodeType": "YulIdentifier",
																					"src": "6447:3:1"
																				},
																				"nativeSrc": "6447:14:1",
																				"nodeType": "YulFunctionCall",
																				"src": "6447:14:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6463:4:1",
																				"nodeType": "YulLiteral",
																				"src": "6463:4:1",
																				"type": "",
																				"value": "0x37"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nativeSrc": "6437:9:1",
																			"nodeType": "YulIdentifier",
																			"src": "6437:9:1"
																		},
																		"nativeSrc": "6437:31:1",
																		"nodeType": "YulFunctionCall",
																		"src": "6437:31:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6414:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "6414:6:1"
																},
																"nativeSrc": "6414:55:1",
																"nodeType": "YulFunctionCall",
																"src": "6414:55:1"
															},
															"nativeSrc": "6414:55:1",
															"nodeType": "YulExpressionStatement",
															"src": "6414:55:1"
														},
														{
															"nativeSrc": "6482:93:1",
															"nodeType": "YulAssignment",
															"src": "6482:93:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "ptr",
																						"nativeSrc": "6513:3:1",
																						"nodeType": "YulIdentifier",
																						"src": "6513:3:1"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6518:4:1",
																						"nodeType": "YulLiteral",
																						"src": "6518:4:1",
																						"type": "",
																						"value": "0x43"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6509:3:1",
																					"nodeType": "YulIdentifier",
																					"src": "6509:3:1"
																				},
																				"nativeSrc": "6509:14:1",
																				"nodeType": "YulFunctionCall",
																				"src": "6509:14:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6525:4:1",
																				"nodeType": "YulLiteral",
																				"src": "6525:4:1",
																				"type": "",
																				"value": "0x55"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nativeSrc": "6499:9:1",
																			"nodeType": "YulIdentifier",
																			"src": "6499:9:1"
																		},
																		"nativeSrc": "6499:31:1",
																		"nodeType": "YulFunctionCall",
																		"src": "6499:31:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6532:42:1",
																		"nodeType": "YulLiteral",
																		"src": "6532:42:1",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "6495:3:1",
																	"nodeType": "YulIdentifier",
																	"src": "6495:3:1"
																},
																"nativeSrc": "6495:80:1",
																"nodeType": "YulFunctionCall",
																"src": "6495:80:1"
															},
															"variableNames": [
																{
																	"name": "predicted",
																	"nativeSrc": "6482:9:1",
																	"nodeType": "YulIdentifier",
																	"src": "6482:9:1"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 286,
														"isOffset": false,
														"isSlot": false,
														"src": "6161:8:1",
														"valueSize": 1
													},
													{
														"declaration": 282,
														"isOffset": false,
														"isSlot": false,
														"src": "6277:14:1",
														"valueSize": 1
													},
													{
														"declaration": 289,
														"isOffset": false,
														"isSlot": false,
														"src": "6482:9:1",
														"valueSize": 1
													},
													{
														"declaration": 284,
														"isOffset": false,
														"isSlot": false,
														"src": "6396:4:1",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 291,
												"nodeType": "InlineAssembly",
												"src": "6064:521:1"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "5785:99:1",
										"text": " @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}."
									},
									"id": 293,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "predictDeterministicAddress",
									"nameLocation": "5898:27:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "5943:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "5935:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5935:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5975:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "5967:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 283,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5967:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "5997:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "5989:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5989:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5925:86:1"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "predicted",
												"nameLocation": "6043:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "6035:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6035:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6034:19:1"
									},
									"scope": 546,
									"src": "5889:702:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 312,
										"nodeType": "Block",
										"src": "6840:88:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 304,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "6885:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 305,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 298,
															"src": "6901:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 308,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6915:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																],
																"id": 307,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6907:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 306,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6907:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 309,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6907:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 303,
														"name": "predictDeterministicAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															293,
															313
														],
														"referencedDeclaration": 293,
														"src": "6857:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes32_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,bytes32,address) pure returns (address)"
														}
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6857:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 302,
												"id": 311,
												"nodeType": "Return",
												"src": "6850:71:1"
											}
										]
									},
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "6597:99:1",
										"text": " @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}."
									},
									"id": 313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "predictDeterministicAddress",
									"nameLocation": "6710:27:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "6755:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "6747:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6747:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "6787:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "6779:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 297,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6779:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6737:60:1"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "predicted",
												"nameLocation": "6829:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "6821:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 300,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6821:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6820:19:1"
									},
									"scope": 546,
									"src": "6701:227:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 329,
										"nodeType": "Block",
										"src": "7769:71:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 324,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "7809:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 325,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "7825:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 326,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7831:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 323,
														"name": "cloneWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															330,
															384
														],
														"referencedDeclaration": 384,
														"src": "7786:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,bytes memory,uint256) returns (address)"
														}
													},
													"id": 327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7786:47:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 322,
												"id": 328,
												"nodeType": "Return",
												"src": "7779:54:1"
											}
										]
									},
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "6934:719:1",
										"text": " @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n access the arguments within the implementation, use {fetchCloneArgs}.\n This function uses the create opcode, which should never revert.\n WARNING: This function does not check if `implementation` has code. A clone that points to an address\n without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n have no effect and leave the clone uninitialized, allowing a third party to initialize it later."
									},
									"id": 330,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneWithImmutableArgs",
									"nameLocation": "7667:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "7698:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "7690:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7690:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "7727:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "7714:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 317,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7714:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7689:43:1"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "7759:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "7751:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 320,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7751:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7750:18:1"
									},
									"scope": 546,
									"src": "7658:182:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 383,
										"nodeType": "Block",
										"src": "8763:437:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 344,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "8785:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																],
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8777:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 342,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8777:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8777:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 346,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8791:7:1",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "8777:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 347,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 337,
														"src": "8801:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8777:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 361,
												"nodeType": "IfStatement",
												"src": "8773:123:1",
												"trueBody": {
													"id": 360,
													"nodeType": "Block",
													"src": "8808:88:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 354,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "8864:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Clones_$546",
																						"typeString": "library Clones"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Clones_$546",
																						"typeString": "library Clones"
																					}
																				],
																				"id": 353,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8856:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 352,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "8856:7:1",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 355,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8856:13:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "8870:7:1",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "8856:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 357,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 337,
																		"src": "8879:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 349,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "8829:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$697_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 351,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8836:19:1",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 685,
																	"src": "8829:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 358,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8829:56:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 359,
															"nodeType": "RevertStatement",
															"src": "8822:63:1"
														}
													]
												}
											},
											{
												"assignments": [
													363
												],
												"declarations": [
													{
														"constant": false,
														"id": 363,
														"mutability": "mutable",
														"name": "bytecode",
														"nameLocation": "8918:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 383,
														"src": "8905:21:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 362,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "8905:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 368,
												"initialValue": {
													"arguments": [
														{
															"id": 365,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 333,
															"src": "8957:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 366,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 335,
															"src": "8973:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 364,
														"name": "_cloneCodeWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "8929:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8929:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8905:73:1"
											},
											{
												"AST": {
													"nativeSrc": "9013:87:1",
													"nodeType": "YulBlock",
													"src": "9013:87:1",
													"statements": [
														{
															"nativeSrc": "9027:63:1",
															"nodeType": "YulAssignment",
															"src": "9027:63:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "9046:5:1",
																		"nodeType": "YulIdentifier",
																		"src": "9046:5:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "bytecode",
																				"nativeSrc": "9057:8:1",
																				"nodeType": "YulIdentifier",
																				"src": "9057:8:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9067:4:1",
																				"nodeType": "YulLiteral",
																				"src": "9067:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9053:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "9053:3:1"
																		},
																		"nativeSrc": "9053:19:1",
																		"nodeType": "YulFunctionCall",
																		"src": "9053:19:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "bytecode",
																				"nativeSrc": "9080:8:1",
																				"nodeType": "YulIdentifier",
																				"src": "9080:8:1"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "9074:5:1",
																			"nodeType": "YulIdentifier",
																			"src": "9074:5:1"
																		},
																		"nativeSrc": "9074:15:1",
																		"nodeType": "YulFunctionCall",
																		"src": "9074:15:1"
																	}
																],
																"functionName": {
																	"name": "create",
																	"nativeSrc": "9039:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "9039:6:1"
																},
																"nativeSrc": "9039:51:1",
																"nodeType": "YulFunctionCall",
																"src": "9039:51:1"
															},
															"variableNames": [
																{
																	"name": "instance",
																	"nativeSrc": "9027:8:1",
																	"nodeType": "YulIdentifier",
																	"src": "9027:8:1"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 363,
														"isOffset": false,
														"isSlot": false,
														"src": "9057:8:1",
														"valueSize": 1
													},
													{
														"declaration": 363,
														"isOffset": false,
														"isSlot": false,
														"src": "9080:8:1",
														"valueSize": 1
													},
													{
														"declaration": 340,
														"isOffset": false,
														"isSlot": false,
														"src": "9027:8:1",
														"valueSize": 1
													},
													{
														"declaration": 337,
														"isOffset": false,
														"isSlot": false,
														"src": "9046:5:1",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 369,
												"nodeType": "InlineAssembly",
												"src": "8988:112:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 370,
														"name": "instance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 340,
														"src": "9113:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 373,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9133:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 372,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9125:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 371,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9125:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 374,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9125:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9113:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 382,
												"nodeType": "IfStatement",
												"src": "9109:85:1",
												"trueBody": {
													"id": 381,
													"nodeType": "Block",
													"src": "9137:57:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 376,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "9158:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$697_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9165:16:1",
																	"memberName": "FailedDeployment",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 691,
																	"src": "9158:23:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 379,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9158:25:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 380,
															"nodeType": "RevertStatement",
															"src": "9151:32:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 331,
										"nodeType": "StructuredDocumentation",
										"src": "7846:756:1",
										"text": " @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\n parameter to send native currency to the new contract.\n WARNING: This function does not check if `implementation` has code. A clone that points to an address\n without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n to always have enough balance for new deployments. Consider exposing this function under a payable method."
									},
									"id": 384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneWithImmutableArgs",
									"nameLocation": "8616:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "8656:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "8648:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8648:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "8693:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "8680:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 334,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8680:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8715:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "8707:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8707:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8638:88:1"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "8753:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "8745:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8745:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8744:18:1"
									},
									"scope": 546,
									"src": "8607:593:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 403,
										"nodeType": "Block",
										"src": "10279:90:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 397,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "10332:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 398,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "10348:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 399,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 391,
															"src": "10354:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"hexValue": "30",
															"id": 400,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10360:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 396,
														"name": "cloneDeterministicWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															404,
															433
														],
														"referencedDeclaration": 433,
														"src": "10296:35:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,bytes memory,bytes32,uint256) returns (address)"
														}
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10296:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 395,
												"id": 402,
												"nodeType": "Return",
												"src": "10289:73:1"
											}
										]
									},
									"documentation": {
										"id": 385,
										"nodeType": "StructuredDocumentation",
										"src": "9206:900:1",
										"text": " @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n access the arguments within the implementation, use {fetchCloneArgs}.\n This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\n `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\n at the same address.\n WARNING: This function does not check if `implementation` has code. A clone that points to an address\n without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n have no effect and leave the clone uninitialized, allowing a third party to initialize it later."
									},
									"id": 404,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneDeterministicWithImmutableArgs",
									"nameLocation": "10120:35:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "10173:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "10165:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10165:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "10210:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "10197:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 388,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10197:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "10232:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "10224:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 390,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10224:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10155:87:1"
									},
									"returnParameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "10269:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "10261:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10261:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10260:18:1"
									},
									"scope": 546,
									"src": "10111:258:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 432,
										"nodeType": "Block",
										"src": "11361:144:1",
										"statements": [
											{
												"assignments": [
													419
												],
												"declarations": [
													{
														"constant": false,
														"id": 419,
														"mutability": "mutable",
														"name": "bytecode",
														"nameLocation": "11384:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 432,
														"src": "11371:21:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 418,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "11371:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 424,
												"initialValue": {
													"arguments": [
														{
															"id": 421,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "11423:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 422,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "11439:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 420,
														"name": "_cloneCodeWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "11395:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11395:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11371:73:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 427,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "11476:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 428,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "11483:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 429,
															"name": "bytecode",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 419,
															"src": "11489:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 425,
															"name": "Create2",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "11461:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Create2_$675_$",
																"typeString": "type(library Create2)"
															}
														},
														"id": 426,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11469:6:1",
														"memberName": "deploy",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 640,
														"src": "11461:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
															"typeString": "function (uint256,bytes32,bytes memory) returns (address)"
														}
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11461:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 417,
												"id": 431,
												"nodeType": "Return",
												"src": "11454:44:1"
											}
										]
									},
									"documentation": {
										"id": 405,
										"nodeType": "StructuredDocumentation",
										"src": "10375:790:1",
										"text": " @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\n but with a `value` parameter to send native currency to the new contract.\n WARNING: This function does not check if `implementation` has code. A clone that points to an address\n without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n to always have enough balance for new deployments. Consider exposing this function under a payable method."
									},
									"id": 433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneDeterministicWithImmutableArgs",
									"nameLocation": "11179:35:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "11232:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "11224:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 406,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11224:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "11269:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "11256:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 408,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11256:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "11291:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "11283:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 410,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11283:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11313:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "11305:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11305:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11214:110:1"
									},
									"returnParameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "11351:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "11343:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11343:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11342:18:1"
									},
									"scope": 546,
									"src": "11170:335:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "11841:166:1",
										"statements": [
											{
												"assignments": [
													448
												],
												"declarations": [
													{
														"constant": false,
														"id": 448,
														"mutability": "mutable",
														"name": "bytecode",
														"nameLocation": "11864:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 463,
														"src": "11851:21:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 447,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "11851:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 453,
												"initialValue": {
													"arguments": [
														{
															"id": 450,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 436,
															"src": "11903:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 451,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "11919:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 449,
														"name": "_cloneCodeWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "11875:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11875:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11851:73:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 456,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 440,
															"src": "11964:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 458,
																	"name": "bytecode",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 448,
																	"src": "11980:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 457,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "11970:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 459,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11970:19:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 460,
															"name": "deployer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 442,
															"src": "11991:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 454,
															"name": "Create2",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "11941:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Create2_$675_$",
																"typeString": "type(library Create2)"
															}
														},
														"id": 455,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11949:14:1",
														"memberName": "computeAddress",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 674,
														"src": "11941:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$",
															"typeString": "function (bytes32,bytes32,address) pure returns (address)"
														}
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11941:59:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 446,
												"id": 462,
												"nodeType": "Return",
												"src": "11934:66:1"
											}
										]
									},
									"documentation": {
										"id": 434,
										"nodeType": "StructuredDocumentation",
										"src": "11511:116:1",
										"text": " @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}."
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "predictDeterministicAddressWithImmutableArgs",
									"nameLocation": "11641:44:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "11703:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "11695:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11695:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "11740:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "11727:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 437,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11727:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "11762:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "11754:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 439,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11754:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "11784:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "11776:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 441,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11776:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11685:113:1"
									},
									"returnParameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "predicted",
												"nameLocation": "11830:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "11822:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 444,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11822:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11821:19:1"
									},
									"scope": 546,
									"src": "11632:375:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 486,
										"nodeType": "Block",
										"src": "12317:111:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 477,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 467,
															"src": "12379:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 478,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "12395:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 479,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "12401:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 482,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "12415:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$546",
																		"typeString": "library Clones"
																	}
																],
																"id": 481,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12407:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 480,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12407:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 483,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12407:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 476,
														"name": "predictDeterministicAddressWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															464,
															487
														],
														"referencedDeclaration": 464,
														"src": "12334:44:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$_t_bytes32_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,bytes memory,bytes32,address) pure returns (address)"
														}
													},
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12334:87:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 475,
												"id": 485,
												"nodeType": "Return",
												"src": "12327:94:1"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "12013:116:1",
										"text": " @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}."
									},
									"id": 487,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "predictDeterministicAddressWithImmutableArgs",
									"nameLocation": "12143:44:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "12205:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "12197:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12197:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "12242:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "12229:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 468,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12229:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "12264:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "12256:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 470,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12256:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12187:87:1"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "predicted",
												"nameLocation": "12306:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "12298:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 473,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12298:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12297:19:1"
									},
									"scope": 546,
									"src": "12134:294:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 509,
										"nodeType": "Block",
										"src": "13121:246:1",
										"statements": [
											{
												"assignments": [
													496
												],
												"declarations": [
													{
														"constant": false,
														"id": 496,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13144:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 509,
														"src": "13131:19:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 495,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "13131:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 505,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"expression": {
																		"id": 499,
																		"name": "instance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 490,
																		"src": "13163:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 500,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "13172:4:1",
																	"memberName": "code",
																	"nodeType": "MemberAccess",
																	"src": "13163:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13177:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "13163:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"hexValue": "3435",
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13186:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_45_by_1",
																	"typeString": "int_const 45"
																},
																"value": "45"
															},
															"src": "13163:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 498,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "13153:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 497,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "13157:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13153:36:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13131:58:1"
											},
											{
												"AST": {
													"nativeSrc": "13257:81:1",
													"nodeType": "YulBlock",
													"src": "13257:81:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "instance",
																		"nativeSrc": "13283:8:1",
																		"nodeType": "YulIdentifier",
																		"src": "13283:8:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "result",
																				"nativeSrc": "13297:6:1",
																				"nodeType": "YulIdentifier",
																				"src": "13297:6:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13305:2:1",
																				"nodeType": "YulLiteral",
																				"src": "13305:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13293:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "13293:3:1"
																		},
																		"nativeSrc": "13293:15:1",
																		"nodeType": "YulFunctionCall",
																		"src": "13293:15:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13310:2:1",
																		"nodeType": "YulLiteral",
																		"src": "13310:2:1",
																		"type": "",
																		"value": "45"
																	},
																	{
																		"arguments": [
																			{
																				"name": "result",
																				"nativeSrc": "13320:6:1",
																				"nodeType": "YulIdentifier",
																				"src": "13320:6:1"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "13314:5:1",
																			"nodeType": "YulIdentifier",
																			"src": "13314:5:1"
																		},
																		"nativeSrc": "13314:13:1",
																		"nodeType": "YulFunctionCall",
																		"src": "13314:13:1"
																	}
																],
																"functionName": {
																	"name": "extcodecopy",
																	"nativeSrc": "13271:11:1",
																	"nodeType": "YulIdentifier",
																	"src": "13271:11:1"
																},
																"nativeSrc": "13271:57:1",
																"nodeType": "YulFunctionCall",
																"src": "13271:57:1"
															},
															"nativeSrc": "13271:57:1",
															"nodeType": "YulExpressionStatement",
															"src": "13271:57:1"
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 490,
														"isOffset": false,
														"isSlot": false,
														"src": "13283:8:1",
														"valueSize": 1
													},
													{
														"declaration": 496,
														"isOffset": false,
														"isSlot": false,
														"src": "13297:6:1",
														"valueSize": 1
													},
													{
														"declaration": 496,
														"isOffset": false,
														"isSlot": false,
														"src": "13320:6:1",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 506,
												"nodeType": "InlineAssembly",
												"src": "13232:106:1"
											},
											{
												"expression": {
													"id": 507,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 496,
													"src": "13354:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 494,
												"id": 508,
												"nodeType": "Return",
												"src": "13347:13:1"
											}
										]
									},
									"documentation": {
										"id": 488,
										"nodeType": "StructuredDocumentation",
										"src": "12434:603:1",
										"text": " @dev Get the immutable args attached to a clone.\n - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\n   function will return an empty array.\n - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\n   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\n   creation.\n - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\n   function should only be used to check addresses that are known to be clones."
									},
									"id": 510,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "fetchCloneArgs",
									"nameLocation": "13051:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "13074:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 510,
												"src": "13066:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 489,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13066:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13065:18:1"
									},
									"returnParameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 510,
												"src": "13107:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 492,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13107:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13106:14:1"
									},
									"scope": 546,
									"src": "13042:325:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 544,
										"nodeType": "Block",
										"src": "14156:362:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 520,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 515,
															"src": "14170:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "14175:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "14170:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3234353331",
														"id": 522,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14184:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_24531_by_1",
															"typeString": "int_const 24531"
														},
														"value": "24531"
													},
													"src": "14170:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 527,
												"nodeType": "IfStatement",
												"src": "14166:55:1",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 524,
															"name": "CloneArgumentsTooLong",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "14198:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 525,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14198:23:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 526,
													"nodeType": "RevertStatement",
													"src": "14191:30:1"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "61",
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14284:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3ac225168df54212a25c1c01fd35bebfea408fdac2e31ddd6f80a4bbf9a5f1cb",
																"typeString": "literal_string \"a\""
															},
															"value": "a"
														},
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 536,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 533,
																			"name": "args",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 515,
																			"src": "14316:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "14321:6:1",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "14316:11:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3435",
																		"id": 535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "14330:2:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_45_by_1",
																			"typeString": "int_const 45"
																		},
																		"value": "45"
																	},
																	"src": "14316:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 532,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14309:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint16_$",
																	"typeString": "type(uint16)"
																},
																"typeName": {
																	"id": 531,
																	"name": "uint16",
																	"nodeType": "ElementaryTypeName",
																	"src": "14309:6:1",
																	"typeDescriptions": {}
																}
															},
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14309:24:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														{
															"hexValue": "3d81600a3d39f3363d3d373d3d3d363d73",
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14351:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d24ab45bb33e00f98da9dec50b1e1620d91f81025faf3be3a44e9d69371096d4",
																"typeString": "literal_string hex\"3d81600a3d39f3363d3d373d3d3d363d73\""
															}
														},
														{
															"id": 539,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "14408:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "5af43d82803e903d91602b57fd5bf3",
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14440:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_11a195f66c9175f46895bae2006d40848a680c7068b9fc4af248ff9a54a47e45",
																"typeString": "literal_string hex\"5af43d82803e903d91602b57fd5bf3\""
															}
														},
														{
															"id": 541,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 515,
															"src": "14493:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_3ac225168df54212a25c1c01fd35bebfea408fdac2e31ddd6f80a4bbf9a5f1cb",
																"typeString": "literal_string \"a\""
															},
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															{
																"typeIdentifier": "t_stringliteral_d24ab45bb33e00f98da9dec50b1e1620d91f81025faf3be3a44e9d69371096d4",
																"typeString": "literal_string hex\"3d81600a3d39f3363d3d373d3d3d363d73\""
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_stringliteral_11a195f66c9175f46895bae2006d40848a680c7068b9fc4af248ff9a54a47e45",
																"typeString": "literal_string hex\"5af43d82803e903d91602b57fd5bf3\""
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 528,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "14250:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 529,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "14254:12:1",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "14250:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14250:261:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 519,
												"id": 543,
												"nodeType": "Return",
												"src": "14231:280:1"
											}
										]
									},
									"documentation": {
										"id": 511,
										"nodeType": "StructuredDocumentation",
										"src": "13373:640:1",
										"text": " @dev Helper that prepares the initcode of the proxy with immutable args.\n An assembly variant of this function requires copying the `args` array, which can be efficiently done using\n `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\n abi.encodePacked is more expensive but also more portable and easier to review.\n NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\n With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes."
									},
									"id": 545,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_cloneCodeWithImmutableArgs",
									"nameLocation": "14027:27:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "14072:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "14064:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 512,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14064:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "14109:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "14096:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 514,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14096:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14054:65:1"
									},
									"returnParameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "14142:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 517,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14142:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14141:14:1"
									},
									"scope": 546,
									"src": "14018:500:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 547,
							"src": "817:13703:1",
							"usedErrors": [
								156
							],
							"usedEvents": []
						}
					],
					"src": "100:14421:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							576
						]
					},
					"id": 577,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 548,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 549,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:2",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 576,
							"linearizedBaseContracts": [
								576
							],
							"name": "Context",
							"nameLocation": "642:7:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 557,
										"nodeType": "Block",
										"src": "718:34:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 554,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:2",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 553,
												"id": 556,
												"nodeType": "Return",
												"src": "728:17:2"
											}
										]
									},
									"id": 558,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:2"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "709:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:2"
									},
									"scope": 576,
									"src": "656:96:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 566,
										"nodeType": "Block",
										"src": "825:32:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 563,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:2",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 562,
												"id": 565,
												"nodeType": "Return",
												"src": "835:15:2"
											}
										]
									},
									"id": 567,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:2"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "809:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 560,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:2"
									},
									"scope": 576,
									"src": "758:99:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 574,
										"nodeType": "Block",
										"src": "935:25:2",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 572,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 571,
												"id": 573,
												"nodeType": "Return",
												"src": "945:8:2"
											}
										]
									},
									"id": 575,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:2"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 575,
												"src": "926:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 569,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:2"
									},
									"scope": 576,
									"src": "863:97:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 577,
							"src": "624:338:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Create2.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Create2.sol",
					"exportedSymbols": {
						"Create2": [
							675
						],
						"Errors": [
							697
						]
					},
					"id": 676,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 578,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Errors.sol",
							"file": "./Errors.sol",
							"id": 580,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 676,
							"sourceUnit": 698,
							"src": "127:36:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 579,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 697,
										"src": "135:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Create2",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 581,
								"nodeType": "StructuredDocumentation",
								"src": "165:367:3",
								"text": " @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n `CREATE2` can be used to compute in advance the address where a smart\n contract will be deployed, which allows for interesting new mechanisms known\n as 'counterfactual interactions'.\n See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n information."
							},
							"fullyImplemented": true,
							"id": 675,
							"linearizedBaseContracts": [
								675
							],
							"name": "Create2",
							"nameLocation": "541:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 582,
										"nodeType": "StructuredDocumentation",
										"src": "555:50:3",
										"text": " @dev There's no code to deploy."
									},
									"errorSelector": "4ca249dc",
									"id": 584,
									"name": "Create2EmptyBytecode",
									"nameLocation": "616:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "636:2:3"
									},
									"src": "610:29:3"
								},
								{
									"body": {
										"id": 639,
										"nodeType": "Block",
										"src": "1311:746:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 598,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1333:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Create2_$675",
																		"typeString": "library Create2"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Create2_$675",
																		"typeString": "library Create2"
																	}
																],
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1325:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 596,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1325:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1325:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 600,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1339:7:3",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1325:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 601,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "1349:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1325:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 615,
												"nodeType": "IfStatement",
												"src": "1321:125:3",
												"trueBody": {
													"id": 614,
													"nodeType": "Block",
													"src": "1357:89:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 608,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "1413:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Create2_$675",
																						"typeString": "library Create2"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Create2_$675",
																						"typeString": "library Create2"
																					}
																				],
																				"id": 607,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1405:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 606,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "1405:7:3",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 609,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1405:13:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1419:7:3",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "1405:21:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 611,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 587,
																		"src": "1428:6:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 603,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "1378:6:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$697_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1385:19:3",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 685,
																	"src": "1378:26:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 612,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1378:57:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 613,
															"nodeType": "RevertStatement",
															"src": "1371:64:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 616,
															"name": "bytecode",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 591,
															"src": "1459:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 617,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1468:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1459:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1478:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1459:20:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 624,
												"nodeType": "IfStatement",
												"src": "1455:80:3",
												"trueBody": {
													"id": 623,
													"nodeType": "Block",
													"src": "1481:54:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 620,
																	"name": "Create2EmptyBytecode",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 584,
																	"src": "1502:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 621,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1502:22:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 622,
															"nodeType": "RevertStatement",
															"src": "1495:29:3"
														}
													]
												}
											},
											{
												"AST": {
													"nativeSrc": "1569:392:3",
													"nodeType": "YulBlock",
													"src": "1569:392:3",
													"statements": [
														{
															"nativeSrc": "1583:67:3",
															"nodeType": "YulAssignment",
															"src": "1583:67:3",
															"value": {
																"arguments": [
																	{
																		"name": "amount",
																		"nativeSrc": "1599:6:3",
																		"nodeType": "YulIdentifier",
																		"src": "1599:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "bytecode",
																				"nativeSrc": "1611:8:3",
																				"nodeType": "YulIdentifier",
																				"src": "1611:8:3"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1621:4:3",
																				"nodeType": "YulLiteral",
																				"src": "1621:4:3",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1607:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "1607:3:3"
																		},
																		"nativeSrc": "1607:19:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1607:19:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "bytecode",
																				"nativeSrc": "1634:8:3",
																				"nodeType": "YulIdentifier",
																				"src": "1634:8:3"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "1628:5:3",
																			"nodeType": "YulIdentifier",
																			"src": "1628:5:3"
																		},
																		"nativeSrc": "1628:15:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1628:15:3"
																	},
																	{
																		"name": "salt",
																		"nativeSrc": "1645:4:3",
																		"nodeType": "YulIdentifier",
																		"src": "1645:4:3"
																	}
																],
																"functionName": {
																	"name": "create2",
																	"nativeSrc": "1591:7:3",
																	"nodeType": "YulIdentifier",
																	"src": "1591:7:3"
																},
																"nativeSrc": "1591:59:3",
																"nodeType": "YulFunctionCall",
																"src": "1591:59:3"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nativeSrc": "1583:4:3",
																	"nodeType": "YulIdentifier",
																	"src": "1583:4:3"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1800:151:3",
																"nodeType": "YulBlock",
																"src": "1800:151:3",
																"statements": [
																	{
																		"nativeSrc": "1818:20:3",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1818:20:3",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1833:4:3",
																					"nodeType": "YulLiteral",
																					"src": "1833:4:3",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "1827:5:3",
																				"nodeType": "YulIdentifier",
																				"src": "1827:5:3"
																			},
																			"nativeSrc": "1827:11:3",
																			"nodeType": "YulFunctionCall",
																			"src": "1827:11:3"
																		},
																		"variables": [
																			{
																				"name": "p",
																				"nativeSrc": "1822:1:3",
																				"nodeType": "YulTypedName",
																				"src": "1822:1:3",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "p",
																					"nativeSrc": "1870:1:3",
																					"nodeType": "YulIdentifier",
																					"src": "1870:1:3"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1873:1:3",
																					"nodeType": "YulLiteral",
																					"src": "1873:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "1876:14:3",
																						"nodeType": "YulIdentifier",
																						"src": "1876:14:3"
																					},
																					"nativeSrc": "1876:16:3",
																					"nodeType": "YulFunctionCall",
																					"src": "1876:16:3"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nativeSrc": "1855:14:3",
																				"nodeType": "YulIdentifier",
																				"src": "1855:14:3"
																			},
																			"nativeSrc": "1855:38:3",
																			"nodeType": "YulFunctionCall",
																			"src": "1855:38:3"
																		},
																		"nativeSrc": "1855:38:3",
																		"nodeType": "YulExpressionStatement",
																		"src": "1855:38:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "p",
																					"nativeSrc": "1917:1:3",
																					"nodeType": "YulIdentifier",
																					"src": "1917:1:3"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "1920:14:3",
																						"nodeType": "YulIdentifier",
																						"src": "1920:14:3"
																					},
																					"nativeSrc": "1920:16:3",
																					"nodeType": "YulFunctionCall",
																					"src": "1920:16:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1910:6:3",
																				"nodeType": "YulIdentifier",
																				"src": "1910:6:3"
																			},
																			"nativeSrc": "1910:27:3",
																			"nodeType": "YulFunctionCall",
																			"src": "1910:27:3"
																		},
																		"nativeSrc": "1910:27:3",
																		"nodeType": "YulExpressionStatement",
																		"src": "1910:27:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "addr",
																				"nativeSrc": "1762:4:3",
																				"nodeType": "YulIdentifier",
																				"src": "1762:4:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1755:6:3",
																			"nodeType": "YulIdentifier",
																			"src": "1755:6:3"
																		},
																		"nativeSrc": "1755:12:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1755:12:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "returndatasize",
																							"nativeSrc": "1780:14:3",
																							"nodeType": "YulIdentifier",
																							"src": "1780:14:3"
																						},
																						"nativeSrc": "1780:16:3",
																						"nodeType": "YulFunctionCall",
																						"src": "1780:16:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1773:6:3",
																					"nodeType": "YulIdentifier",
																					"src": "1773:6:3"
																				},
																				"nativeSrc": "1773:24:3",
																				"nodeType": "YulFunctionCall",
																				"src": "1773:24:3"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "1769:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "1769:3:3"
																		},
																		"nativeSrc": "1769:29:3",
																		"nodeType": "YulFunctionCall",
																		"src": "1769:29:3"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1751:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "1751:3:3"
																},
																"nativeSrc": "1751:48:3",
																"nodeType": "YulFunctionCall",
																"src": "1751:48:3"
															},
															"nativeSrc": "1748:203:3",
															"nodeType": "YulIf",
															"src": "1748:203:3"
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 594,
														"isOffset": false,
														"isSlot": false,
														"src": "1583:4:3",
														"valueSize": 1
													},
													{
														"declaration": 594,
														"isOffset": false,
														"isSlot": false,
														"src": "1762:4:3",
														"valueSize": 1
													},
													{
														"declaration": 587,
														"isOffset": false,
														"isSlot": false,
														"src": "1599:6:3",
														"valueSize": 1
													},
													{
														"declaration": 591,
														"isOffset": false,
														"isSlot": false,
														"src": "1611:8:3",
														"valueSize": 1
													},
													{
														"declaration": 591,
														"isOffset": false,
														"isSlot": false,
														"src": "1634:8:3",
														"valueSize": 1
													},
													{
														"declaration": 589,
														"isOffset": false,
														"isSlot": false,
														"src": "1645:4:3",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 625,
												"nodeType": "InlineAssembly",
												"src": "1544:417:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 626,
														"name": "addr",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 594,
														"src": "1974:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 629,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1990:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1982:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 627,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1982:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 630,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1982:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1974:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 638,
												"nodeType": "IfStatement",
												"src": "1970:81:3",
												"trueBody": {
													"id": 637,
													"nodeType": "Block",
													"src": "1994:57:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 632,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "2015:6:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$697_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 634,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2022:16:3",
																	"memberName": "FailedDeployment",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 691,
																	"src": "2015:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 635,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2015:25:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 636,
															"nodeType": "RevertStatement",
															"src": "2008:32:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 585,
										"nodeType": "StructuredDocumentation",
										"src": "645:560:3",
										"text": " @dev Deploys a contract using `CREATE2`. The address where the contract\n will be deployed can be known in advance via {computeAddress}.\n The bytecode for a contract can be obtained from Solidity with\n `type(contractName).creationCode`.\n Requirements:\n - `bytecode` must not be empty.\n - `salt` must have not been used for `bytecode` already.\n - the factory must have a balance of at least `amount`.\n - if `amount` is non-zero, `bytecode` must have a `payable` constructor."
									},
									"id": 640,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deploy",
									"nameLocation": "1219:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1234:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1226:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 586,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "1250:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1242:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 588,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "bytecode",
												"nameLocation": "1269:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1256:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 590,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1256:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1225:53:3"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "1305:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "1297:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 593,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1297:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:14:3"
									},
									"scope": 675,
									"src": "1210:847:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 659,
										"nodeType": "Block",
										"src": "2353:73:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 643,
															"src": "2385:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 652,
															"name": "bytecodeHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "2391:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 655,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2413:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Create2_$675",
																		"typeString": "library Create2"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Create2_$675",
																		"typeString": "library Create2"
																	}
																],
																"id": 654,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2405:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 653,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2405:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2405:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 650,
														"name": "computeAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															660,
															674
														],
														"referencedDeclaration": 674,
														"src": "2370:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$",
															"typeString": "function (bytes32,bytes32,address) pure returns (address)"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2370:49:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 649,
												"id": 658,
												"nodeType": "Return",
												"src": "2363:56:3"
											}
										]
									},
									"documentation": {
										"id": 641,
										"nodeType": "StructuredDocumentation",
										"src": "2063:193:3",
										"text": " @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n `bytecodeHash` or `salt` will result in a new destination address."
									},
									"id": 660,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nameLocation": "2270:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "2293:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "2285:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 642,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2285:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "bytecodeHash",
												"nameLocation": "2307:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "2299:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 644,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2299:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2284:36:3"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "2344:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 647,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2344:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2343:9:3"
									},
									"scope": 675,
									"src": "2261:165:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "2784:1679:3",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2819:1638:3",
													"nodeType": "YulBlock",
													"src": "2819:1638:3",
													"statements": [
														{
															"nativeSrc": "2833:22:3",
															"nodeType": "YulVariableDeclaration",
															"src": "2833:22:3",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2850:4:3",
																		"nodeType": "YulLiteral",
																		"src": "2850:4:3",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "2844:5:3",
																	"nodeType": "YulIdentifier",
																	"src": "2844:5:3"
																},
																"nativeSrc": "2844:11:3",
																"nodeType": "YulFunctionCall",
																"src": "2844:11:3"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "2837:3:3",
																	"nodeType": "YulTypedName",
																	"src": "2837:3:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "4057:3:3",
																				"nodeType": "YulIdentifier",
																				"src": "4057:3:3"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4062:4:3",
																				"nodeType": "YulLiteral",
																				"src": "4062:4:3",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4053:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "4053:3:3"
																		},
																		"nativeSrc": "4053:14:3",
																		"nodeType": "YulFunctionCall",
																		"src": "4053:14:3"
																	},
																	{
																		"name": "bytecodeHash",
																		"nativeSrc": "4069:12:3",
																		"nodeType": "YulIdentifier",
																		"src": "4069:12:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4046:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "4046:6:3"
																},
																"nativeSrc": "4046:36:3",
																"nodeType": "YulFunctionCall",
																"src": "4046:36:3"
															},
															"nativeSrc": "4046:36:3",
															"nodeType": "YulExpressionStatement",
															"src": "4046:36:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "4106:3:3",
																				"nodeType": "YulIdentifier",
																				"src": "4106:3:3"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4111:4:3",
																				"nodeType": "YulLiteral",
																				"src": "4111:4:3",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4102:3:3",
																			"nodeType": "YulIdentifier",
																			"src": "4102:3:3"
																		},
																		"nativeSrc": "4102:14:3",
																		"nodeType": "YulFunctionCall",
																		"src": "4102:14:3"
																	},
																	{
																		"name": "salt",
																		"nativeSrc": "4118:4:3",
																		"nodeType": "YulIdentifier",
																		"src": "4118:4:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4095:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "4095:6:3"
																},
																"nativeSrc": "4095:28:3",
																"nodeType": "YulFunctionCall",
																"src": "4095:28:3"
															},
															"nativeSrc": "4095:28:3",
															"nodeType": "YulExpressionStatement",
															"src": "4095:28:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "4143:3:3",
																		"nodeType": "YulIdentifier",
																		"src": "4143:3:3"
																	},
																	{
																		"name": "deployer",
																		"nativeSrc": "4148:8:3",
																		"nodeType": "YulIdentifier",
																		"src": "4148:8:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4136:6:3",
																	"nodeType": "YulIdentifier",
																	"src": "4136:6:3"
																},
																"nativeSrc": "4136:21:3",
																"nodeType": "YulFunctionCall",
																"src": "4136:21:3"
															},
															"nativeSrc": "4136:21:3",
															"nodeType": "YulExpressionStatement",
															"src": "4136:21:3"
														},
														{
															"nativeSrc": "4219:27:3",
															"nodeType": "YulVariableDeclaration",
															"src": "4219:27:3",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "4236:3:3",
																		"nodeType": "YulIdentifier",
																		"src": "4236:3:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4241:4:3",
																		"nodeType": "YulLiteral",
																		"src": "4241:4:3",
																		"type": "",
																		"value": "0x0b"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4232:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "4232:3:3"
																},
																"nativeSrc": "4232:14:3",
																"nodeType": "YulFunctionCall",
																"src": "4232:14:3"
															},
															"variables": [
																{
																	"name": "start",
																	"nativeSrc": "4223:5:3",
																	"nodeType": "YulTypedName",
																	"src": "4223:5:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "4345:5:3",
																		"nodeType": "YulIdentifier",
																		"src": "4345:5:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4352:4:3",
																		"nodeType": "YulLiteral",
																		"src": "4352:4:3",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "mstore8",
																	"nativeSrc": "4337:7:3",
																	"nodeType": "YulIdentifier",
																	"src": "4337:7:3"
																},
																"nativeSrc": "4337:20:3",
																"nodeType": "YulFunctionCall",
																"src": "4337:20:3"
															},
															"nativeSrc": "4337:20:3",
															"nodeType": "YulExpressionStatement",
															"src": "4337:20:3"
														},
														{
															"nativeSrc": "4370:77:3",
															"nodeType": "YulAssignment",
															"src": "4370:77:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "start",
																				"nativeSrc": "4392:5:3",
																				"nodeType": "YulIdentifier",
																				"src": "4392:5:3"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4399:2:3",
																				"nodeType": "YulLiteral",
																				"src": "4399:2:3",
																				"type": "",
																				"value": "85"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nativeSrc": "4382:9:3",
																			"nodeType": "YulIdentifier",
																			"src": "4382:9:3"
																		},
																		"nativeSrc": "4382:20:3",
																		"nodeType": "YulFunctionCall",
																		"src": "4382:20:3"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4404:42:3",
																		"nodeType": "YulLiteral",
																		"src": "4404:42:3",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4378:3:3",
																	"nodeType": "YulIdentifier",
																	"src": "4378:3:3"
																},
																"nativeSrc": "4378:69:3",
																"nodeType": "YulFunctionCall",
																"src": "4378:69:3"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nativeSrc": "4370:4:3",
																	"nodeType": "YulIdentifier",
																	"src": "4370:4:3"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 670,
														"isOffset": false,
														"isSlot": false,
														"src": "4370:4:3",
														"valueSize": 1
													},
													{
														"declaration": 665,
														"isOffset": false,
														"isSlot": false,
														"src": "4069:12:3",
														"valueSize": 1
													},
													{
														"declaration": 667,
														"isOffset": false,
														"isSlot": false,
														"src": "4148:8:3",
														"valueSize": 1
													},
													{
														"declaration": 663,
														"isOffset": false,
														"isSlot": false,
														"src": "4118:4:3",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 672,
												"nodeType": "InlineAssembly",
												"src": "2794:1663:3"
											}
										]
									},
									"documentation": {
										"id": 661,
										"nodeType": "StructuredDocumentation",
										"src": "2432:232:3",
										"text": " @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}."
									},
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nameLocation": "2678:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "2701:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "2693:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 662,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "bytecodeHash",
												"nameLocation": "2715:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "2707:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 664,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2707:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "2737:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "2729:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2729:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2692:54:3"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2778:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "2770:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2770:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:14:3"
									},
									"scope": 675,
									"src": "2669:1794:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 676,
							"src": "533:3932:3",
							"usedErrors": [
								584
							],
							"usedEvents": []
						}
					],
					"src": "101:4365:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Errors.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Errors.sol",
					"exportedSymbols": {
						"Errors": [
							697
						]
					},
					"id": 698,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 677,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "100:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Errors",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 678,
								"nodeType": "StructuredDocumentation",
								"src": "126:284:4",
								"text": " @dev Collection of common custom errors used in multiple contracts\n IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n It is recommended to avoid relying on the error API for critical functionality.\n _Available since v5.1._"
							},
							"fullyImplemented": true,
							"id": 697,
							"linearizedBaseContracts": [
								697
							],
							"name": "Errors",
							"nameLocation": "419:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 679,
										"nodeType": "StructuredDocumentation",
										"src": "432:94:4",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cf479181",
									"id": 685,
									"name": "InsufficientBalance",
									"nameLocation": "537:19:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "565:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "557:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 680,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "557:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "582:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "574:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 682,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "574:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "556:33:4"
									},
									"src": "531:59:4"
								},
								{
									"documentation": {
										"id": 686,
										"nodeType": "StructuredDocumentation",
										"src": "596:89:4",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "d6bda275",
									"id": 688,
									"name": "FailedCall",
									"nameLocation": "696:10:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "706:2:4"
									},
									"src": "690:19:4"
								},
								{
									"documentation": {
										"id": 689,
										"nodeType": "StructuredDocumentation",
										"src": "715:46:4",
										"text": " @dev The deployment failed."
									},
									"errorSelector": "b06ebf3d",
									"id": 691,
									"name": "FailedDeployment",
									"nameLocation": "772:16:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "788:2:4"
									},
									"src": "766:25:4"
								},
								{
									"documentation": {
										"id": 692,
										"nodeType": "StructuredDocumentation",
										"src": "797:58:4",
										"text": " @dev A necessary precompile is missing."
									},
									"errorSelector": "42b01bce",
									"id": 696,
									"name": "MissingPrecompile",
									"nameLocation": "866:17:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "884:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 693,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "884:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "883:9:4"
									},
									"src": "860:33:4"
								}
							],
							"scope": 698,
							"src": "411:484:4",
							"usedErrors": [
								685,
								688,
								691,
								696
							],
							"usedEvents": []
						}
					],
					"src": "100:796:4"
				},
				"id": 4
			},
			"src/Contract Architecture/Core Infrastructure/WalletManager.sol": {
				"ast": {
					"absolutePath": "src/Contract Architecture/Core Infrastructure/WalletManager.sol",
					"exportedSymbols": {
						"AlreadyHasVault": [
							719
						],
						"Clones": [
							546
						],
						"FidAlreadyLinked": [
							723
						],
						"FidNotLinked": [
							725
						],
						"IUserVault": [
							714
						],
						"ImplementationNotSet": [
							731
						],
						"NotFidOwner": [
							727
						],
						"Ownable": [
							147
						],
						"OwnerAlreadyLinked": [
							729
						],
						"VaultNotFound": [
							721
						],
						"WalletManager": [
							1116
						],
						"ZeroAddress": [
							717
						]
					},
					"id": 1117,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 699,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 701,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1117,
							"sourceUnit": 148,
							"src": "483:67:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 700,
										"name": "Ownable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 147,
										"src": "491:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/proxy/Clones.sol",
							"file": "@openzeppelin/contracts/proxy/Clones.sol",
							"id": 703,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1117,
							"sourceUnit": 547,
							"src": "551:64:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 702,
										"name": "Clones",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 546,
										"src": "559:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUserVault",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 714,
							"linearizedBaseContracts": [
								714
							],
							"name": "IUserVault",
							"nameLocation": "627:10:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "c4d66de8",
									"id": 708,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "653:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "672:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 708,
												"src": "664:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 704,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "664:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "663:16:5"
									},
									"returnParameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "688:0:5"
									},
									"scope": 714,
									"src": "644:45:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "8da5cb5b",
									"id": 713,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "703:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "708:2:5"
									},
									"returnParameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "734:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 710,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "734:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "733:9:5"
									},
									"scope": 714,
									"src": "694:49:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1117,
							"src": "617:128:5",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"documentation": {
								"id": 715,
								"nodeType": "StructuredDocumentation",
								"src": "747:45:5",
								"text": "@dev Basic errors to keep bytecode lean."
							},
							"errorSelector": "d92e233d",
							"id": 717,
							"name": "ZeroAddress",
							"nameLocation": "798:11:5",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 716,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "809:2:5"
							},
							"src": "792:20:5"
						},
						{
							"errorSelector": "4f109875",
							"id": 719,
							"name": "AlreadyHasVault",
							"nameLocation": "819:15:5",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 718,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "834:2:5"
							},
							"src": "813:24:5"
						},
						{
							"errorSelector": "dee790fb",
							"id": 721,
							"name": "VaultNotFound",
							"nameLocation": "844:13:5",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 720,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "857:2:5"
							},
							"src": "838:22:5"
						},
						{
							"errorSelector": "f9634608",
							"id": 723,
							"name": "FidAlreadyLinked",
							"nameLocation": "867:16:5",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 722,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "883:2:5"
							},
							"src": "861:25:5"
						},
						{
							"errorSelector": "f5275bee",
							"id": 725,
							"name": "FidNotLinked",
							"nameLocation": "893:12:5",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 724,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "905:2:5"
							},
							"src": "887:21:5"
						},
						{
							"errorSelector": "bbd7da74",
							"id": 727,
							"name": "NotFidOwner",
							"nameLocation": "915:11:5",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 726,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "926:2:5"
							},
							"src": "909:20:5"
						},
						{
							"errorSelector": "d2cfecdc",
							"id": 729,
							"name": "OwnerAlreadyLinked",
							"nameLocation": "936:18:5",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 728,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "954:2:5"
							},
							"src": "930:27:5"
						},
						{
							"errorSelector": "40dde935",
							"id": 731,
							"name": "ImplementationNotSet",
							"nameLocation": "964:20:5",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 730,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "984:2:5"
							},
							"src": "958:29:5"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 732,
										"name": "Ownable",
										"nameLocations": [
											"1015:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "1015:7:5"
									},
									"id": 733,
									"nodeType": "InheritanceSpecifier",
									"src": "1015:7:5"
								}
							],
							"canonicalName": "WalletManager",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1116,
							"linearizedBaseContracts": [
								1116,
								147,
								576
							],
							"name": "WalletManager",
							"nameLocation": "998:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 736,
									"libraryName": {
										"id": 734,
										"name": "Clones",
										"nameLocations": [
											"1035:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 546,
										"src": "1035:6:5"
									},
									"nodeType": "UsingForDirective",
									"src": "1029:25:5",
									"typeName": {
										"id": 735,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1046:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"constant": false,
									"documentation": {
										"id": 737,
										"nodeType": "StructuredDocumentation",
										"src": "1060:68:5",
										"text": "@notice UserVault implementation to be cloned for each new user."
									},
									"functionSelector": "a6e7d83f",
									"id": 739,
									"mutability": "mutable",
									"name": "userVaultImplementation",
									"nameLocation": "1148:23:5",
									"nodeType": "VariableDeclaration",
									"scope": 1116,
									"src": "1133:38:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 738,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1133:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 740,
										"nodeType": "StructuredDocumentation",
										"src": "1178:41:5",
										"text": "@notice Owner -> Vault address (1:1)."
									},
									"functionSelector": "5cf25981",
									"id": 744,
									"mutability": "mutable",
									"name": "ownerToVault",
									"nameLocation": "1259:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 1116,
									"src": "1224:47:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
										"typeString": "mapping(address => address)"
									},
									"typeName": {
										"id": 743,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 741,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1232:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1224:27:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
											"typeString": "mapping(address => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 742,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1243:7:5",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "1278:49:5",
										"text": "@notice Farcaster FID -> Owner address (1:1)."
									},
									"functionSelector": "c8b6a983",
									"id": 749,
									"mutability": "mutable",
									"name": "fidToOwner",
									"nameLocation": "1367:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 1116,
									"src": "1332:45:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 748,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 746,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1340:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1332:27:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 747,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1351:7:5",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 750,
										"nodeType": "StructuredDocumentation",
										"src": "1384:45:5",
										"text": "@notice Owner -> FID (0 when not linked)."
									},
									"functionSelector": "e2cc3d2f",
									"id": 754,
									"mutability": "mutable",
									"name": "ownerToFid",
									"nameLocation": "1469:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 1116,
									"src": "1434:45:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 753,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 751,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1442:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1434:27:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 752,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1453:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 755,
										"nodeType": "StructuredDocumentation",
										"src": "1486:61:5",
										"text": "@notice Emitted when a new vault is created for an owner."
									},
									"eventSelector": "4a3920ce64f1f4f94c7d183cc35de5df87c9b0b30de1c886f490b495cb8791c8",
									"id": 763,
									"name": "WalletCreated",
									"nameLocation": "1558:13:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1588:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "1572:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 759,
												"indexed": true,
												"mutability": "mutable",
												"name": "fid",
												"nameLocation": "1611:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "1595:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1595:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"indexed": false,
												"mutability": "mutable",
												"name": "vault",
												"nameLocation": "1624:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "1616:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1571:59:5"
									},
									"src": "1552:79:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 764,
										"nodeType": "StructuredDocumentation",
										"src": "1637:53:5",
										"text": "@notice Emitted when a FID is linked to an owner."
									},
									"eventSelector": "352813b8d042518a94ed321d9dc289e197f2c4808f289e723bb13e59559f1633",
									"id": 770,
									"name": "FidLinked",
									"nameLocation": "1701:9:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 766,
												"indexed": true,
												"mutability": "mutable",
												"name": "fid",
												"nameLocation": "1727:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "1711:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1711:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 768,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1748:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "1732:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1732:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1710:44:5"
									},
									"src": "1695:60:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 771,
										"nodeType": "StructuredDocumentation",
										"src": "1761:58:5",
										"text": "@notice Emitted when a FID is unlinked from its owner."
									},
									"eventSelector": "afa425487c9afa00a971354b7196fe3cfcda1835bf4c2a1027b6f21f28889762",
									"id": 777,
									"name": "FidUnlinked",
									"nameLocation": "1830:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"indexed": true,
												"mutability": "mutable",
												"name": "fid",
												"nameLocation": "1858:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "1842:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 772,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1842:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1879:13:5",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "1863:29:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1863:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1841:52:5"
									},
									"src": "1824:70:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 778,
										"nodeType": "StructuredDocumentation",
										"src": "1900:65:5",
										"text": "@notice Emitted when the UserVault implementation is updated."
									},
									"eventSelector": "b3113c226e7a2d90bb0324c2c6af9fc8f012eb7a61f4004619548b54acf2eb04",
									"id": 782,
									"name": "UserVaultImplementationUpdated",
									"nameLocation": "1976:30:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 780,
												"indexed": true,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "2023:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "2007:30:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 779,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2007:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2006:32:5"
									},
									"src": "1970:69:5"
								},
								{
									"body": {
										"id": 809,
										"nodeType": "Block",
										"src": "2111:212:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 791,
														"name": "_userVaultImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 784,
														"src": "2125:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2161:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2153:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 792,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2153:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 795,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2153:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2125:38:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 800,
												"nodeType": "IfStatement",
												"src": "2121:64:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 797,
															"name": "ZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 717,
															"src": "2172:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 798,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2172:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 799,
													"nodeType": "RevertStatement",
													"src": "2165:20:5"
												}
											},
											{
												"expression": {
													"id": 803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 801,
														"name": "userVaultImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "2195:23:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 802,
														"name": "_userVaultImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 784,
														"src": "2221:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2195:50:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 804,
												"nodeType": "ExpressionStatement",
												"src": "2195:50:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 806,
															"name": "_userVaultImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 784,
															"src": "2291:24:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 805,
														"name": "UserVaultImplementationUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 782,
														"src": "2260:30:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2260:56:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 808,
												"nodeType": "EmitStatement",
												"src": "2255:61:5"
											}
										]
									},
									"id": 810,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 787,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "2099:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2103:6:5",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "2099:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 789,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 786,
												"name": "Ownable",
												"nameLocations": [
													"2091:7:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "2091:7:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2091:19:5"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "_userVaultImplementation",
												"nameLocation": "2065:24:5",
												"nodeType": "VariableDeclaration",
												"scope": 810,
												"src": "2057:32:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 783,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2057:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2056:34:5"
									},
									"returnParameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2111:0:5"
									},
									"scope": 1116,
									"src": "2045:278:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 836,
										"nodeType": "Block",
										"src": "2592:185:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 818,
														"name": "_implementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "2606:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 821,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2633:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 820,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2625:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 819,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2625:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 822,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2625:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2606:29:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 827,
												"nodeType": "IfStatement",
												"src": "2602:55:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 824,
															"name": "ZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 717,
															"src": "2644:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 825,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2644:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 826,
													"nodeType": "RevertStatement",
													"src": "2637:20:5"
												}
											},
											{
												"expression": {
													"id": 830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 828,
														"name": "userVaultImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "2667:23:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 829,
														"name": "_implementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "2693:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2667:41:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 831,
												"nodeType": "ExpressionStatement",
												"src": "2667:41:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 833,
															"name": "_implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "2754:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 832,
														"name": "UserVaultImplementationUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 782,
														"src": "2723:30:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:47:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 835,
												"nodeType": "EmitStatement",
												"src": "2718:52:5"
											}
										]
									},
									"documentation": {
										"id": 811,
										"nodeType": "StructuredDocumentation",
										"src": "2363:144:5",
										"text": "@notice Update the UserVault implementation used by future clones.\n @dev Only affects *new* vaults; existing vaults remain unchanged."
									},
									"functionSelector": "35598a02",
									"id": 837,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 816,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 815,
												"name": "onlyOwner",
												"nameLocations": [
													"2582:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2582:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2582:9:5"
										}
									],
									"name": "setUserVaultImplementation",
									"nameLocation": "2521:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "_implementation",
												"nameLocation": "2556:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "2548:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 812,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2548:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2547:25:5"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2592:0:5"
									},
									"scope": 1116,
									"src": "2512:265:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 943,
										"nodeType": "Block",
										"src": "3319:802:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 852,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 847,
														"name": "userVaultImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "3333:23:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 850,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3368:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 849,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3360:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 848,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3360:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 851,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3360:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3333:37:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 856,
												"nodeType": "IfStatement",
												"src": "3329:72:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 853,
															"name": "ImplementationNotSet",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "3379:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 854,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3379:22:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 855,
													"nodeType": "RevertStatement",
													"src": "3372:29:5"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 857,
														"name": "owner_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "3415:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 860,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3433:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 859,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3425:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 858,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3425:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 861,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3425:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3415:20:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 866,
												"nodeType": "IfStatement",
												"src": "3411:46:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 863,
															"name": "ZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 717,
															"src": "3444:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3444:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 865,
													"nodeType": "RevertStatement",
													"src": "3437:20:5"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 867,
															"name": "ownerToVault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "3471:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																"typeString": "mapping(address => address)"
															}
														},
														"id": 869,
														"indexExpression": {
															"id": 868,
															"name": "owner_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "3484:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3471:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 872,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3503:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 871,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3495:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 870,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3495:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 873,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3495:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3471:34:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 878,
												"nodeType": "IfStatement",
												"src": "3467:64:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 875,
															"name": "AlreadyHasVault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 719,
															"src": "3514:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 876,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3514:17:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 877,
													"nodeType": "RevertStatement",
													"src": "3507:24:5"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 881,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 879,
															"name": "fid_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 842,
															"src": "3545:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 880,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3553:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3545:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 889,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 882,
																"name": "fidToOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 749,
																"src": "3558:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																	"typeString": "mapping(uint256 => address)"
																}
															},
															"id": 884,
															"indexExpression": {
																"id": 883,
																"name": "fid_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 842,
																"src": "3569:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3558:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 887,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3586:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 886,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3578:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 885,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3578:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 888,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3578:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3558:30:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3545:43:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 894,
												"nodeType": "IfStatement",
												"src": "3541:74:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 891,
															"name": "FidAlreadyLinked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 723,
															"src": "3597:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 892,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3597:18:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 893,
													"nodeType": "RevertStatement",
													"src": "3590:25:5"
												}
											},
											{
												"expression": {
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 895,
														"name": "vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 845,
														"src": "3664:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 898,
																"name": "userVaultImplementation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 739,
																"src": "3685:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 896,
																"name": "Clones",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 546,
																"src": "3672:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Clones_$546_$",
																	"typeString": "type(library Clones)"
																}
															},
															"id": 897,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3679:5:5",
															"memberName": "clone",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 170,
															"src": "3672:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_address_$",
																"typeString": "function (address) returns (address)"
															}
														},
														"id": 899,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3672:37:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3664:45:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 901,
												"nodeType": "ExpressionStatement",
												"src": "3664:45:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 906,
															"name": "owner_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "3798:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 903,
																	"name": "vault",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "3780:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 902,
																"name": "IUserVault",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "3769:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUserVault_$714_$",
																	"typeString": "type(contract IUserVault)"
																}
															},
															"id": 904,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3769:17:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUserVault_$714",
																"typeString": "contract IUserVault"
															}
														},
														"id": 905,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3787:10:5",
														"memberName": "initialize",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 708,
														"src": "3769:28:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address) external"
														}
													},
													"id": 907,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3769:36:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 908,
												"nodeType": "ExpressionStatement",
												"src": "3769:36:5"
											},
											{
												"expression": {
													"id": 913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 909,
															"name": "ownerToVault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "3849:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																"typeString": "mapping(address => address)"
															}
														},
														"id": 911,
														"indexExpression": {
															"id": 910,
															"name": "owner_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "3862:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3849:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 912,
														"name": "vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 845,
														"src": "3872:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3849:28:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 914,
												"nodeType": "ExpressionStatement",
												"src": "3849:28:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 915,
														"name": "fid_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 842,
														"src": "3923:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 916,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3931:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3923:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 936,
												"nodeType": "IfStatement",
												"src": "3919:146:5",
												"trueBody": {
													"id": 935,
													"nodeType": "Block",
													"src": "3934:131:5",
													"statements": [
														{
															"expression": {
																"id": 922,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 918,
																		"name": "fidToOwner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 749,
																		"src": "3948:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																			"typeString": "mapping(uint256 => address)"
																		}
																	},
																	"id": 920,
																	"indexExpression": {
																		"id": 919,
																		"name": "fid_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 842,
																		"src": "3959:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3948:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 921,
																	"name": "owner_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 840,
																	"src": "3967:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "3948:25:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 923,
															"nodeType": "ExpressionStatement",
															"src": "3948:25:5"
														},
														{
															"expression": {
																"id": 928,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 924,
																		"name": "ownerToFid",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 754,
																		"src": "3987:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 926,
																	"indexExpression": {
																		"id": 925,
																		"name": "owner_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 840,
																		"src": "3998:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3987:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 927,
																	"name": "fid_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 842,
																	"src": "4008:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3987:25:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 929,
															"nodeType": "ExpressionStatement",
															"src": "3987:25:5"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 931,
																		"name": "fid_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 842,
																		"src": "4041:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 932,
																		"name": "owner_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 840,
																		"src": "4047:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 930,
																	"name": "FidLinked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 770,
																	"src": "4031:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
																		"typeString": "function (uint256,address)"
																	}
																},
																"id": 933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4031:23:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 934,
															"nodeType": "EmitStatement",
															"src": "4026:28:5"
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 938,
															"name": "owner_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "4094:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 939,
															"name": "fid_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 842,
															"src": "4102:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 940,
															"name": "vault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "4108:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 937,
														"name": "WalletCreated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 763,
														"src": "4080:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4080:34:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 942,
												"nodeType": "EmitStatement",
												"src": "4075:39:5"
											}
										]
									},
									"documentation": {
										"id": 838,
										"nodeType": "StructuredDocumentation",
										"src": "2834:395:5",
										"text": " @notice Create a vault for `owner_` and (optionally) link a Farcaster FID.\n @dev    Reverts if owner already has a vault. If fid_ > 0, also links the FID.\n @param  owner_ The EOA or smart account that will control the new vault.\n @param  fid_   Farcaster ID to link (use 0 to skip linking).\n @return vault  The address of the newly created vault clone."
									},
									"functionSelector": "f247d217",
									"id": 944,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createWallet",
									"nameLocation": "3243:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "3264:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "3256:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3256:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "fid_",
												"nameLocation": "3280:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "3272:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3272:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3255:30:5"
									},
									"returnParameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "vault",
												"nameLocation": "3312:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "3304:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3304:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3303:15:5"
									},
									"scope": 1116,
									"src": "3234:887:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 999,
										"nodeType": "Block",
										"src": "4381:315:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 950,
														"name": "fid_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 947,
														"src": "4395:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 951,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4403:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4395:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 956,
												"nodeType": "IfStatement",
												"src": "4391:36:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 953,
															"name": "FidNotLinked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 725,
															"src": "4413:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 954,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4413:14:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 955,
													"nodeType": "RevertStatement",
													"src": "4406:21:5"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 957,
															"name": "fidToOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4441:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 959,
														"indexExpression": {
															"id": 958,
															"name": "fid_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 947,
															"src": "4452:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4441:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 962,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4469:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4461:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 960,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4461:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4461:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4441:30:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 968,
												"nodeType": "IfStatement",
												"src": "4437:61:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 965,
															"name": "FidAlreadyLinked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 723,
															"src": "4480:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 966,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4480:18:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 967,
													"nodeType": "RevertStatement",
													"src": "4473:25:5"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 974,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 969,
															"name": "ownerToFid",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 754,
															"src": "4512:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 972,
														"indexExpression": {
															"expression": {
																"id": 970,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4523:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 971,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4527:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4523:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4512:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 973,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4538:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4512:27:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 978,
												"nodeType": "IfStatement",
												"src": "4508:60:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 975,
															"name": "OwnerAlreadyLinked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "4548:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 976,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4548:20:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 977,
													"nodeType": "RevertStatement",
													"src": "4541:27:5"
												}
											},
											{
												"expression": {
													"id": 984,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 979,
															"name": "fidToOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4579:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 981,
														"indexExpression": {
															"id": 980,
															"name": "fid_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 947,
															"src": "4590:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4579:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 982,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "4598:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 983,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4602:6:5",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4598:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4579:29:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 985,
												"nodeType": "ExpressionStatement",
												"src": "4579:29:5"
											},
											{
												"expression": {
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 986,
															"name": "ownerToFid",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 754,
															"src": "4618:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 989,
														"indexExpression": {
															"expression": {
																"id": 987,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4629:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 988,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4633:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4629:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4618:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 990,
														"name": "fid_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 947,
														"src": "4643:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4618:29:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 992,
												"nodeType": "ExpressionStatement",
												"src": "4618:29:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 994,
															"name": "fid_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 947,
															"src": "4672:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 995,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4678:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4682:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4678:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 993,
														"name": "FidLinked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 770,
														"src": "4662:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4662:27:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 998,
												"nodeType": "EmitStatement",
												"src": "4657:32:5"
											}
										]
									},
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "4127:201:5",
										"text": " @notice Link a Farcaster FID to msg.sender. Each FID and owner can be linked only once.\n @dev    If msg.sender already has a different FID, unlink first by calling `unlinkFid`."
									},
									"functionSelector": "1c576575",
									"id": 1000,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "linkFarcasterId",
									"nameLocation": "4342:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "fid_",
												"nameLocation": "4366:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "4358:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 946,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4358:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4357:14:5"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4381:0:5"
									},
									"scope": 1116,
									"src": "4333:363:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1035,
										"nodeType": "Block",
										"src": "4816:265:5",
										"statements": [
											{
												"assignments": [
													1005
												],
												"declarations": [
													{
														"constant": false,
														"id": 1005,
														"mutability": "mutable",
														"name": "existing",
														"nameLocation": "4834:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 1035,
														"src": "4826:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1004,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4826:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1010,
												"initialValue": {
													"baseExpression": {
														"id": 1006,
														"name": "ownerToFid",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "4845:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1009,
													"indexExpression": {
														"expression": {
															"id": 1007,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "4856:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1008,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4860:6:5",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "4856:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4845:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4826:41:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1011,
														"name": "existing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1005,
														"src": "4881:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1012,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4893:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4881:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1017,
												"nodeType": "IfStatement",
												"src": "4877:40:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1014,
															"name": "FidNotLinked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 725,
															"src": "4903:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 1015,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4903:14:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1016,
													"nodeType": "RevertStatement",
													"src": "4896:21:5"
												}
											},
											{
												"expression": {
													"id": 1021,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "4959:27:5",
													"subExpression": {
														"baseExpression": {
															"id": 1018,
															"name": "fidToOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4966:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 1020,
														"indexExpression": {
															"id": 1019,
															"name": "existing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "4977:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4966:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1022,
												"nodeType": "ExpressionStatement",
												"src": "4959:27:5"
											},
											{
												"expression": {
													"id": 1027,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "4996:29:5",
													"subExpression": {
														"baseExpression": {
															"id": 1023,
															"name": "ownerToFid",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 754,
															"src": "5003:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1026,
														"indexExpression": {
															"expression": {
																"id": 1024,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5014:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1025,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5018:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5014:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5003:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1028,
												"nodeType": "ExpressionStatement",
												"src": "4996:29:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1030,
															"name": "existing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "5053:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1031,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5063:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1032,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5067:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5063:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1029,
														"name": "FidUnlinked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "5041:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 1033,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5041:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1034,
												"nodeType": "EmitStatement",
												"src": "5036:38:5"
											}
										]
									},
									"documentation": {
										"id": 1001,
										"nodeType": "StructuredDocumentation",
										"src": "4702:71:5",
										"text": " @notice Unlink the FID currently tied to msg.sender."
									},
									"functionSelector": "820b3d53",
									"id": 1036,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unlinkFarcasterId",
									"nameLocation": "4787:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4804:2:5"
									},
									"returnParameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4816:0:5"
									},
									"scope": 1116,
									"src": "4778:303:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1060,
										"nodeType": "Block",
										"src": "5255:102:5",
										"statements": [
											{
												"expression": {
													"id": 1048,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1044,
														"name": "vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1042,
														"src": "5265:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 1045,
															"name": "ownerToVault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "5273:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																"typeString": "mapping(address => address)"
															}
														},
														"id": 1047,
														"indexExpression": {
															"id": 1046,
															"name": "owner_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1039,
															"src": "5286:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5273:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5265:28:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1049,
												"nodeType": "ExpressionStatement",
												"src": "5265:28:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1050,
														"name": "vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1042,
														"src": "5307:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1053,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5324:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1052,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5316:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1051,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5316:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1054,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5316:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5307:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1059,
												"nodeType": "IfStatement",
												"src": "5303:47:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1056,
															"name": "VaultNotFound",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 721,
															"src": "5335:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 1057,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5335:15:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1058,
													"nodeType": "RevertStatement",
													"src": "5328:22:5"
												}
											}
										]
									},
									"documentation": {
										"id": 1037,
										"nodeType": "StructuredDocumentation",
										"src": "5121:57:5",
										"text": "@notice Get a vault by owner. Reverts if none exists."
									},
									"functionSelector": "0eb9af38",
									"id": 1061,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getVault",
									"nameLocation": "5192:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "owner_",
												"nameLocation": "5209:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1061,
												"src": "5201:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5201:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5200:16:5"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "vault",
												"nameLocation": "5248:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1061,
												"src": "5240:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1041,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5240:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5239:15:5"
									},
									"scope": 1116,
									"src": "5183:174:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1073,
										"nodeType": "Block",
										"src": "5504:40:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1069,
														"name": "fidToOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 749,
														"src": "5521:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 1071,
													"indexExpression": {
														"id": 1070,
														"name": "fid_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1064,
														"src": "5532:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5521:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1068,
												"id": 1072,
												"nodeType": "Return",
												"src": "5514:23:5"
											}
										]
									},
									"documentation": {
										"id": 1062,
										"nodeType": "StructuredDocumentation",
										"src": "5363:67:5",
										"text": "@notice Get an owner by FID (returns address(0) if not linked)."
									},
									"functionSelector": "7b9cf4f3",
									"id": 1074,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getOwnerByFid",
									"nameLocation": "5444:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "fid_",
												"nameLocation": "5466:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "5458:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1063,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5458:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5457:14:5"
									},
									"returnParameters": {
										"id": 1068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "5495:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1066,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5495:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:9:5"
									},
									"scope": 1116,
									"src": "5435:109:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1114,
										"nodeType": "Block",
										"src": "5706:202:5",
										"statements": [
											{
												"assignments": [
													1083
												],
												"declarations": [
													{
														"constant": false,
														"id": 1083,
														"mutability": "mutable",
														"name": "owner_",
														"nameLocation": "5724:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1114,
														"src": "5716:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1082,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5716:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1087,
												"initialValue": {
													"baseExpression": {
														"id": 1084,
														"name": "fidToOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 749,
														"src": "5733:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 1086,
													"indexExpression": {
														"id": 1085,
														"name": "fid_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "5744:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5733:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5716:33:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1088,
														"name": "owner_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1083,
														"src": "5763:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1091,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5781:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1090,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5773:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1089,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5773:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1092,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5773:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5763:20:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1097,
												"nodeType": "IfStatement",
												"src": "5759:47:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1094,
															"name": "FidNotLinked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 725,
															"src": "5792:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 1095,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5792:14:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1096,
													"nodeType": "RevertStatement",
													"src": "5785:21:5"
												}
											},
											{
												"expression": {
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1098,
														"name": "vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1080,
														"src": "5816:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"baseExpression": {
															"id": 1099,
															"name": "ownerToVault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "5824:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																"typeString": "mapping(address => address)"
															}
														},
														"id": 1101,
														"indexExpression": {
															"id": 1100,
															"name": "owner_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "5837:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5824:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5816:28:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1103,
												"nodeType": "ExpressionStatement",
												"src": "5816:28:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1104,
														"name": "vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1080,
														"src": "5858:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1107,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5875:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1106,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5867:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1105,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5867:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1108,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5867:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5858:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1113,
												"nodeType": "IfStatement",
												"src": "5854:47:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1110,
															"name": "VaultNotFound",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 721,
															"src": "5886:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 1111,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5886:15:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1112,
													"nodeType": "RevertStatement",
													"src": "5879:22:5"
												}
											}
										]
									},
									"documentation": {
										"id": 1075,
										"nodeType": "StructuredDocumentation",
										"src": "5550:76:5",
										"text": "@notice Get a vault by FID (reverts if FID not linked or vault missing)."
									},
									"functionSelector": "8a62bb16",
									"id": 1115,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getVaultByFid",
									"nameLocation": "5640:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "fid_",
												"nameLocation": "5662:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1115,
												"src": "5654:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5654:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5653:14:5"
									},
									"returnParameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "vault",
												"nameLocation": "5699:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1115,
												"src": "5691:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1079,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5691:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5690:15:5"
									},
									"scope": 1116,
									"src": "5631:277:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1117,
							"src": "989:4921:5",
							"usedErrors": [
								13,
								18,
								685,
								691,
								717,
								719,
								721,
								723,
								725,
								729,
								731
							],
							"usedEvents": [
								24,
								763,
								770,
								777,
								782
							]
						}
					],
					"src": "32:5879:5"
				},
				"id": 5
			}
		}
	}
}